
openBLT_STM32F3VETx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fcc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031bc  080031bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080031bc  080031bc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031bc  080031bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080031c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000510  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000520  20000520  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008900  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027cd  00000000  00000000  00028940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  0002b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a30  00000000  00000000  0002bcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c72  00000000  00000000  0002c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af7e  00000000  00000000  0004d35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c61c1  00000000  00000000  000582d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e499  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ae4  00000000  00000000  0011e4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003148 	.word	0x08003148

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003148 	.word	0x08003148

080001d4 <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 80001de:	f000 fab9 	bl	8000754 <CopService>
 80001e2:	e7fc      	b.n	80001de <AssertFailure+0xa>

080001e4 <BackDoorInit>:
** \brief     Initializes the backdoor entry option.
** \return    none
**
****************************************************************************************/
void BackDoorInit(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
    FileHandleFirmwareUpdateRequest();
  }
#endif
#else
  /* open the backdoor after a reset */
  backdoorOpen = BLT_TRUE;
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <BackDoorInit+0x18>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 80001ee:	f000 f82d 	bl	800024c <BackDoorRestartTimer>
#endif
  /* perform the first check that open/closes the backdoor */
  BackDoorCheck();
 80001f2:	f000 f805 	bl	8000200 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c

08000200 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 8000204:	f000 fa8e 	bl	8000724 <ComIsConnected>
 8000208:	4603      	mov	r3, r0
 800020a:	2b01      	cmp	r3, #1
 800020c:	d015      	beq.n	800023a <BackDoorCheck+0x3a>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 800020e:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <BackDoorCheck+0x40>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d112      	bne.n	800023c <BackDoorCheck+0x3c>
  {
    /* check if the backdoor entry time window elapsed */
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8000216:	f000 fe01 	bl	8000e1c <TimerGet>
 800021a:	4601      	mov	r1, r0
 800021c:	4b09      	ldr	r3, [pc, #36]	; (8000244 <BackDoorCheck+0x44>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <BackDoorCheck+0x48>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4413      	add	r3, r2
 8000226:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800022a:	4299      	cmp	r1, r3
 800022c:	d306      	bcc.n	800023c <BackDoorCheck+0x3c>
    {
      /* close the backdoor */
      backdoorOpen = BLT_FALSE;
 800022e:	4b04      	ldr	r3, [pc, #16]	; (8000240 <BackDoorCheck+0x40>)
 8000230:	2200      	movs	r2, #0
 8000232:	701a      	strb	r2, [r3, #0]
#endif
      {
        /* no firmware update requests detected, so attempt to start the user program.
         * this function does not return if a valid user program is present.
         */
        CpuStartUserProgram();
 8000234:	f000 fa9c 	bl	8000770 <CpuStartUserProgram>
 8000238:	e000      	b.n	800023c <BackDoorCheck+0x3c>
    return;
 800023a:	bf00      	nop
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	2000002c 	.word	0x2000002c
 8000244:	20000034 	.word	0x20000034
 8000248:	20000030 	.word	0x20000030

0800024c <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <BackDoorRestartTimer+0x1c>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b01      	cmp	r3, #1
 8000256:	d104      	bne.n	8000262 <BackDoorRestartTimer+0x16>
  {
    backdoorOpenTime = TimerGet();
 8000258:	f000 fde0 	bl	8000e1c <TimerGet>
 800025c:	4603      	mov	r3, r0
 800025e:	4a03      	ldr	r2, [pc, #12]	; (800026c <BackDoorRestartTimer+0x20>)
 8000260:	6013      	str	r3, [r2, #0]
  }
} /*** end of BackDoorRestartTimer ***/
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	2000002c 	.word	0x2000002c
 800026c:	20000030 	.word	0x20000030

08000270 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* initialize the CPU */
  CpuInit();
 8000274:	f000 fa75 	bl	8000762 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8000278:	f000 fa65 	bl	8000746 <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 800027c:	f000 fd8e 	bl	8000d9c <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8000280:	f000 fd4b 	bl	8000d1a <NvmInit>
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8000284:	f000 f9b0 	bl	80005e8 <ComInit>
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 8000288:	f7ff ffac 	bl	80001e4 <BackDoorInit>
} /*** end of BootInit ***/
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}

08000290 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* service the watchdog */
  CopService();
 8000294:	f000 fa5e 	bl	8000754 <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8000298:	f000 fdaa 	bl	8000df0 <TimerUpdate>
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 800029c:	f000 f9b2 	bl	8000604 <ComTask>
#endif
  /* control the backdoor */
  BackDoorCheck();
 80002a0:	f7ff ffae 	bl	8000200 <BackDoorCheck>
} /*** end of BootTask ***/
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <CpuIrqDisable>:

// ONLY FOR F3
void CpuIrqDisable(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  __asm volatile ("cpsid i");
 80002ac:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 80002ae:	bf00      	nop
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <CpuIrqEnable>:
** \brief     Enable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  __asm volatile ("cpsie i");
 80002bc:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr

080002c8 <CanGetSpeedConfig>:
**            otherwise.
**
****************************************************************************************/
static blt_bool CanGetSpeedConfig(blt_int16u baud, blt_int16u *prescaler,
                                  blt_int8u *tseg1, blt_int8u *tseg2)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08a      	sub	sp, #40	; 0x28
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60b9      	str	r1, [r7, #8]
 80002d0:	607a      	str	r2, [r7, #4]
 80002d2:	603b      	str	r3, [r7, #0]
 80002d4:	4603      	mov	r3, r0
 80002d6:	81fb      	strh	r3, [r7, #14]
  blt_int8u  cnt;
  blt_int32u canClockFreqkHz;
  LL_RCC_ClocksTypeDef rccClocks;

  /* read clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rccClocks);
 80002d8:	f107 0310 	add.w	r3, r7, #16
 80002dc:	4618      	mov	r0, r3
 80002de:	f002 fe35 	bl	8002f4c <LL_RCC_GetSystemClocksFreq>
  /* store CAN peripheral clock speed in kHz */
  canClockFreqkHz = rccClocks.PCLK1_Frequency / 1000u;
 80002e2:	69bb      	ldr	r3, [r7, #24]
 80002e4:	4a31      	ldr	r2, [pc, #196]	; (80003ac <CanGetSpeedConfig+0xe4>)
 80002e6:	fba2 2303 	umull	r2, r3, r2, r3
 80002ea:	099b      	lsrs	r3, r3, #6
 80002ec:	623b      	str	r3, [r7, #32]

  /* loop through all possible time quanta configurations to find a match */
  for (cnt=0; cnt < sizeof(canTiming)/sizeof(canTiming[0]); cnt++)
 80002ee:	2300      	movs	r3, #0
 80002f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80002f4:	e050      	b.n	8000398 <CanGetSpeedConfig+0xd0>
  {
    if ((canClockFreqkHz % (baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1))) == 0)
 80002f6:	89fa      	ldrh	r2, [r7, #14]
 80002f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80002fc:	492c      	ldr	r1, [pc, #176]	; (80003b0 <CanGetSpeedConfig+0xe8>)
 80002fe:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8000302:	4618      	mov	r0, r3
 8000304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000308:	4929      	ldr	r1, [pc, #164]	; (80003b0 <CanGetSpeedConfig+0xe8>)
 800030a:	005b      	lsls	r3, r3, #1
 800030c:	440b      	add	r3, r1
 800030e:	785b      	ldrb	r3, [r3, #1]
 8000310:	4403      	add	r3, r0
 8000312:	3301      	adds	r3, #1
 8000314:	fb02 f303 	mul.w	r3, r2, r3
 8000318:	461a      	mov	r2, r3
 800031a:	6a3b      	ldr	r3, [r7, #32]
 800031c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000320:	fb01 f202 	mul.w	r2, r1, r2
 8000324:	1a9b      	subs	r3, r3, r2
 8000326:	2b00      	cmp	r3, #0
 8000328:	d131      	bne.n	800038e <CanGetSpeedConfig+0xc6>
    {
      /* compute the prescaler that goes with this TQ configuration */
      *prescaler = canClockFreqkHz/(baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1));
 800032a:	89fa      	ldrh	r2, [r7, #14]
 800032c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000330:	491f      	ldr	r1, [pc, #124]	; (80003b0 <CanGetSpeedConfig+0xe8>)
 8000332:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8000336:	4618      	mov	r0, r3
 8000338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800033c:	491c      	ldr	r1, [pc, #112]	; (80003b0 <CanGetSpeedConfig+0xe8>)
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	440b      	add	r3, r1
 8000342:	785b      	ldrb	r3, [r3, #1]
 8000344:	4403      	add	r3, r0
 8000346:	3301      	adds	r3, #1
 8000348:	fb02 f303 	mul.w	r3, r2, r3
 800034c:	461a      	mov	r2, r3
 800034e:	6a3b      	ldr	r3, [r7, #32]
 8000350:	fbb3 f3f2 	udiv	r3, r3, r2
 8000354:	b29a      	uxth	r2, r3
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	801a      	strh	r2, [r3, #0]

      /* make sure the prescaler is valid */
      if ((*prescaler > 0) && (*prescaler <= 1024))
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	881b      	ldrh	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d015      	beq.n	800038e <CanGetSpeedConfig+0xc6>
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800036a:	d810      	bhi.n	800038e <CanGetSpeedConfig+0xc6>
      {
        /* store the bustiming configuration */
        *tseg1 = canTiming[cnt].tseg1;
 800036c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000370:	4a0f      	ldr	r2, [pc, #60]	; (80003b0 <CanGetSpeedConfig+0xe8>)
 8000372:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	701a      	strb	r2, [r3, #0]
        *tseg2 = canTiming[cnt].tseg2;
 800037a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800037e:	4a0c      	ldr	r2, [pc, #48]	; (80003b0 <CanGetSpeedConfig+0xe8>)
 8000380:	005b      	lsls	r3, r3, #1
 8000382:	4413      	add	r3, r2
 8000384:	785a      	ldrb	r2, [r3, #1]
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	701a      	strb	r2, [r3, #0]
        /* found a good bus timing configuration */
        return BLT_TRUE;
 800038a:	2301      	movs	r3, #1
 800038c:	e009      	b.n	80003a2 <CanGetSpeedConfig+0xda>
  for (cnt=0; cnt < sizeof(canTiming)/sizeof(canTiming[0]); cnt++)
 800038e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000392:	3301      	adds	r3, #1
 8000394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800039c:	2b11      	cmp	r3, #17
 800039e:	d9aa      	bls.n	80002f6 <CanGetSpeedConfig+0x2e>
      }
    }
  }
  /* could not find a good bus timing configuration */
  return BLT_FALSE;
 80003a0:	2300      	movs	r3, #0
} /*** end of CanGetSpeedConfig ***/
 80003a2:	4618      	mov	r0, r3
 80003a4:	3728      	adds	r7, #40	; 0x28
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	10624dd3 	.word	0x10624dd3
 80003b0:	08003178 	.word	0x08003178

080003b4 <CanInit>:
** \brief     Initializes the CAN controller and synchronizes it to the CAN bus.
** \return    none.
**
****************************************************************************************/
void CanInit(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08e      	sub	sp, #56	; 0x38
 80003b8:	af00      	add	r7, sp, #0
  blt_int16u prescaler = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	857b      	strh	r3, [r7, #42]	; 0x2a
  blt_int8u  tseg1 = 0, tseg2 = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80003c4:	2300      	movs	r3, #0
 80003c6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  CAN_FilterTypeDef filterConfig;
  blt_int32u rxMsgId = BOOT_COM_CAN_RX_MSG_ID;
 80003ca:	f240 6367 	movw	r3, #1639	; 0x667
 80003ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the current implementation supports CAN1. throw an assertion error in case a
   * different CAN channel is configured.
   */
  ASSERT_CT(BOOT_COM_CAN_CHANNEL_INDEX == 0);
  /* obtain bittiming configuration information. */
  if (CanGetSpeedConfig(BOOT_COM_CAN_BAUDRATE/1000, &prescaler, &tseg1, &tseg2) == BLT_FALSE)
 80003d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003d4:	f107 0229 	add.w	r2, r7, #41	; 0x29
 80003d8:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 80003dc:	207d      	movs	r0, #125	; 0x7d
 80003de:	f7ff ff73 	bl	80002c8 <CanGetSpeedConfig>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d103      	bne.n	80003f0 <CanInit+0x3c>
     * clock configuration. Verify the following settings in blt_conf.h:
     *   - BOOT_COM_CAN_BAUDRATE
     *   - BOOT_CPU_XTAL_SPEED_KHZ
     *   - BOOT_CPU_SYSTEM_SPEED_KHZ
     */
    ASSERT_RT(BLT_FALSE);
 80003e8:	21af      	movs	r1, #175	; 0xaf
 80003ea:	4834      	ldr	r0, [pc, #208]	; (80004bc <CanInit+0x108>)
 80003ec:	f7ff fef2 	bl	80001d4 <AssertFailure>
  }

  /* set the CAN controller configuration. */
  canHandle.Instance = CAN_CHANNEL;
 80003f0:	4b33      	ldr	r3, [pc, #204]	; (80004c0 <CanInit+0x10c>)
 80003f2:	4a34      	ldr	r2, [pc, #208]	; (80004c4 <CanInit+0x110>)
 80003f4:	601a      	str	r2, [r3, #0]
  canHandle.Init.TimeTriggeredMode = DISABLE;
 80003f6:	4b32      	ldr	r3, [pc, #200]	; (80004c0 <CanInit+0x10c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	761a      	strb	r2, [r3, #24]
  canHandle.Init.AutoBusOff = DISABLE;
 80003fc:	4b30      	ldr	r3, [pc, #192]	; (80004c0 <CanInit+0x10c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	765a      	strb	r2, [r3, #25]
  canHandle.Init.AutoWakeUp = DISABLE;
 8000402:	4b2f      	ldr	r3, [pc, #188]	; (80004c0 <CanInit+0x10c>)
 8000404:	2200      	movs	r2, #0
 8000406:	769a      	strb	r2, [r3, #26]
  canHandle.Init.AutoRetransmission = ENABLE;
 8000408:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <CanInit+0x10c>)
 800040a:	2201      	movs	r2, #1
 800040c:	76da      	strb	r2, [r3, #27]
  canHandle.Init.ReceiveFifoLocked = DISABLE;
 800040e:	4b2c      	ldr	r3, [pc, #176]	; (80004c0 <CanInit+0x10c>)
 8000410:	2200      	movs	r2, #0
 8000412:	771a      	strb	r2, [r3, #28]
  canHandle.Init.TransmitFifoPriority = DISABLE;
 8000414:	4b2a      	ldr	r3, [pc, #168]	; (80004c0 <CanInit+0x10c>)
 8000416:	2200      	movs	r2, #0
 8000418:	775a      	strb	r2, [r3, #29]
  canHandle.Init.Mode = CAN_MODE_NORMAL;
 800041a:	4b29      	ldr	r3, [pc, #164]	; (80004c0 <CanInit+0x10c>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  canHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000420:	4b27      	ldr	r3, [pc, #156]	; (80004c0 <CanInit+0x10c>)
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
  canHandle.Init.TimeSeg1 = ((blt_int32u)tseg1 - 1) << CAN_BTR_TS1_Pos;
 8000426:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800042a:	3b01      	subs	r3, #1
 800042c:	041b      	lsls	r3, r3, #16
 800042e:	4a24      	ldr	r2, [pc, #144]	; (80004c0 <CanInit+0x10c>)
 8000430:	6113      	str	r3, [r2, #16]
  canHandle.Init.TimeSeg2 = ((blt_int32u)tseg2 - 1) << CAN_BTR_TS2_Pos;
 8000432:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000436:	3b01      	subs	r3, #1
 8000438:	051b      	lsls	r3, r3, #20
 800043a:	4a21      	ldr	r2, [pc, #132]	; (80004c0 <CanInit+0x10c>)
 800043c:	6153      	str	r3, [r2, #20]
  canHandle.Init.Prescaler = prescaler;
 800043e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000440:	461a      	mov	r2, r3
 8000442:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <CanInit+0x10c>)
 8000444:	605a      	str	r2, [r3, #4]
  /* initialize the CAN controller. this only fails if the CAN controller hardware is
   * faulty. no need to evaluate the return value as there is nothing we can do about
   * a faulty CAN controller.
   */
  (void)HAL_CAN_Init(&canHandle);
 8000446:	481e      	ldr	r0, [pc, #120]	; (80004c0 <CanInit+0x10c>)
 8000448:	f001 fc8a 	bl	8001d60 <HAL_CAN_Init>
  /* determine the reception filter mask and id values such that it only leaves one
   * CAN identifier through (BOOT_COM_CAN_RX_MSG_ID).
   */
  if ((rxMsgId & 0x80000000) == 0)
 800044c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800044e:	2b00      	cmp	r3, #0
 8000450:	db05      	blt.n	800045e <CanInit+0xaa>
  {
    rxFilterId = rxMsgId << CAN_RI0R_STID_Pos;
 8000452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000454:	055b      	lsls	r3, r3, #21
 8000456:	637b      	str	r3, [r7, #52]	; 0x34
    rxFilterMask = (CAN_RI0R_STID_Msk) | CAN_RI0R_IDE;
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <CanInit+0x114>)
 800045a:	633b      	str	r3, [r7, #48]	; 0x30
 800045c:	e00a      	b.n	8000474 <CanInit+0xc0>
  }
  else
  {
    /* negate the ID-type bit */
    rxMsgId &= ~0x80000000;
 800045e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000460:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000464:	62fb      	str	r3, [r7, #44]	; 0x2c
    rxFilterId = (rxMsgId << CAN_RI0R_EXID_Pos) | CAN_RI0R_IDE;
 8000466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000468:	00db      	lsls	r3, r3, #3
 800046a:	f043 0304 	orr.w	r3, r3, #4
 800046e:	637b      	str	r3, [r7, #52]	; 0x34
    rxFilterMask = (CAN_RI0R_EXID_Msk) | CAN_RI0R_IDE;
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <CanInit+0x118>)
 8000472:	633b      	str	r3, [r7, #48]	; 0x30
  }
  /* configure the reception filter. note that the implementation of this function
   * always returns HAL_OK, so no need to evaluate the return value.
   */
  /* filter 0 is the first filter assigned to the bxCAN master (CAN1) */
  filterConfig.FilterBank = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000478:	2300      	movs	r3, #0
 800047a:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800047c:	2301      	movs	r3, #1
 800047e:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = (rxFilterId >> 16) & 0x0000FFFFu;
 8000480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000482:	0c1b      	lsrs	r3, r3, #16
 8000484:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = rxFilterId & 0x0000FFFFu;
 8000486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000488:	b29b      	uxth	r3, r3
 800048a:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = (rxFilterMask >> 16) & 0x0000FFFFu;
 800048c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800048e:	0c1b      	lsrs	r3, r3, #16
 8000490:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = rxFilterMask & 0x0000FFFFu;
 8000492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000494:	b29b      	uxth	r3, r3
 8000496:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000498:	2300      	movs	r3, #0
 800049a:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 800049c:	2301      	movs	r3, #1
 800049e:	623b      	str	r3, [r7, #32]
  /* select the start slave bank number (for CAN1). this configuration assigns filter
   * banks 0..13 to CAN1 and 14..27 to CAN2.
   */
  filterConfig.SlaveStartFilterBank = 14;
 80004a0:	230e      	movs	r3, #14
 80004a2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)HAL_CAN_ConfigFilter(&canHandle, &filterConfig);
 80004a4:	463b      	mov	r3, r7
 80004a6:	4619      	mov	r1, r3
 80004a8:	4805      	ldr	r0, [pc, #20]	; (80004c0 <CanInit+0x10c>)
 80004aa:	f001 fd54 	bl	8001f56 <HAL_CAN_ConfigFilter>
  /* start the CAN peripheral. no need to evaluate the return value as there is nothing
   * we can do about a faulty CAN controller. */
  (void)HAL_CAN_Start(&canHandle);
 80004ae:	4804      	ldr	r0, [pc, #16]	; (80004c0 <CanInit+0x10c>)
 80004b0:	f001 fe1b 	bl	80020ea <HAL_CAN_Start>
} /*** end of CanInit ***/
 80004b4:	bf00      	nop
 80004b6:	3738      	adds	r7, #56	; 0x38
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	08003160 	.word	0x08003160
 80004c0:	20000038 	.word	0x20000038
 80004c4:	40006400 	.word	0x40006400
 80004c8:	ffe00004 	.word	0xffe00004
 80004cc:	001ffffc 	.word	0x001ffffc

080004d0 <CanTransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void CanTransmitPacket(blt_int8u *data, blt_int8u len)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08c      	sub	sp, #48	; 0x30
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	460b      	mov	r3, r1
 80004da:	70fb      	strb	r3, [r7, #3]
  blt_int32u txMsgId = BOOT_COM_CAN_TX_MSG_ID;
 80004dc:	f240 73e1 	movw	r3, #2017	; 0x7e1
 80004e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  blt_int32u txMsgMailbox;
  blt_int32u timeout;
  HAL_StatusTypeDef txStatus;

  /* configure the message that should be transmitted. */
  if ((txMsgId & 0x80000000) == 0)
 80004e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	db04      	blt.n	80004f2 <CanTransmitPacket+0x22>
  {
    /* set the 11-bit CAN identifier. */
    txMsgHeader.StdId = txMsgId;
 80004e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ea:	60fb      	str	r3, [r7, #12]
    txMsgHeader.IDE = CAN_ID_STD;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	e007      	b.n	8000502 <CanTransmitPacket+0x32>
  }
  else
  {
    /* negate the ID-type bit */
    txMsgId &= ~0x80000000;
 80004f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80004f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* set the 29-bit CAN identifier. */
    txMsgHeader.ExtId = txMsgId;
 80004fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004fc:	613b      	str	r3, [r7, #16]
    txMsgHeader.IDE = CAN_ID_EXT;
 80004fe:	2304      	movs	r3, #4
 8000500:	617b      	str	r3, [r7, #20]
  }
  txMsgHeader.RTR = CAN_RTR_DATA;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  txMsgHeader.DLC = len;
 8000506:	78fb      	ldrb	r3, [r7, #3]
 8000508:	61fb      	str	r3, [r7, #28]

  /* submit the message for transmission. */
  txStatus = HAL_CAN_AddTxMessage(&canHandle, &txMsgHeader, data,
 800050a:	f107 0308 	add.w	r3, r7, #8
 800050e:	f107 010c 	add.w	r1, r7, #12
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	4812      	ldr	r0, [pc, #72]	; (8000560 <CanTransmitPacket+0x90>)
 8000516:	f001 fe2c 	bl	8002172 <HAL_CAN_AddTxMessage>
 800051a:	4603      	mov	r3, r0
 800051c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                  (uint32_t *)&txMsgMailbox);
  if (txStatus == HAL_OK)
 8000520:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000524:	2b00      	cmp	r3, #0
 8000526:	d117      	bne.n	8000558 <CanTransmitPacket+0x88>
  {
    /* determine timeout time for the transmit completion. */
    timeout = TimerGet() + CAN_MSG_TX_TIMEOUT_MS;
 8000528:	f000 fc78 	bl	8000e1c <TimerGet>
 800052c:	4603      	mov	r3, r0
 800052e:	3332      	adds	r3, #50	; 0x32
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
    /* poll for completion of the transmit operation. */
    while (HAL_CAN_IsTxMessagePending(&canHandle, txMsgMailbox) != 0)
 8000532:	e007      	b.n	8000544 <CanTransmitPacket+0x74>
    {
      /* service the watchdog. */
      CopService();
 8000534:	f000 f90e 	bl	8000754 <CopService>
      /* break loop upon timeout. this would indicate a hardware failure or no other
       * nodes connected to the bus.
       */
      if (TimerGet() > timeout)
 8000538:	f000 fc70 	bl	8000e1c <TimerGet>
 800053c:	4602      	mov	r2, r0
 800053e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000540:	4293      	cmp	r3, r2
 8000542:	d308      	bcc.n	8000556 <CanTransmitPacket+0x86>
    while (HAL_CAN_IsTxMessagePending(&canHandle, txMsgMailbox) != 0)
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <CanTransmitPacket+0x90>)
 800054a:	f001 feed 	bl	8002328 <HAL_CAN_IsTxMessagePending>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1ef      	bne.n	8000534 <CanTransmitPacket+0x64>
      {
        break;
      }
    }
  }
} /*** end of CanTransmitPacket ***/
 8000554:	e000      	b.n	8000558 <CanTransmitPacket+0x88>
        break;
 8000556:	bf00      	nop
} /*** end of CanTransmitPacket ***/
 8000558:	bf00      	nop
 800055a:	3730      	adds	r7, #48	; 0x30
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000038 	.word	0x20000038

08000564 <CanReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE is a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool CanReceivePacket(blt_int8u *data, blt_int8u *len)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08c      	sub	sp, #48	; 0x30
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  blt_int32u rxMsgId = BOOT_COM_CAN_RX_MSG_ID;
 800056e:	f240 6367 	movw	r3, #1639	; 0x667
 8000572:	62bb      	str	r3, [r7, #40]	; 0x28
  blt_bool result = BLT_FALSE;
 8000574:	2300      	movs	r3, #0
 8000576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  CAN_RxHeaderTypeDef rxMsgHeader;

  if (HAL_CAN_GetRxMessage(&canHandle, CAN_RX_FIFO0, &rxMsgHeader, data) == HAL_OK)
 800057a:	f107 020c 	add.w	r2, r7, #12
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2100      	movs	r1, #0
 8000582:	4818      	ldr	r0, [pc, #96]	; (80005e4 <CanReceivePacket+0x80>)
 8000584:	f001 fef4 	bl	8002370 <HAL_CAN_GetRxMessage>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d11b      	bne.n	80005c6 <CanReceivePacket+0x62>
  {
    /* check if this message has the configured CAN packet identifier. */
    if ((rxMsgId & 0x80000000) == 0)
 800058e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000590:	2b00      	cmp	r3, #0
 8000592:	db0a      	blt.n	80005aa <CanReceivePacket+0x46>
    {
      /* was an 11-bit CAN message received that matches? */
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000598:	429a      	cmp	r2, r3
 800059a:	d114      	bne.n	80005c6 <CanReceivePacket+0x62>
           (rxMsgHeader.IDE == CAN_ID_STD) )
 800059c:	697b      	ldr	r3, [r7, #20]
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d111      	bne.n	80005c6 <CanReceivePacket+0x62>
      {
        /* set flag that a packet with a matching CAN identifier was received. */
        result = BLT_TRUE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80005a8:	e00d      	b.n	80005c6 <CanReceivePacket+0x62>
      }
    }
    else
    {
      /* negate the ID-type bit. */
      rxMsgId &= ~0x80000000;
 80005aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
      /* was an 29-bit CAN message received that matches? */
      if ( (rxMsgHeader.ExtId == rxMsgId) &&
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d105      	bne.n	80005c6 <CanReceivePacket+0x62>
           (rxMsgHeader.IDE == CAN_ID_EXT) )
 80005ba:	697b      	ldr	r3, [r7, #20]
      if ( (rxMsgHeader.ExtId == rxMsgId) &&
 80005bc:	2b04      	cmp	r3, #4
 80005be:	d102      	bne.n	80005c6 <CanReceivePacket+0x62>
      {
        /* set flag that a packet with a matching CAN identifier was received. */
        result = BLT_TRUE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
  /* store the data length. */
  if (result == BLT_TRUE)
 80005c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d103      	bne.n	80005d6 <CanReceivePacket+0x72>
  {
    *len = rxMsgHeader.DLC;
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	701a      	strb	r2, [r3, #0]
  }
  /* Give the result back to the caller. */
  return result;
 80005d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
} /*** end of CanReceivePacket ***/
 80005da:	4618      	mov	r0, r3
 80005dc:	3730      	adds	r7, #48	; 0x30
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000038 	.word	0x20000038

080005e8 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* initialize the XCP communication protocol */
  XcpInit();
 80005ec:	f000 fc28 	bl	8000e40 <XcpInit>
#if (BOOT_COM_CAN_ENABLE > 0)
  /* initialize the CAN controller */
  CanInit();
 80005f0:	f7ff fee0 	bl	80003b4 <CanInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
 80005f4:	4b02      	ldr	r3, [pc, #8]	; (8000600 <ComInit+0x18>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
#endif
} /*** end of ComInit ***/
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000000 	.word	0x20000000

08000604 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
  blt_int8u xcpPacketLen;
  /* make xcpCtoReqPacket static for runtime efficiency */
  static blt_int8u xcpCtoReqPacket[BOOT_COM_RX_MAX_DATA];

#if (BOOT_COM_CAN_ENABLE > 0)
  if (CanReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 800060a:	1dfb      	adds	r3, r7, #7
 800060c:	4619      	mov	r1, r3
 800060e:	4809      	ldr	r0, [pc, #36]	; (8000634 <ComTask+0x30>)
 8000610:	f7ff ffa8 	bl	8000564 <CanReceivePacket>
 8000614:	4603      	mov	r3, r0
 8000616:	2b01      	cmp	r3, #1
 8000618:	d107      	bne.n	800062a <ComTask+0x26>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_CAN;
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <ComTask+0x34>)
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	4619      	mov	r1, r3
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <ComTask+0x30>)
 8000626:	f000 fc4b 	bl	8000ec0 <XcpPacketReceived>
  }
#endif
} /*** end of ComTask ***/
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000060 	.word	0x20000060
 8000638:	20000000 	.word	0x20000000

0800063c <ComFree>:
** \brief     Releases the communication module.
** \return    none
**
****************************************************************************************/
void ComFree(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
} /*** end of ComFree ***/
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
#if (BOOT_COM_CAN_ENABLE > 0)
  /* transmit the packet. note that len is limited to 8 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_CAN)
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <ComTransmitPacket+0x2c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d105      	bne.n	800066c <ComTransmitPacket+0x20>
  {
    CanTransmitPacket(data, (blt_int8u)len);
 8000660:	887b      	ldrh	r3, [r7, #2]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	4619      	mov	r1, r3
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff ff32 	bl	80004d0 <CanTransmitPacket>
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 800066c:	f000 fc1a 	bl	8000ea4 <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000000 	.word	0x20000000

0800067c <ComGetActiveInterfaceMaxRxLen>:
**            communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <ComGetActiveInterfaceMaxRxLen+0x50>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b03      	cmp	r3, #3
 8000688:	d816      	bhi.n	80006b8 <ComGetActiveInterfaceMaxRxLen+0x3c>
 800068a:	a201      	add	r2, pc, #4	; (adr r2, 8000690 <ComGetActiveInterfaceMaxRxLen+0x14>)
 800068c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000690:	080006a1 	.word	0x080006a1
 8000694:	080006a7 	.word	0x080006a7
 8000698:	080006ad 	.word	0x080006ad
 800069c:	080006b3 	.word	0x080006b3
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 80006a0:	2340      	movs	r3, #64	; 0x40
 80006a2:	80fb      	strh	r3, [r7, #6]
      break;
 80006a4:	e00b      	b.n	80006be <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
 80006a6:	2308      	movs	r3, #8
 80006a8:	80fb      	strh	r3, [r7, #6]
      break;
 80006aa:	e008      	b.n	80006be <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 80006ac:	233f      	movs	r3, #63	; 0x3f
 80006ae:	80fb      	strh	r3, [r7, #6]
      break;
 80006b0:	e005      	b.n	80006be <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
 80006b2:	2300      	movs	r3, #0
 80006b4:	80fb      	strh	r3, [r7, #6]
      break;
 80006b6:	e002      	b.n	80006be <ComGetActiveInterfaceMaxRxLen+0x42>

    default:
      result = BOOT_COM_RX_MAX_DATA;
 80006b8:	2340      	movs	r3, #64	; 0x40
 80006ba:	80fb      	strh	r3, [r7, #6]
      break;
 80006bc:	bf00      	nop
  }

  return result;
 80006be:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	20000000 	.word	0x20000000

080006d0 <ComGetActiveInterfaceMaxTxLen>:
**            specified communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <ComGetActiveInterfaceMaxTxLen+0x50>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d816      	bhi.n	800070c <ComGetActiveInterfaceMaxTxLen+0x3c>
 80006de:	a201      	add	r2, pc, #4	; (adr r2, 80006e4 <ComGetActiveInterfaceMaxTxLen+0x14>)
 80006e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e4:	080006f5 	.word	0x080006f5
 80006e8:	080006fb 	.word	0x080006fb
 80006ec:	08000701 	.word	0x08000701
 80006f0:	08000707 	.word	0x08000707
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 80006f4:	2340      	movs	r3, #64	; 0x40
 80006f6:	80fb      	strh	r3, [r7, #6]
      break;
 80006f8:	e00b      	b.n	8000712 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
 80006fa:	2308      	movs	r3, #8
 80006fc:	80fb      	strh	r3, [r7, #6]
      break;
 80006fe:	e008      	b.n	8000712 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 8000700:	233f      	movs	r3, #63	; 0x3f
 8000702:	80fb      	strh	r3, [r7, #6]
      break;
 8000704:	e005      	b.n	8000712 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
 8000706:	2300      	movs	r3, #0
 8000708:	80fb      	strh	r3, [r7, #6]
      break;
 800070a:	e002      	b.n	8000712 <ComGetActiveInterfaceMaxTxLen+0x42>

    default:
      result = BOOT_COM_TX_MAX_DATA;
 800070c:	2340      	movs	r3, #64	; 0x40
 800070e:	80fb      	strh	r3, [r7, #6]
      break;
 8000710:	bf00      	nop
  }

  return result;
 8000712:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	20000000 	.word	0x20000000

08000724 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  blt_bool result = BLT_FALSE;
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 800072e:	f000 fba7 	bl	8000e80 <XcpIsConnected>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <ComIsConnected+0x18>
  {
    result = BLT_TRUE;
 8000738:	2301      	movs	r3, #1
 800073a:	71fb      	strb	r3, [r7, #7]
  {
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
 800073c:	79fb      	ldrb	r3, [r7, #7]
} /*** end of ComIsConnected ***/
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
#endif
} /*** end of CopInit ***/
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
#endif
} /*** end of CopService ***/
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 8000766:	f7ff fd9f 	bl	80002a8 <CpuIrqDisable>
} /*** end of CpuInit ***/
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 8000776:	f000 faf4 	bl	8000d62 <NvmVerifyChecksum>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d019      	beq.n	80007b4 <CpuStartUserProgram+0x44>
    return;
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 8000780:	f7ff ff5c 	bl	800063c <ComFree>
#endif
  /* reset the HAL */
  HAL_DeInit();
 8000784:	f001 fa82 	bl	8001c8c <HAL_DeInit>
  /* reset the timer */
  TimerReset();
 8000788:	f000 fb20 	bl	8000dcc <TimerReset>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 800078c:	f000 faf0 	bl	8000d70 <NvmGetUserProgBaseAddress>
 8000790:	4603      	mov	r3, r0
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <CpuStartUserProgram+0x4c>)
 8000794:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000798:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800079c:	6093      	str	r3, [r2, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 800079e:	f000 fae7 	bl	8000d70 <NvmGetUserProgBaseAddress>
 80007a2:	4603      	mov	r3, r0
 80007a4:	3304      	adds	r3, #4
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	607b      	str	r3, [r7, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 80007aa:	f7ff fd85 	bl	80002b8 <CpuIrqEnable>
  /* start the user program by activating its reset interrupt service routine */
  pProgResetHandler();
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4798      	blx	r3
 80007b2:	e000      	b.n	80007b6 <CpuStartUserProgram+0x46>
    return;
 80007b4:	bf00      	nop
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	4613      	mov	r3, r2
 80007cc:	80fb      	strh	r3, [r7, #6]
  blt_int8u *from, *to;

  /* set casted pointers */
  from = (blt_int8u *)src;
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	617b      	str	r3, [r7, #20]
  to = (blt_int8u *)dest;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	613b      	str	r3, [r7, #16]

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 80007d6:	e009      	b.n	80007ec <CpuMemCopy+0x2c>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	1c53      	adds	r3, r2, #1
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	1c59      	adds	r1, r3, #1
 80007e2:	6139      	str	r1, [r7, #16]
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	701a      	strb	r2, [r3, #0]
    /* keep the watchdog happy */
    CopService();
 80007e8:	f7ff ffb4 	bl	8000754 <CopService>
  while (len-- > 0)
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	1e5a      	subs	r2, r3, #1
 80007f0:	80fa      	strh	r2, [r7, #6]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1f0      	bne.n	80007d8 <CpuMemCopy+0x18>
  }
} /*** end of CpuMemCopy ***/
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <FlashInit>:
** \brief     Initializes the flash driver.
** \return    none.
**
****************************************************************************************/
void FlashInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* init the flash block info structs by setting the address to an invalid address */
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <FlashInit+0x20>)
 8000806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800080a:	601a      	str	r2, [r3, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <FlashInit+0x24>)
 800080e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000812:	601a      	str	r2, [r3, #0]
} /*** end of FlashInit ***/
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	200000a0 	.word	0x200000a0
 8000824:	200002a4 	.word	0x200002a4

08000828 <FlashWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  blt_addr base_addr;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1e5a      	subs	r2, r3, #1
 8000838:	491c      	ldr	r1, [pc, #112]	; (80008ac <FlashWrite+0x84>)
 800083a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800083e:	4419      	add	r1, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	1acb      	subs	r3, r1, r3
 8000844:	3b01      	subs	r3, #1
 8000846:	429a      	cmp	r2, r3
 8000848:	d901      	bls.n	800084e <FlashWrite+0x26>
  {
    return BLT_FALSE;
 800084a:	2300      	movs	r3, #0
 800084c:	e029      	b.n	80008a2 <FlashWrite+0x7a>
  }

  /* make sure the addresses are within the flash device */
  if ((addr < FLASH_START_ADDRESS) || ((addr+len-1) > FLASH_END_ADDRESS))
 800084e:	4a18      	ldr	r2, [pc, #96]	; (80008b0 <FlashWrite+0x88>)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4293      	cmp	r3, r2
 8000854:	d30a      	bcc.n	800086c <FlashWrite+0x44>
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4413      	add	r3, r2
 800085c:	1e5a      	subs	r2, r3, #1
 800085e:	4913      	ldr	r1, [pc, #76]	; (80008ac <FlashWrite+0x84>)
 8000860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000864:	440b      	add	r3, r1
 8000866:	3b01      	subs	r3, #1
 8000868:	429a      	cmp	r2, r3
 800086a:	d901      	bls.n	8000870 <FlashWrite+0x48>
  {
    return BLT_FALSE;
 800086c:	2300      	movs	r3, #0
 800086e:	e018      	b.n	80008a2 <FlashWrite+0x7a>
  }

  /* if this is the bootblock, then let the boot block manager handle it */
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000876:	f023 0301 	bic.w	r3, r3, #1
 800087a:	617b      	str	r3, [r7, #20]
  if (base_addr == flashLayout[0].sector_start)
 800087c:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <FlashWrite+0x88>)
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	4293      	cmp	r3, r2
 8000882:	d107      	bne.n	8000894 <FlashWrite+0x6c>
  {
    /* let the boot block manager handle it */
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	68f9      	ldr	r1, [r7, #12]
 800088a:	480a      	ldr	r0, [pc, #40]	; (80008b4 <FlashWrite+0x8c>)
 800088c:	f000 f9a4 	bl	8000bd8 <FlashAddToBlock>
 8000890:	4603      	mov	r3, r0
 8000892:	e006      	b.n	80008a2 <FlashWrite+0x7a>
  }
  /* let the block manager handle it */
  return FlashAddToBlock(&blockInfo, addr, data, len);
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	68f9      	ldr	r1, [r7, #12]
 800089a:	4807      	ldr	r0, [pc, #28]	; (80008b8 <FlashWrite+0x90>)
 800089c:	f000 f99c 	bl	8000bd8 <FlashAddToBlock>
 80008a0:	4603      	mov	r3, r0
} /*** end of FlashWrite ***/
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	08020000 	.word	0x08020000
 80008b0:	08004000 	.word	0x08004000
 80008b4:	200002a4 	.word	0x200002a4
 80008b8:	200000a0 	.word	0x200000a0

080008bc <FlashErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashErase(blt_addr addr, blt_int32u len)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  blt_addr erase_base_addr;
  blt_int32u total_erase_len;
  blt_int16u nr_of_erase_sectors;
  blt_int32u pageError = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  blt_int16u sector_idx;
  FLASH_EraseInitTypeDef eraseInitStruct;
  blt_bool result = BLT_TRUE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	1e5a      	subs	r2, r3, #1
 80008d4:	4930      	ldr	r1, [pc, #192]	; (8000998 <FlashErase+0xdc>)
 80008d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008da:	4419      	add	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	1acb      	subs	r3, r1, r3
 80008e0:	3b01      	subs	r3, #1
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d901      	bls.n	80008ea <FlashErase+0x2e>
  {
    return BLT_FALSE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e052      	b.n	8000990 <FlashErase+0xd4>
  }

  /* determine the base address for the erase operation, by aligning to
   * FLASH_ERASE_SECTOR_SIZE.
   */
  erase_base_addr = (addr/FLASH_ERASE_SECTOR_SIZE)*FLASH_ERASE_SECTOR_SIZE;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80008f0:	f023 0307 	bic.w	r3, r3, #7
 80008f4:	61fb      	str	r3, [r7, #28]
  
  /* make sure the addresses are within the flash device */
  if ((erase_base_addr < FLASH_START_ADDRESS) || ((addr+len-1) > FLASH_END_ADDRESS))
 80008f6:	4a29      	ldr	r2, [pc, #164]	; (800099c <FlashErase+0xe0>)
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d30a      	bcc.n	8000914 <FlashErase+0x58>
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	4413      	add	r3, r2
 8000904:	1e5a      	subs	r2, r3, #1
 8000906:	4924      	ldr	r1, [pc, #144]	; (8000998 <FlashErase+0xdc>)
 8000908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800090c:	440b      	add	r3, r1
 800090e:	3b01      	subs	r3, #1
 8000910:	429a      	cmp	r2, r3
 8000912:	d901      	bls.n	8000918 <FlashErase+0x5c>
  {
    return BLT_FALSE;
 8000914:	2300      	movs	r3, #0
 8000916:	e03b      	b.n	8000990 <FlashErase+0xd4>
  }

  /* determine number of bytes to erase from base address */
  total_erase_len = len + (addr - erase_base_addr);
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	683a      	ldr	r2, [r7, #0]
 8000920:	4413      	add	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]

  /* determine the number of sectors to erase */
  nr_of_erase_sectors = (blt_int16u)(total_erase_len / FLASH_ERASE_SECTOR_SIZE);
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	0adb      	lsrs	r3, r3, #11
 8000928:	84fb      	strh	r3, [r7, #38]	; 0x26
  if ((total_erase_len % FLASH_ERASE_SECTOR_SIZE) > 0)
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000930:	2b00      	cmp	r3, #0
 8000932:	d002      	beq.n	800093a <FlashErase+0x7e>
  {
    nr_of_erase_sectors++;
 8000934:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000936:	3301      	adds	r3, #1
 8000938:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  /* prepare the erase initialization structure. */
  eraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  eraseInitStruct.PageAddress = erase_base_addr;
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	60fb      	str	r3, [r7, #12]
  eraseInitStruct.NbPages     = 1;
 8000942:	2301      	movs	r3, #1
 8000944:	613b      	str	r3, [r7, #16]

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 8000946:	f001 ff7b 	bl	8002840 <HAL_FLASH_Unlock>

  /* loop through all sectors to erase them one by one. the HAL supports erasing multiple
   * pages with one function call, but then the watchdog can't be updated in between.
   */
  for (sector_idx = 0; sector_idx < nr_of_erase_sectors; sector_idx++)
 800094a:	2300      	movs	r3, #0
 800094c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800094e:	e017      	b.n	8000980 <FlashErase+0xc4>
  {
    /* keep the watchdog happy */
    CopService();
 8000950:	f7ff ff00 	bl	8000754 <CopService>
    /* erase the sector. */
    if (HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&pageError) != HAL_OK)
 8000954:	f107 0214 	add.w	r2, r7, #20
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f002 f832 	bl	80029c8 <HAL_FLASHEx_Erase>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d003      	beq.n	8000972 <FlashErase+0xb6>
    {
      /* flag error and stop erase operation */
      result = BLT_FALSE;
 800096a:	2300      	movs	r3, #0
 800096c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      break;
 8000970:	e00a      	b.n	8000988 <FlashErase+0xcc>
    }
    /* update the page base address for the next sector. */
    eraseInitStruct.PageAddress += FLASH_ERASE_SECTOR_SIZE;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000978:	60fb      	str	r3, [r7, #12]
  for (sector_idx = 0; sector_idx < nr_of_erase_sectors; sector_idx++)
 800097a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800097c:	3301      	adds	r3, #1
 800097e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000980:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000982:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000984:	429a      	cmp	r2, r3
 8000986:	d3e3      	bcc.n	8000950 <FlashErase+0x94>
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 8000988:	f001 ff80 	bl	800288c <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
 800098c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
} /*** end of FlashErase ***/
 8000990:	4618      	mov	r0, r3
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	08020000 	.word	0x08020000
 800099c:	08004000 	.word	0x08004000

080009a0 <FlashWriteChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWriteChecksum(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]

  /* first check that the bootblock contains valid data. if not, this means the
   * bootblock is not part of the reprogramming this time and therefore no
   * new checksum needs to be written
   */
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <FlashWriteChecksum+0x84>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009b2:	d101      	bne.n	80009b8 <FlashWriteChecksum+0x18>
  {
    return BLT_TRUE;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e031      	b.n	8000a1c <FlashWriteChecksum+0x7c>
#endif

  /* compute the checksum. note that the user program's vectors are not yet written
   * to flash but are present in the bootblock data structure at this point.
   */
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <FlashWriteChecksum+0x88>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4413      	add	r3, r2
 80009c0:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <FlashWriteChecksum+0x8c>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <FlashWriteChecksum+0x90>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4413      	add	r3, r2
 80009d4:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <FlashWriteChecksum+0x94>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <FlashWriteChecksum+0x98>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <FlashWriteChecksum+0x9c>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <FlashWriteChecksum+0xa0>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4413      	add	r3, r2
 80009fc:	607b      	str	r3, [r7, #4]
  signature_checksum  = ~signature_checksum; /* one's complement */
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	607b      	str	r3, [r7, #4]
  signature_checksum += 1; /* two's complement */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3301      	adds	r3, #1
 8000a08:	607b      	str	r3, [r7, #4]

  /* write the checksum */
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <FlashWriteChecksum+0xa4>)
 8000a0c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000a10:	1d3a      	adds	r2, r7, #4
 8000a12:	2104      	movs	r1, #4
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff07 	bl	8000828 <FlashWrite>
 8000a1a:	4603      	mov	r3, r0
                    sizeof(blt_addr), (blt_int8u *)&signature_checksum);
} /*** end of FlashWriteChecksum ***/
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200002a4 	.word	0x200002a4
 8000a28:	200002a8 	.word	0x200002a8
 8000a2c:	200002ac 	.word	0x200002ac
 8000a30:	200002b0 	.word	0x200002b0
 8000a34:	200002b4 	.word	0x200002b4
 8000a38:	200002b8 	.word	0x200002b8
 8000a3c:	200002bc 	.word	0x200002bc
 8000a40:	200002c0 	.word	0x200002c0
 8000a44:	08004000 	.word	0x08004000

08000a48 <FlashVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashVerifyChecksum(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]

  /* verify the checksum based on how it was written by CpuWriteChecksum() */
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <FlashVerifyChecksum+0x84>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <FlashVerifyChecksum+0x84>)
 8000a5e:	3304      	adds	r3, #4
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <FlashVerifyChecksum+0x84>)
 8000a6a:	3308      	adds	r3, #8
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <FlashVerifyChecksum+0x84>)
 8000a76:	330c      	adds	r3, #12
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <FlashVerifyChecksum+0x84>)
 8000a82:	3310      	adds	r3, #16
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <FlashVerifyChecksum+0x84>)
 8000a8e:	3314      	adds	r3, #20
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <FlashVerifyChecksum+0x84>)
 8000a9a:	3318      	adds	r3, #24
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <FlashVerifyChecksum+0x84>)
 8000aa6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	607b      	str	r3, [r7, #4]
  /* sum should add up to an unsigned 32-bit value of 0 */
  if (signature_checksum == 0)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d101      	bne.n	8000abc <FlashVerifyChecksum+0x74>
  {
    /* checksum okay */
    return BLT_TRUE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e000      	b.n	8000abe <FlashVerifyChecksum+0x76>
  }
  /* checksum incorrect */
  return BLT_FALSE;
 8000abc:	2300      	movs	r3, #0
} /*** end of FlashVerifyChecksum ***/
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	08004000 	.word	0x08004000

08000ad0 <FlashDone>:
**            the currently active block that needs to be flashed.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashDone(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* check if there is still data waiting to be programmed in the boot block */
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <FlashDone+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000adc:	d007      	beq.n	8000aee <FlashDone+0x1e>
  {
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 8000ade:	480c      	ldr	r0, [pc, #48]	; (8000b10 <FlashDone+0x40>)
 8000ae0:	f000 f8dc 	bl	8000c9c <FlashWriteBlock>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d101      	bne.n	8000aee <FlashDone+0x1e>
    {
      return BLT_FALSE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e00d      	b.n	8000b0a <FlashDone+0x3a>
    }
  }

  /* check if there is still data waiting to be programmed */
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <FlashDone+0x44>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000af6:	d007      	beq.n	8000b08 <FlashDone+0x38>
  {
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 8000af8:	4806      	ldr	r0, [pc, #24]	; (8000b14 <FlashDone+0x44>)
 8000afa:	f000 f8cf 	bl	8000c9c <FlashWriteBlock>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <FlashDone+0x38>
    {
      return BLT_FALSE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	e000      	b.n	8000b0a <FlashDone+0x3a>
    }
  }
  /* still here so all is okay */
  return BLT_TRUE;
 8000b08:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200002a4 	.word	0x200002a4
 8000b14:	200000a0 	.word	0x200000a0

08000b18 <FlashGetUserProgBaseAddress>:
**            This is basically the first address in the flashLayout table.
** \return    Base address.
**
****************************************************************************************/
blt_addr FlashGetUserProgBaseAddress(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return flashLayout[0].sector_start;
 8000b1c:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <FlashGetUserProgBaseAddress+0x10>)
} /*** end of FlashGetUserProgBaseAddress ***/
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	08004000 	.word	0x08004000

08000b2c <FlashInitBlock>:
** \param     address Base address of the block data.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashInitBlock(tFlashBlockInfo *block, blt_addr address)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  /* check address alignment */
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <FlashInitBlock+0x18>
  {
    return BLT_FALSE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	e012      	b.n	8000b6a <FlashInitBlock+0x3e>
  }
  /* make sure that we are initializing a new block and not the same one */
  if (block->base_addr == address)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d101      	bne.n	8000b52 <FlashInitBlock+0x26>
  {
    /* block already initialized, so nothing to do */
    return BLT_TRUE;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00b      	b.n	8000b6a <FlashInitBlock+0x3e>
  }
  /* set the base address and copies the current data from flash */
  block->base_addr = address;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	601a      	str	r2, [r3, #0]
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b60:	6839      	ldr	r1, [r7, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fe2c 	bl	80007c0 <CpuMemCopy>
  return BLT_TRUE;
 8000b68:	2301      	movs	r3, #1
} /*** end of FlashInitBlock ***/
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <FlashSwitchBlock>:
** \return    The pointer of the block info struct that is no being used, or a NULL
**            pointer in case of error.
**
****************************************************************************************/
static tFlashBlockInfo *FlashSwitchBlock(tFlashBlockInfo *block, blt_addr base_addr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  /* check if a switch needs to be made away from the boot block. in this case the boot
   * block shouldn't be written yet, because this is done at the end of the programming
   * session by FlashDone(), this is right after the checksum was written.
   */
  if (block == &bootBlockInfo)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <FlashSwitchBlock+0x58>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d102      	bne.n	8000b8c <FlashSwitchBlock+0x18>
  {
    /* switch from the boot block to the generic block info structure */
    block = &blockInfo;
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <FlashSwitchBlock+0x5c>)
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	e010      	b.n	8000bae <FlashSwitchBlock+0x3a>
  }
  /* check if a switch back into the bootblock is needed. in this case the generic block
   * doesn't need to be written here yet.
   */
  else if (base_addr == flashLayout[0].sector_start)
 8000b8c:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <FlashSwitchBlock+0x60>)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d104      	bne.n	8000b9e <FlashSwitchBlock+0x2a>
  {
    /* switch from the generic block to the boot block info structure */
    block = &bootBlockInfo;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <FlashSwitchBlock+0x58>)
 8000b96:	607b      	str	r3, [r7, #4]
    base_addr = flashLayout[0].sector_start;
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <FlashSwitchBlock+0x60>)
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	e007      	b.n	8000bae <FlashSwitchBlock+0x3a>
  }
  else
  {
    /* need to switch to a new block, so program the current one and init the next */
    if (FlashWriteBlock(block) == BLT_FALSE)
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f000 f87c 	bl	8000c9c <FlashWriteBlock>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <FlashSwitchBlock+0x3a>
    {
      return BLT_NULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e009      	b.n	8000bc2 <FlashSwitchBlock+0x4e>
    }
  }

  /* initialize tne new block when necessary */
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 8000bae:	6839      	ldr	r1, [r7, #0]
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ffbb 	bl	8000b2c <FlashInitBlock>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d101      	bne.n	8000bc0 <FlashSwitchBlock+0x4c>
  {
    return BLT_NULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e000      	b.n	8000bc2 <FlashSwitchBlock+0x4e>
  }

  /* still here to all is okay  */
  return block;
 8000bc0:	687b      	ldr	r3, [r7, #4]
} /*** end of FlashSwitchBlock ***/
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200002a4 	.word	0x200002a4
 8000bd0:	200000a0 	.word	0x200000a0
 8000bd4:	08004000 	.word	0x08004000

08000bd8 <FlashAddToBlock>:
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashAddToBlock(tFlashBlockInfo *block, blt_addr address,
                                blt_int8u *data, blt_int32u len)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	603b      	str	r3, [r7, #0]
  blt_addr   current_base_addr;
  blt_int8u  *dst;
  blt_int8u  *src;

  /* determine the current base address */
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000bec:	f023 0301 	bic.w	r3, r3, #1
 8000bf0:	617b      	str	r3, [r7, #20]

  /* make sure the blockInfo is not uninitialized */
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bfa:	d108      	bne.n	8000c0e <FlashAddToBlock+0x36>
  {
    /* initialize the blockInfo struct for the current block */
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 8000bfc:	6979      	ldr	r1, [r7, #20]
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f7ff ff94 	bl	8000b2c <FlashInitBlock>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <FlashAddToBlock+0x36>
    {
      return BLT_FALSE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e042      	b.n	8000c94 <FlashAddToBlock+0xbc>
    }
  }

  /* check if the new data fits in the current block */
  if (block->base_addr != current_base_addr)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d009      	beq.n	8000c2c <FlashAddToBlock+0x54>
  {
    /* need to switch to a new block, so program the current one and init the next */
    block = FlashSwitchBlock(block, current_base_addr);
 8000c18:	6979      	ldr	r1, [r7, #20]
 8000c1a:	68f8      	ldr	r0, [r7, #12]
 8000c1c:	f7ff ffaa 	bl	8000b74 <FlashSwitchBlock>
 8000c20:	60f8      	str	r0, [r7, #12]
    if (block == BLT_NULL)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d101      	bne.n	8000c2c <FlashAddToBlock+0x54>
    {
      return BLT_FALSE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e033      	b.n	8000c94 <FlashAddToBlock+0xbc>
    }
  }

  /* add the data to the current block, but check for block overflow */
  dst = &(block->data[address - block->base_addr]);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	3304      	adds	r3, #4
 8000c3a:	61fb      	str	r3, [r7, #28]
  src = data;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	61bb      	str	r3, [r7, #24]
  do
  {
    /* keep the watchdog happy */
    CopService();
 8000c40:	f7ff fd88 	bl	8000754 <CopService>
    /* buffer overflow? */
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3304      	adds	r3, #4
 8000c48:	69fa      	ldr	r2, [r7, #28]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c50:	d30f      	bcc.n	8000c72 <FlashAddToBlock+0x9a>
    {
      /* need to switch to a new block, so program the current one and init the next */
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c58:	4619      	mov	r1, r3
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff ff8a 	bl	8000b74 <FlashSwitchBlock>
 8000c60:	60f8      	str	r0, [r7, #12]
      if (block == BLT_NULL)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <FlashAddToBlock+0x94>
      {
        return BLT_FALSE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e013      	b.n	8000c94 <FlashAddToBlock+0xbc>
      }
      /* reset destination pointer */
      dst = &(block->data[0]);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3304      	adds	r3, #4
 8000c70:	61fb      	str	r3, [r7, #28]
    }
    /* write the data to the buffer */
    *dst = *src;
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	781a      	ldrb	r2, [r3, #0]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	701a      	strb	r2, [r3, #0]
    /* update pointers */
    dst++;
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	61fb      	str	r3, [r7, #28]
    src++;
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	3301      	adds	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
    /* decrement byte counter */
    len--;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	603b      	str	r3, [r7, #0]
  }
  while (len > 0);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1d6      	bne.n	8000c40 <FlashAddToBlock+0x68>
  /* still here so all is good */
  return BLT_TRUE;
 8000c92:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 8000c94:	4618      	mov	r0, r3
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <FlashWriteBlock>:
** \param     block   Pointer to flash block info structure to operate on.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashWriteBlock(tFlashBlockInfo *block)
{
 8000c9c:	b5b0      	push	{r4, r5, r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  blt_addr   prog_addr;
  blt_int32u prog_data;
  blt_int32u word_cnt;
  blt_bool   result = BLT_TRUE;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	74fb      	strb	r3, [r7, #19]
    }
  }
#endif

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 8000ca8:	f001 fdca 	bl	8002840 <HAL_FLASH_Unlock>

  /* program all words in the block one by one */
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e029      	b.n	8000d06 <FlashWriteBlock+0x6a>
  {
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	60bb      	str	r3, [r7, #8]
    /* keep the watchdog happy */
    CopService();
 8000ccc:	f7ff fd42 	bl	8000754 <CopService>
    /* program the word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	461c      	mov	r4, r3
 8000cd6:	4615      	mov	r5, r2
 8000cd8:	4622      	mov	r2, r4
 8000cda:	462b      	mov	r3, r5
 8000cdc:	68f9      	ldr	r1, [r7, #12]
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f001 fd3e 	bl	8002760 <HAL_FLASH_Program>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <FlashWriteBlock+0x54>
    {
      result = BLT_FALSE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	74fb      	strb	r3, [r7, #19]
      break;
 8000cee:	e00d      	b.n	8000d0c <FlashWriteBlock+0x70>
    }
    /* verify that the written data is actually there */
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68ba      	ldr	r2, [r7, #8]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d002      	beq.n	8000d00 <FlashWriteBlock+0x64>
    {
      result = BLT_FALSE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	74fb      	strb	r3, [r7, #19]
      break;
 8000cfe:	e005      	b.n	8000d0c <FlashWriteBlock+0x70>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3301      	adds	r3, #1
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	2b7f      	cmp	r3, #127	; 0x7f
 8000d0a:	d9d2      	bls.n	8000cb2 <FlashWriteBlock+0x16>
    }
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 8000d0c:	f001 fdbe 	bl	800288c <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
 8000d10:	7cfb      	ldrb	r3, [r7, #19]
} /*** end of FlashWriteBlock ***/
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bdb0      	pop	{r4, r5, r7, pc}

08000d1a <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 8000d1e:	f7ff fd6f 	bl	8000800 <FlashInit>
} /*** end of NvmInit ***/
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f7ff fd76 	bl	8000828 <FlashWrite>
 8000d3c:	4603      	mov	r3, r0
} /*** end of NvmWrite ***/
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	6039      	str	r1, [r7, #0]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8000d50:	6839      	ldr	r1, [r7, #0]
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fdb2 	bl	80008bc <FlashErase>
 8000d58:	4603      	mov	r3, r0
} /*** end of NvmErase ***/
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 8000d66:	f7ff fe6f 	bl	8000a48 <FlashVerifyChecksum>
 8000d6a:	4603      	mov	r3, r0
#endif
} /*** end of NvmVerifyChecksum ***/
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  return FlashGetUserProgBaseAddress();
 8000d74:	f7ff fed0 	bl	8000b18 <FlashGetUserProgBaseAddress>
 8000d78:	4603      	mov	r3, r0
} /*** end of NvmGetUserProgBaseAddress ***/
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8000d82:	f7ff fe0d 	bl	80009a0 <FlashWriteChecksum>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <NvmDone+0x12>
  {
    return BLT_FALSE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	e002      	b.n	8000d96 <NvmDone+0x18>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
 8000d90:	f7ff fe9e 	bl	8000ad0 <FlashDone>
 8000d94:	4603      	mov	r3, r0
} /*** end of NvmDone ***/
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <TimerInit>:
** \brief     Initializes the polling based millisecond timer driver.
** \return    none.
**
****************************************************************************************/
void TimerInit(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Reset the timer configuration. */
  TimerReset();
 8000da0:	f000 f814 	bl	8000dcc <TimerReset>

  /* Configure the systick frequency as a 1 ms event generator. */
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <TimerInit+0x28>)
 8000da6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000daa:	605a      	str	r2, [r3, #4]
  /* Reset the current counter value. */
  SysTick->VAL = 0;
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <TimerInit+0x28>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  /* Select core clock as source and enable the timer. */
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <TimerInit+0x28>)
 8000db4:	2205      	movs	r2, #5
 8000db6:	601a      	str	r2, [r3, #0]
  /* Reset the millisecond counter value. */
  millisecond_counter = 0;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <TimerInit+0x2c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010
 8000dc8:	200004a8 	.word	0x200004a8

08000dcc <TimerReset>:
**            configuration.
** \return    none.
**
****************************************************************************************/
void TimerReset(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* Set the systick's registers back into the default reset value. */
  SysTick->CTRL = 0;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <TimerReset+0x20>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <TimerReset+0x20>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <TimerReset+0x20>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
} /* end of TimerReset */
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <TimerUpdate>:
** \brief     Updates the millisecond timer.
** \return    none.
**
****************************************************************************************/
void TimerUpdate(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <TimerUpdate+0x24>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d004      	beq.n	8000e0a <TimerUpdate+0x1a>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <TimerUpdate+0x28>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <TimerUpdate+0x28>)
 8000e08:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e010 	.word	0xe000e010
 8000e18:	200004a8 	.word	0x200004a8

08000e1c <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 8000e20:	f7ff ffe6 	bl	8000df0 <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
 8000e24:	4b01      	ldr	r3, [pc, #4]	; (8000e2c <TimerGet+0x10>)
 8000e26:	681b      	ldr	r3, [r3, #0]
} /*** end of TimerGet ***/
 8000e28:	4618      	mov	r0, r3
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200004a8 	.word	0x200004a8

08000e30 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 8000e34:	f7ff fff2 	bl	8000e1c <TimerGet>
 8000e38:	4603      	mov	r3, r0
} /*** end of HAL_GetTick ***/
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <XcpInit>:
** \brief     Initializes the XCP driver. Should be called once upon system startup.
** \return    none
**
****************************************************************************************/
void XcpInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* reset xcp module info */
  xcpInfo.connected = 0;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <XcpInit+0x3c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  xcpInfo.mta = 0;
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <XcpInit+0x3c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoPending = 0;
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <XcpInit+0x3c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  xcpInfo.ctoLen = 0;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <XcpInit+0x3c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  xcpInfo.s_n_k_resource = 0;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <XcpInit+0x3c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  xcpInfo.protection = 0;
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <XcpInit+0x3c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
} /*** end of XcpInit ***/
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	200004ac 	.word	0x200004ac

08000e80 <XcpIsConnected>:
** \brief     Obtains information about the XCP connection state.
** \return    BLT_TRUE is an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool XcpIsConnected(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  if (xcpInfo.connected == 0)
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <XcpIsConnected+0x20>)
 8000e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <XcpIsConnected+0x12>
  {
    return BLT_FALSE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e000      	b.n	8000e94 <XcpIsConnected+0x14>
  }
  return BLT_TRUE;
 8000e92:	2301      	movs	r3, #1
} /*** end of XcpIsConnected ***/
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200004ac 	.word	0x200004ac

08000ea4 <XcpPacketTransmitted>:
**            the transport layer.
** \return    none
**
****************************************************************************************/
void XcpPacketTransmitted(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* reset packet transmission pending flag */
  xcpInfo.ctoPending = 0;
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <XcpPacketTransmitted+0x18>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
} /*** end of XcpPacketTransmitted ***/
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200004ac 	.word	0x200004ac

08000ec0 <XcpPacketReceived>:
** \param     len Number of bytes in the packet.
** \return    none
**
****************************************************************************************/
void XcpPacketReceived(blt_int8u *data, blt_int8u len)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	70fb      	strb	r3, [r7, #3]
    /* packet processed by hook function so no need to continue. */
    return;
  }
#endif
  /* was this a connect command? */
  if (data[0] == XCP_CMD_CONNECT)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2bff      	cmp	r3, #255	; 0xff
 8000ed2:	d103      	bne.n	8000edc <XcpPacketReceived+0x1c>
  {
    /* process the connect command */
    XcpCmdConnect(data);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 f97b 	bl	80011d0 <XcpCmdConnect>
 8000eda:	e0b7      	b.n	800104c <XcpPacketReceived+0x18c>
  }
  /* only continue if connected */
  else if (xcpInfo.connected == 1)
 8000edc:	4b6a      	ldr	r3, [pc, #424]	; (8001088 <XcpPacketReceived+0x1c8>)
 8000ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	f040 80cb 	bne.w	800107e <XcpPacketReceived+0x1be>
  {
    switch (data[0])
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	3bc9      	subs	r3, #201	; 0xc9
 8000eee:	2b35      	cmp	r3, #53	; 0x35
 8000ef0:	f200 80a8 	bhi.w	8001044 <XcpPacketReceived+0x184>
 8000ef4:	a201      	add	r2, pc, #4	; (adr r2, 8000efc <XcpPacketReceived+0x3c>)
 8000ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efa:	bf00      	nop
 8000efc:	08001015 	.word	0x08001015
 8000f00:	08001045 	.word	0x08001045
 8000f04:	08001045 	.word	0x08001045
 8000f08:	0800103d 	.word	0x0800103d
 8000f0c:	08001045 	.word	0x08001045
 8000f10:	08001045 	.word	0x08001045
 8000f14:	08001035 	.word	0x08001035
 8000f18:	0800101d 	.word	0x0800101d
 8000f1c:	0800102d 	.word	0x0800102d
 8000f20:	08001025 	.word	0x08001025
 8000f24:	08001045 	.word	0x08001045
 8000f28:	08001045 	.word	0x08001045
 8000f2c:	08001045 	.word	0x08001045
 8000f30:	08001045 	.word	0x08001045
 8000f34:	08001045 	.word	0x08001045
 8000f38:	08001045 	.word	0x08001045
 8000f3c:	08001045 	.word	0x08001045
 8000f40:	08001045 	.word	0x08001045
 8000f44:	08001045 	.word	0x08001045
 8000f48:	08001045 	.word	0x08001045
 8000f4c:	08001045 	.word	0x08001045
 8000f50:	08001045 	.word	0x08001045
 8000f54:	08001045 	.word	0x08001045
 8000f58:	08001045 	.word	0x08001045
 8000f5c:	08001045 	.word	0x08001045
 8000f60:	08001045 	.word	0x08001045
 8000f64:	08001045 	.word	0x08001045
 8000f68:	08001045 	.word	0x08001045
 8000f6c:	08001045 	.word	0x08001045
 8000f70:	08001045 	.word	0x08001045
 8000f74:	08001045 	.word	0x08001045
 8000f78:	08001045 	.word	0x08001045
 8000f7c:	08001045 	.word	0x08001045
 8000f80:	08001045 	.word	0x08001045
 8000f84:	08001045 	.word	0x08001045
 8000f88:	08001045 	.word	0x08001045
 8000f8c:	08001045 	.word	0x08001045
 8000f90:	08001045 	.word	0x08001045
 8000f94:	08001045 	.word	0x08001045
 8000f98:	08001045 	.word	0x08001045
 8000f9c:	08001045 	.word	0x08001045
 8000fa0:	08001045 	.word	0x08001045
 8000fa4:	08000fed 	.word	0x08000fed
 8000fa8:	08000fdd 	.word	0x08000fdd
 8000fac:	08000fd5 	.word	0x08000fd5
 8000fb0:	08000fe5 	.word	0x08000fe5
 8000fb4:	08001045 	.word	0x08001045
 8000fb8:	08001045 	.word	0x08001045
 8000fbc:	08001045 	.word	0x08001045
 8000fc0:	08000ff5 	.word	0x08000ff5
 8000fc4:	08001045 	.word	0x08001045
 8000fc8:	08000ffd 	.word	0x08000ffd
 8000fcc:	08001005 	.word	0x08001005
 8000fd0:	0800100d 	.word	0x0800100d
    {
      case XCP_CMD_UPLOAD:
        XcpCmdUpload(data);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 f9c9 	bl	800136c <XcpCmdUpload>
        break;
 8000fda:	e037      	b.n	800104c <XcpPacketReceived+0x18c>
      case XCP_CMD_SHORT_UPLOAD:
        XcpCmdShortUpload(data);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 fa01 	bl	80013e4 <XcpCmdShortUpload>
        break;
 8000fe2:	e033      	b.n	800104c <XcpPacketReceived+0x18c>
      case XCP_CMD_SET_MTA:
        XcpCmdSetMta(data);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f9a7 	bl	8001338 <XcpCmdSetMta>
        break;
 8000fea:	e02f      	b.n	800104c <XcpPacketReceived+0x18c>
      case XCP_CMD_BUILD_CHECKSUM:
        XcpCmdBuildCheckSum(data);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 fa3d 	bl	800146c <XcpCmdBuildCheckSum>
        break;
 8000ff2:	e02b      	b.n	800104c <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_ID:
        XcpCmdGetId(data);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f977 	bl	80012e8 <XcpCmdGetId>
        break;
 8000ffa:	e027      	b.n	800104c <XcpPacketReceived+0x18c>
      case XCP_CMD_SYNCH:
        XcpCmdSynch(data);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f967 	bl	80012d0 <XcpCmdSynch>
        break;
 8001002:	e023      	b.n	800104c <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_STATUS:
        XcpCmdGetStatus(data);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f93f 	bl	8001288 <XcpCmdGetStatus>
        break;
 800100a:	e01f      	b.n	800104c <XcpPacketReceived+0x18c>
      case XCP_CMD_DISCONNECT:
        XcpCmdDisconnect(data);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f923 	bl	8001258 <XcpCmdDisconnect>
        break;
 8001012:	e01b      	b.n	800104c <XcpPacketReceived+0x18c>
        XcpCmdDownloadMax(data);
        break;
#endif
#if (XCP_RES_PROGRAMMING_EN == 1)
      case XCP_CMD_PROGRAM_MAX:
        XcpCmdProgramMax(data);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 fa83 	bl	8001520 <XcpCmdProgramMax>
        break;
 800101a:	e017      	b.n	800104c <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM:
        XcpCmdProgram(data);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 faad 	bl	800157c <XcpCmdProgram>
        break;
 8001022:	e013      	b.n	800104c <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_START:
        XcpCmdProgramStart(data);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 fa55 	bl	80014d4 <XcpCmdProgramStart>
        break;
 800102a:	e00f      	b.n	800104c <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_CLEAR:
        XcpCmdProgramClear(data);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 faed 	bl	800160c <XcpCmdProgramClear>
        break;
 8001032:	e00b      	b.n	800104c <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_RESET:
        XcpCmdProgramReset(data);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 fb0d 	bl	8001654 <XcpCmdProgramReset>
        break;
 800103a:	e007      	b.n	800104c <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_PREPARE:
        XcpCmdProgramPrepare(data);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 fb1d 	bl	800167c <XcpCmdProgramPrepare>
        break;
 8001042:	e003      	b.n	800104c <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_CAL_PAGE:
        XcpCmdGetCalPage(data);
        break;
#endif
      default:
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 8001044:	2020      	movs	r0, #32
 8001046:	f000 f85f 	bl	8001108 <XcpSetCtoError>
        break;
 800104a:	bf00      	nop
    /* return to make sure response packet is not send because we are not connected */
    return;
  }

  /* make sure the previous command was completed */
  if (xcpInfo.ctoPending == 1)
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <XcpPacketReceived+0x1c8>)
 800104e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001052:	2b01      	cmp	r3, #1
 8001054:	d102      	bne.n	800105c <XcpPacketReceived+0x19c>
  {
    /* command overrun occurred */
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 8001056:	2010      	movs	r0, #16
 8001058:	f000 f856 	bl	8001108 <XcpSetCtoError>
  }

  /* send the response if it contains something */
  if (xcpInfo.ctoLen > 0)
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <XcpPacketReceived+0x1c8>)
 800105e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001062:	2b00      	cmp	r3, #0
 8001064:	dd0c      	ble.n	8001080 <XcpPacketReceived+0x1c0>
  {
    /* set cto packet transmission pending flag */
    xcpInfo.ctoPending = 1;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <XcpPacketReceived+0x1c8>)
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* transmit the cto response packet */
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <XcpPacketReceived+0x1c8>)
 8001070:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001074:	4619      	mov	r1, r3
 8001076:	4804      	ldr	r0, [pc, #16]	; (8001088 <XcpPacketReceived+0x1c8>)
 8001078:	f000 f808 	bl	800108c <XcpTransmitPacket>
 800107c:	e000      	b.n	8001080 <XcpPacketReceived+0x1c0>
    return;
 800107e:	bf00      	nop
  }
} /*** end of XcpPacketReceived ***/
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200004ac 	.word	0x200004ac

0800108c <XcpTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
static void XcpTransmitPacket(blt_int8u *data, blt_int16s len)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
  /* submit packet to the communication interface for transmission */
#if (BOOT_COM_ENABLE == 0)
  XcpTransmitPacketHook(data, len);
#else
  ComTransmitPacket(data, len);
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	4619      	mov	r1, r3
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff fad5 	bl	800064c <ComTransmitPacket>
#endif

} /*** end of XcpTransmitPacket ***/
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <XcpComputeChecksum>:
** \return    Checksum type that was used during the checksum calculation.
**
****************************************************************************************/
static blt_int8u XcpComputeChecksum(blt_int32u address, blt_int32u length,
                                    blt_int32u *checksum)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
  blt_int8u cs = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	75fb      	strb	r3, [r7, #23]

  /* this example computes the checksum using the add byte to byte algorithm */
  while (length-- > 0)
 80010ba:	e009      	b.n	80010d0 <XcpComputeChecksum+0x26>
  {
    /* add the next byte value */
    cs += *((blt_int8u *)(blt_addr)address);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	4413      	add	r3, r2
 80010c4:	75fb      	strb	r3, [r7, #23]
    /* increment address */
    address++;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
    /* service the watchdog */
    CopService();
 80010cc:	f7ff fb42 	bl	8000754 <CopService>
  while (length-- > 0)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1e5a      	subs	r2, r3, #1
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f0      	bne.n	80010bc <XcpComputeChecksum+0x12>
  }
  /* store the computed checksum value */
  *checksum = cs;
 80010da:	7dfa      	ldrb	r2, [r7, #23]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	601a      	str	r2, [r3, #0]
  /* inform the caller of the uses checksum computation algorithm */
  return XCP_CS_ADD11;
 80010e0:	2301      	movs	r3, #1
} /*** end of XcpComputeChecksum ***/
 80010e2:	4618      	mov	r0, r3
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <XcpProtectResources>:
** \brief     Utility function to protects all the available resources.
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  xcpInfo.protection = 0;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <XcpProtectResources+0x18>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	200004ac 	.word	0x200004ac

08001108 <XcpSetCtoError>:
** \param     error XCP error code (XCP_ERR_XXX).
** \return    none
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <XcpSetCtoError+0x2c>)
 8001114:	22fe      	movs	r2, #254	; 0xfe
 8001116:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoData[1] = error;
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <XcpSetCtoError+0x2c>)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	7053      	strb	r3, [r2, #1]
  xcpInfo.ctoLen = 2;
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <XcpSetCtoError+0x2c>)
 8001120:	2202      	movs	r2, #2
 8001122:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpSetCtoError ***/
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200004ac 	.word	0x200004ac

08001138 <XcpGetOrderedLong>:
** \param     data Array to the buffer with the 32-bit value stored as bytes.
** \return    The 32-bit value.
**
****************************************************************************************/
static blt_int32u XcpGetOrderedLong(blt_int8u const * data)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  blt_int32u result = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]

#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  result |= (blt_int32u) data[0];
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)(data[1] << 8);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3301      	adds	r3, #1
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	461a      	mov	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)(data[2] << 16);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3302      	adds	r3, #2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	041b      	lsls	r3, r3, #16
 8001168:	461a      	mov	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)(data[3] << 24);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3303      	adds	r3, #3
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	061b      	lsls	r3, r3, #24
 8001178:	461a      	mov	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)(data[2] << 8);
  result |= (blt_int32u)(data[1] << 16);
  result |= (blt_int32u)(data[0] << 24);
#endif
  /* Give the result back to the caller. */
  return result;
 8001180:	68fb      	ldr	r3, [r7, #12]
} /*** end of XcpGetOrderedLong ***/
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <XcpSetOrderedLong>:
** \param     value The 32-bit value to store in the buffer.
** \param     data Array to the buffer for storage.
**
****************************************************************************************/
static void XcpSetOrderedLong(blt_int32u value, blt_int8u *data)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  data[0] = (blt_int8u) value;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	701a      	strb	r2, [r3, #0]
  data[1] = (blt_int8u)(value >>  8);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	0a1a      	lsrs	r2, r3, #8
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	701a      	strb	r2, [r3, #0]
  data[2] = (blt_int8u)(value >> 16);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	0c1a      	lsrs	r2, r3, #16
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	3302      	adds	r3, #2
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	701a      	strb	r2, [r3, #0]
  data[3] = (blt_int8u)(value >> 24);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	0e1a      	lsrs	r2, r3, #24
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	3303      	adds	r3, #3
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	701a      	strb	r2, [r3, #0]
  data[3] = (blt_int8u) value;
  data[2] = (blt_int8u)(value >>  8);
  data[1] = (blt_int8u)(value >> 16);
  data[0] = (blt_int8u)(value >> 24);
#endif
} /*** end of XcpSetOrderedLong ***/
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <XcpCmdConnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdConnect(blt_int8u *data)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* enable resource protection */
  XcpProtectResources();
 80011d8:	f7ff ff88 	bl	80010ec <XcpProtectResources>

  /* indicate that the connection is established */
  xcpInfo.connected = 1;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <XcpCmdConnect+0x84>)
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <XcpCmdConnect+0x84>)
 80011e6:	22ff      	movs	r2, #255	; 0xff
 80011e8:	701a      	strb	r2, [r3, #0]

  /* report available resources */
  xcpInfo.ctoData[1] = 0;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <XcpCmdConnect+0x84>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <XcpCmdConnect+0x84>)
 80011f2:	785b      	ldrb	r3, [r3, #1]
 80011f4:	f043 0310 	orr.w	r3, r3, #16
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <XcpCmdConnect+0x84>)
 80011fc:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_STIM;
#endif

  /* report communication mode info. only byte granularity is supported */
  xcpInfo.ctoData[2] = 0;
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <XcpCmdConnect+0x84>)
 8001200:	2200      	movs	r2, #0
 8001202:	709a      	strb	r2, [r3, #2]
  /* configure for motorola or intel byte ordering */
  xcpInfo.ctoData[2] |= XCP_MOTOROLA_FORMAT;
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <XcpCmdConnect+0x84>)
 8001206:	789a      	ldrb	r2, [r3, #2]
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <XcpCmdConnect+0x84>)
 800120a:	709a      	strb	r2, [r3, #2]

  /* report max cto data length */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 800120c:	f7ff fa36 	bl	800067c <ComGetActiveInterfaceMaxRxLen>
 8001210:	4603      	mov	r3, r0
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <XcpCmdConnect+0x84>)
 8001216:	70da      	strb	r2, [r3, #3]

  /* report max dto data length */
#if (XCP_MOTOROLA_FORMAT == 0)
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 8001218:	f7ff fa5a 	bl	80006d0 <ComGetActiveInterfaceMaxTxLen>
 800121c:	4603      	mov	r3, r0
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <XcpCmdConnect+0x84>)
 8001222:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8001224:	f7ff fa54 	bl	80006d0 <ComGetActiveInterfaceMaxTxLen>
 8001228:	4603      	mov	r3, r0
 800122a:	0a1b      	lsrs	r3, r3, #8
 800122c:	b29b      	uxth	r3, r3
 800122e:	b2da      	uxtb	r2, r3
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <XcpCmdConnect+0x84>)
 8001232:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[4] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
  xcpInfo.ctoData[5] = (blt_int8u)XCP_DTO_PACKET_LEN;
#endif

  /* report msb of protocol layer version number */
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <XcpCmdConnect+0x84>)
 8001236:	2201      	movs	r2, #1
 8001238:	719a      	strb	r2, [r3, #6]

  /* report msb of transport layer version number */
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <XcpCmdConnect+0x84>)
 800123c:	2201      	movs	r2, #1
 800123e:	71da      	strb	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <XcpCmdConnect+0x84>)
 8001242:	2208      	movs	r2, #8
 8001244:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* reinit the NVM driver because a new firmware update is about the start */
  NvmInit();
 8001248:	f7ff fd67 	bl	8000d1a <NvmInit>
} /*** end of XcpCmdConnect ***/
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200004ac 	.word	0x200004ac

08001258 <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <XcpCmdDisconnect+0x2c>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* enable resource protection */
  XcpProtectResources();
 8001268:	f7ff ff40 	bl	80010ec <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <XcpCmdDisconnect+0x2c>)
 800126e:	22ff      	movs	r2, #255	; 0xff
 8001270:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <XcpCmdDisconnect+0x2c>)
 8001274:	2201      	movs	r2, #1
 8001276:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdDisconnect ***/
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200004ac 	.word	0x200004ac

08001288 <XcpCmdGetStatus>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetStatus(blt_int8u *data)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <XcpCmdGetStatus+0x44>)
 8001292:	22ff      	movs	r2, #255	; 0xff
 8001294:	701a      	strb	r2, [r3, #0]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <XcpCmdGetStatus+0x44>)
 8001298:	2200      	movs	r2, #0
 800129a:	705a      	strb	r2, [r3, #1]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <XcpCmdGetStatus+0x44>)
 800129e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <XcpCmdGetStatus+0x44>)
 80012a4:	709a      	strb	r2, [r3, #2]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <XcpCmdGetStatus+0x44>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[4] = 0;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <XcpCmdGetStatus+0x44>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <XcpCmdGetStatus+0x44>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	715a      	strb	r2, [r3, #5]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <XcpCmdGetStatus+0x44>)
 80012ba:	2206      	movs	r2, #6
 80012bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetStatus ***/
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	200004ac 	.word	0x200004ac

080012d0 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff ff15 	bl	8001108 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <XcpCmdGetId>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetId(blt_int8u *data)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <XcpCmdGetId+0x44>)
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	701a      	strb	r2, [r3, #0]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <XcpCmdGetId+0x48>)
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <XcpCmdGetId+0x44>)
 80012fa:	649a      	str	r2, [r3, #72]	; 0x48

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <XcpCmdGetId+0x44>)
 80012fe:	2200      	movs	r2, #0
 8001300:	705a      	strb	r2, [r3, #1]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <XcpCmdGetId+0x44>)
 8001304:	2200      	movs	r2, #0
 8001306:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <XcpCmdGetId+0x44>)
 800130a:	2200      	movs	r2, #0
 800130c:	70da      	strb	r2, [r3, #3]

  /* store station id length (excl. null termination) for response packet */
  stationIdLen = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 800130e:	2307      	movs	r3, #7
 8001310:	60fb      	str	r3, [r7, #12]
  XcpSetOrderedLong(stationIdLen, &xcpInfo.ctoData[4]);
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <XcpCmdGetId+0x4c>)
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f7ff ff3a 	bl	800118e <XcpSetOrderedLong>

  /* set packet length */
  xcpInfo.ctoLen = 8;
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <XcpCmdGetId+0x44>)
 800131c:	2208      	movs	r2, #8
 800131e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetId ***/
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200004ac 	.word	0x200004ac
 8001330:	0800319c 	.word	0x0800319c
 8001334:	200004b0 	.word	0x200004b0

08001338 <XcpCmdSetMta>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <XcpCmdSetMta+0x30>)
 8001342:	22ff      	movs	r2, #255	; 0xff
 8001344:	701a      	strb	r2, [r3, #0]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3304      	adds	r3, #4
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fef4 	bl	8001138 <XcpGetOrderedLong>
 8001350:	4603      	mov	r3, r0
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <XcpCmdSetMta+0x30>)
 8001354:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <XcpCmdSetMta+0x30>)
 8001358:	2201      	movs	r2, #1
 800135a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdSetMta ***/
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200004ac 	.word	0x200004ac

0800136c <XcpCmdUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUpload(blt_int8u *data)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8001374:	f7ff f982 	bl	800067c <ComGetActiveInterfaceMaxRxLen>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3301      	adds	r3, #1
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	429a      	cmp	r2, r3
 8001386:	d803      	bhi.n	8001390 <XcpCmdUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001388:	2022      	movs	r0, #34	; 0x22
 800138a:	f7ff febd 	bl	8001108 <XcpSetCtoError>
    return;
 800138e:	e021      	b.n	80013d4 <XcpCmdUpload+0x68>
  }

  /* read out the length of the requested upload operation */
  len = data[1];
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3301      	adds	r3, #1
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <XcpCmdUpload+0x70>)
 800139a:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <XcpCmdUpload+0x74>)
 80013a0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80013a2:	89fa      	ldrh	r2, [r7, #14]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fa0b 	bl	80007c0 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <XcpCmdUpload+0x74>)
 80013ac:	22ff      	movs	r2, #255	; 0xff
 80013ae:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <XcpCmdUpload+0x74>)
 80013b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	3201      	adds	r2, #1
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <XcpCmdUpload+0x74>)
 80013be:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3301      	adds	r3, #1
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <XcpCmdUpload+0x74>)
 80013d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdUpload ***/
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200004ad 	.word	0x200004ad
 80013e0:	200004ac 	.word	0x200004ac

080013e4 <XcpCmdShortUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdShortUpload(blt_int8u *data)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 80013ec:	f7ff f946 	bl	800067c <ComGetActiveInterfaceMaxRxLen>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3301      	adds	r3, #1
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d803      	bhi.n	8001408 <XcpCmdShortUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001400:	2022      	movs	r0, #34	; 0x22
 8001402:	f7ff fe81 	bl	8001108 <XcpSetCtoError>
    return;
 8001406:	e029      	b.n	800145c <XcpCmdShortUpload+0x78>
  }

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3304      	adds	r3, #4
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fe93 	bl	8001138 <XcpGetOrderedLong>
 8001412:	4603      	mov	r3, r0
 8001414:	4a13      	ldr	r2, [pc, #76]	; (8001464 <XcpCmdShortUpload+0x80>)
 8001416:	6493      	str	r3, [r2, #72]	; 0x48
  /* read out the length of the requested upload operation */
  len = data[1];
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3301      	adds	r3, #1
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <XcpCmdShortUpload+0x84>)
 8001422:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <XcpCmdShortUpload+0x80>)
 8001428:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800142a:	89fa      	ldrh	r2, [r7, #14]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f9c7 	bl	80007c0 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <XcpCmdShortUpload+0x80>)
 8001434:	22ff      	movs	r2, #255	; 0xff
 8001436:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <XcpCmdShortUpload+0x80>)
 800143a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	3201      	adds	r2, #1
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4a07      	ldr	r2, [pc, #28]	; (8001464 <XcpCmdShortUpload+0x80>)
 8001446:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3301      	adds	r3, #1
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	3301      	adds	r3, #1
 8001452:	b29b      	uxth	r3, r3
 8001454:	b21a      	sxth	r2, r3
 8001456:	4b03      	ldr	r3, [pc, #12]	; (8001464 <XcpCmdShortUpload+0x80>)
 8001458:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdShortUpload ***/
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200004ac 	.word	0x200004ac
 8001468:	200004ad 	.word	0x200004ad

0800146c <XcpCmdBuildCheckSum>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdBuildCheckSum(blt_int8u *data)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  blt_int32u checksumLen;
  blt_int32u checksumVal = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  blt_int8u  checksumType;
  
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <XcpCmdBuildCheckSum+0x60>)
 800147a:	22ff      	movs	r2, #255	; 0xff
 800147c:	701a      	strb	r2, [r3, #0]

  /* obtain checksum and checksum type */
  checksumLen = XcpGetOrderedLong(&data[4]);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3304      	adds	r3, #4
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fe58 	bl	8001138 <XcpGetOrderedLong>
 8001488:	6178      	str	r0, [r7, #20]
  checksumType = XcpComputeChecksum(xcpInfo.mta, checksumLen, &checksumVal);
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <XcpCmdBuildCheckSum+0x60>)
 800148c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148e:	f107 020c 	add.w	r2, r7, #12
 8001492:	6979      	ldr	r1, [r7, #20]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fe08 	bl	80010aa <XcpComputeChecksum>
 800149a:	4603      	mov	r3, r0
 800149c:	74fb      	strb	r3, [r7, #19]
  xcpInfo.ctoData[1] = checksumType;
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <XcpCmdBuildCheckSum+0x60>)
 80014a0:	7cfb      	ldrb	r3, [r7, #19]
 80014a2:	7053      	strb	r3, [r2, #1]
  XcpSetOrderedLong(checksumVal, &xcpInfo.ctoData[4]);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	490a      	ldr	r1, [pc, #40]	; (80014d0 <XcpCmdBuildCheckSum+0x64>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fe70 	bl	800118e <XcpSetOrderedLong>

  /* initialize reserved parameters */
  xcpInfo.ctoData[2] = 0;
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <XcpCmdBuildCheckSum+0x60>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <XcpCmdBuildCheckSum+0x60>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <XcpCmdBuildCheckSum+0x60>)
 80014bc:	2208      	movs	r2, #8
 80014be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdBuildCheckSum ***/
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200004ac 	.word	0x200004ac
 80014d0:	200004b0 	.word	0x200004b0

080014d4 <XcpCmdProgramStart>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramStart(blt_int8u *data)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <XcpCmdProgramStart+0x48>)
 80014de:	22ff      	movs	r2, #255	; 0xff
 80014e0:	701a      	strb	r2, [r3, #0]

  /* initialize reserved parameter */
  xcpInfo.ctoData[1] = 0;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <XcpCmdProgramStart+0x48>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	705a      	strb	r2, [r3, #1]

  /* no special communication mode supported during programming */
  xcpInfo.ctoData[2] = 0;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <XcpCmdProgramStart+0x48>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	709a      	strb	r2, [r3, #2]

  /* cto packet length stays the same during programming */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 80014ee:	f7ff f8c5 	bl	800067c <ComGetActiveInterfaceMaxRxLen>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <XcpCmdProgramStart+0x48>)
 80014f8:	70da      	strb	r2, [r3, #3]

  /* no block size, st-min time, or queue size supported */
  xcpInfo.ctoData[4] = 0;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <XcpCmdProgramStart+0x48>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <XcpCmdProgramStart+0x48>)
 8001502:	2200      	movs	r2, #0
 8001504:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[6] = 0;
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <XcpCmdProgramStart+0x48>)
 8001508:	2200      	movs	r2, #0
 800150a:	719a      	strb	r2, [r3, #6]

  /* set packet length */
  xcpInfo.ctoLen = 7;
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <XcpCmdProgramStart+0x48>)
 800150e:	2207      	movs	r2, #7
 8001510:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramStart ***/
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200004ac 	.word	0x200004ac

08001520 <XcpCmdProgramMax>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramMax(blt_int8u *data)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <XcpCmdProgramMax+0x58>)
 800152a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800152c:	f7ff f8a6 	bl	800067c <ComGetActiveInterfaceMaxRxLen>
 8001530:	4603      	mov	r3, r0
 8001532:	3b01      	subs	r3, #1
 8001534:	4619      	mov	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3301      	adds	r3, #1
 800153a:	461a      	mov	r2, r3
 800153c:	4620      	mov	r0, r4
 800153e:	f7ff fbf2 	bl	8000d26 <NvmWrite>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d103      	bne.n	8001550 <XcpCmdProgramMax+0x30>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 8001548:	2031      	movs	r0, #49	; 0x31
 800154a:	f7ff fddd 	bl	8001108 <XcpSetCtoError>
    return;
 800154e:	e00f      	b.n	8001570 <XcpCmdProgramMax+0x50>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <XcpCmdProgramMax+0x58>)
 8001552:	22ff      	movs	r2, #255	; 0xff
 8001554:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8001556:	f7ff f891 	bl	800067c <ComGetActiveInterfaceMaxRxLen>
 800155a:	4603      	mov	r3, r0
 800155c:	1e5a      	subs	r2, r3, #1
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <XcpCmdProgramMax+0x58>)
 8001560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <XcpCmdProgramMax+0x58>)
 8001566:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <XcpCmdProgramMax+0x58>)
 800156a:	2201      	movs	r2, #1
 800156c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramMax ***/
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}
 8001576:	bf00      	nop
 8001578:	200004ac 	.word	0x200004ac

0800157c <XcpCmdProgram>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgram(blt_int8u *data)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* validate length of download request */
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8001584:	f7ff f87a 	bl	800067c <ComGetActiveInterfaceMaxRxLen>
 8001588:	4603      	mov	r3, r0
 800158a:	3b01      	subs	r3, #1
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	3201      	adds	r2, #1
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	4293      	cmp	r3, r2
 8001594:	dc03      	bgt.n	800159e <XcpCmdProgram+0x22>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001596:	2022      	movs	r0, #34	; 0x22
 8001598:	f7ff fdb6 	bl	8001108 <XcpSetCtoError>
    return;
 800159c:	e030      	b.n	8001600 <XcpCmdProgram+0x84>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <XcpCmdProgram+0x8c>)
 80015a0:	22ff      	movs	r2, #255	; 0xff
 80015a2:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <XcpCmdProgram+0x8c>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* end of programming sequence (datasize is 0)? */
  if (data[1] == 0)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3301      	adds	r3, #1
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d108      	bne.n	80015c8 <XcpCmdProgram+0x4c>
  {
    /* call erase/programming cleanup routine */
    if (NvmDone() == BLT_FALSE)
 80015b6:	f7ff fbe2 	bl	8000d7e <NvmDone>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d11e      	bne.n	80015fe <XcpCmdProgram+0x82>
    {
      /* error occurred while finishing up programming */
      XcpSetCtoError(XCP_ERR_GENERIC);
 80015c0:	2031      	movs	r0, #49	; 0x31
 80015c2:	f7ff fda1 	bl	8001108 <XcpSetCtoError>
    }
    return;
 80015c6:	e01a      	b.n	80015fe <XcpCmdProgram+0x82>
  }
  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <XcpCmdProgram+0x8c>)
 80015ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3301      	adds	r3, #1
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4619      	mov	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3302      	adds	r3, #2
 80015d8:	461a      	mov	r2, r3
 80015da:	f7ff fba4 	bl	8000d26 <NvmWrite>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d103      	bne.n	80015ec <XcpCmdProgram+0x70>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 80015e4:	2031      	movs	r0, #49	; 0x31
 80015e6:	f7ff fd8f 	bl	8001108 <XcpSetCtoError>
    return;
 80015ea:	e009      	b.n	8001600 <XcpCmdProgram+0x84>
  }

  /* post increment the mta */
  xcpInfo.mta += data[1];
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <XcpCmdProgram+0x8c>)
 80015ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	3201      	adds	r2, #1
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a03      	ldr	r2, [pc, #12]	; (8001608 <XcpCmdProgram+0x8c>)
 80015fa:	6493      	str	r3, [r2, #72]	; 0x48
 80015fc:	e000      	b.n	8001600 <XcpCmdProgram+0x84>
    return;
 80015fe:	bf00      	nop
} /*** end of XcpCmdProgram ***/
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200004ac 	.word	0x200004ac

0800160c <XcpCmdProgramClear>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramClear(blt_int8u *data)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* erase the memory */
  eraseAddr = xcpInfo.mta;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <XcpCmdProgramClear+0x44>)
 8001616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001618:	60fb      	str	r3, [r7, #12]
  eraseLen = XcpGetOrderedLong(&data[4]);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3304      	adds	r3, #4
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fd8a 	bl	8001138 <XcpGetOrderedLong>
 8001624:	60b8      	str	r0, [r7, #8]
  if (NvmErase(eraseAddr, eraseLen) == BLT_FALSE)
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fb8c 	bl	8000d46 <NvmErase>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d103      	bne.n	800163c <XcpCmdProgramClear+0x30>
  {
    /* error occurred during erasure */
    XcpSetCtoError(XCP_ERR_GENERIC);
 8001634:	2031      	movs	r0, #49	; 0x31
 8001636:	f7ff fd67 	bl	8001108 <XcpSetCtoError>
    return;
 800163a:	e006      	b.n	800164a <XcpCmdProgramClear+0x3e>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <XcpCmdProgramClear+0x44>)
 800163e:	22ff      	movs	r2, #255	; 0xff
 8001640:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001642:	4b03      	ldr	r3, [pc, #12]	; (8001650 <XcpCmdProgramClear+0x44>)
 8001644:	2201      	movs	r2, #1
 8001646:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramClear ***/
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200004ac 	.word	0x200004ac

08001654 <XcpCmdProgramReset>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramReset(blt_int8u *data)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
#endif

  /* reset the ecu after programming is done. so basically, just start the newly programmed
   * firmware. it is okay if the code does not return here. 
   */
  CpuStartUserProgram();
 800165c:	f7ff f888 	bl	8000770 <CpuStartUserProgram>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <XcpCmdProgramReset+0x24>)
 8001662:	22ff      	movs	r2, #255	; 0xff
 8001664:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <XcpCmdProgramReset+0x24>)
 8001668:	2201      	movs	r2, #1
 800166a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramReset ***/
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200004ac 	.word	0x200004ac

0800167c <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8001684:	2031      	movs	r0, #49	; 0x31
 8001686:	f7ff fd3f 	bl	8001108 <XcpSetCtoError>
  return;
 800168a:	bf00      	nop
} /*** end of XcpCmdProgramPrepare ***/
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <LL_RCC_HSI_Enable+0x1c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <LL_RCC_HSI_Enable+0x1c>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000

080016b4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <LL_RCC_HSI_IsReady+0x20>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	bf0c      	ite	eq
 80016c4:	2301      	moveq	r3, #1
 80016c6:	2300      	movne	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40021000 	.word	0x40021000

080016d8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4904      	ldr	r1, [pc, #16]	; (8001700 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000

08001704 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <LL_RCC_SetSysClkSource+0x24>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 0203 	bic.w	r2, r3, #3
 8001714:	4904      	ldr	r1, [pc, #16]	; (8001728 <LL_RCC_SetSysClkSource+0x24>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000

0800172c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <LL_RCC_GetSysClkSource+0x18>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 030c 	and.w	r3, r3, #12
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000

08001748 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <LL_RCC_SetAHBPrescaler+0x24>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001758:	4904      	ldr	r1, [pc, #16]	; (800176c <LL_RCC_SetAHBPrescaler+0x24>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40021000 	.word	0x40021000

08001770 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <LL_RCC_SetAPB1Prescaler+0x24>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001780:	4904      	ldr	r1, [pc, #16]	; (8001794 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	40021000 	.word	0x40021000

08001798 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017a8:	4904      	ldr	r1, [pc, #16]	; (80017bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40021000 	.word	0x40021000

080017c0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <LL_FLASH_SetLatency+0x24>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 0207 	bic.w	r2, r3, #7
 80017d0:	4904      	ldr	r1, [pc, #16]	; (80017e4 <LL_FLASH_SetLatency+0x24>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40022000 	.word	0x40022000

080017e8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <LL_FLASH_GetLatency+0x18>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40022000 	.word	0x40022000

08001804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001808:	f000 fa2a 	bl	8001c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180c:	f000 f808 	bl	8001820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001810:	f000 f83e 	bl	8001890 <MX_GPIO_Init>
  //MX_CAN_Init();
  /* USER CODE BEGIN 2 */
  BootInit();
 8001814:	f7fe fd2c 	bl	8000270 <BootInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BootTask();
 8001818:	f7fe fd3a 	bl	8000290 <BootTask>
 800181c:	e7fc      	b.n	8001818 <main+0x14>
	...

08001820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff ffcb 	bl	80017c0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800182a:	bf00      	nop
 800182c:	f7ff ffdc 	bl	80017e8 <LL_FLASH_GetLatency>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1fa      	bne.n	800182c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001836:	f7ff ff2d 	bl	8001694 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800183a:	bf00      	nop
 800183c:	f7ff ff3a 	bl	80016b4 <LL_RCC_HSI_IsReady>
 8001840:	4603      	mov	r3, r0
 8001842:	2b01      	cmp	r3, #1
 8001844:	d1fa      	bne.n	800183c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001846:	2010      	movs	r0, #16
 8001848:	f7ff ff46 	bl	80016d8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff ff7b 	bl	8001748 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff ff8c 	bl	8001770 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff ff9d 	bl	8001798 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800185e:	2000      	movs	r0, #0
 8001860:	f7ff ff50 	bl	8001704 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001864:	bf00      	nop
 8001866:	f7ff ff61 	bl	800172c <LL_RCC_GetSysClkSource>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1fa      	bne.n	8001866 <SystemClock_Config+0x46>
  {

  }
  LL_SetSystemCoreClock(8000000);
 8001870:	4806      	ldr	r0, [pc, #24]	; (800188c <SystemClock_Config+0x6c>)
 8001872:	f001 fc35 	bl	80030e0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001876:	200f      	movs	r0, #15
 8001878:	f000 fa2e 	bl	8001cd8 <HAL_InitTick>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001882:	f000 f8ff 	bl	8001a84 <Error_Handler>
  }
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	007a1200 	.word	0x007a1200

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a6:	4b72      	ldr	r3, [pc, #456]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	4a71      	ldr	r2, [pc, #452]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 80018ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018b0:	6153      	str	r3, [r2, #20]
 80018b2:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018be:	4b6c      	ldr	r3, [pc, #432]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a6b      	ldr	r2, [pc, #428]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 80018c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018c8:	6153      	str	r3, [r2, #20]
 80018ca:	4b69      	ldr	r3, [pc, #420]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	4b66      	ldr	r3, [pc, #408]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4a65      	ldr	r2, [pc, #404]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	6153      	str	r3, [r2, #20]
 80018e2:	4b63      	ldr	r3, [pc, #396]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	4b60      	ldr	r3, [pc, #384]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	4a5f      	ldr	r2, [pc, #380]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 80018f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f8:	6153      	str	r3, [r2, #20]
 80018fa:	4b5d      	ldr	r3, [pc, #372]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001906:	4b5a      	ldr	r3, [pc, #360]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a59      	ldr	r2, [pc, #356]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 800190c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <MX_GPIO_Init+0x1e0>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EBS_RELAY1_Pin|EBS_RELAY2_Pin|BUZZERAS_CMD_Pin|LED2_Pin
 800191e:	2200      	movs	r2, #0
 8001920:	f644 4158 	movw	r1, #19544	; 0x4c58
 8001924:	4853      	ldr	r0, [pc, #332]	; (8001a74 <MX_GPIO_Init+0x1e4>)
 8001926:	f001 fa7d 	bl	8002e24 <HAL_GPIO_WritePin>
                          |AMI3_CMD_Pin|AMI2_CMD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AMS_CMD_Pin|IMD_CMD_Pin|RTD_CMD_Pin, GPIO_PIN_SET);
 800192a:	2201      	movs	r2, #1
 800192c:	f44f 518a 	mov.w	r1, #4416	; 0x1140
 8001930:	4851      	ldr	r0, [pc, #324]	; (8001a78 <MX_GPIO_Init+0x1e8>)
 8001932:	f001 fa77 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZEREV_CMD_Pin|PWM3_CMD_Pin|TSOFF_CMD_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 800193c:	484e      	ldr	r0, [pc, #312]	; (8001a78 <MX_GPIO_Init+0x1e8>)
 800193e:	f001 fa71 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ASB_CMD_GPIO_Port, ASB_CMD_Pin, GPIO_PIN_SET);
 8001942:	2201      	movs	r2, #1
 8001944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194c:	f001 fa6a 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2104      	movs	r1, #4
 8001954:	4847      	ldr	r0, [pc, #284]	; (8001a74 <MX_GPIO_Init+0x1e4>)
 8001956:	f001 fa65 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMI1_CMD_Pin|ASSI_YELLOW_CMD_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	21a0      	movs	r1, #160	; 0xa0
 800195e:	4847      	ldr	r0, [pc, #284]	; (8001a7c <MX_GPIO_Init+0x1ec>)
 8001960:	f001 fa60 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ASSI_BLUE_CMD_GPIO_Port, ASSI_BLUE_CMD_Pin, GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196a:	4844      	ldr	r0, [pc, #272]	; (8001a7c <MX_GPIO_Init+0x1ec>)
 800196c:	f001 fa5a 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PWM1_CMD_Pin|PWM2_CMD_Pin, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	2103      	movs	r1, #3
 8001974:	4842      	ldr	r0, [pc, #264]	; (8001a80 <MX_GPIO_Init+0x1f0>)
 8001976:	f001 fa55 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EBS_RELAY1_Pin EBS_RELAY2_Pin BUZZERAS_CMD_Pin LED1_Pin
                           LED2_Pin AMI3_CMD_Pin AMI2_CMD_Pin */
  GPIO_InitStruct.Pin = EBS_RELAY1_Pin|EBS_RELAY2_Pin|BUZZERAS_CMD_Pin|LED1_Pin
 800197a:	f644 435c 	movw	r3, #19548	; 0x4c5c
 800197e:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|AMI3_CMD_Pin|AMI2_CMD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001984:	2302      	movs	r3, #2
 8001986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	4838      	ldr	r0, [pc, #224]	; (8001a74 <MX_GPIO_Init+0x1e4>)
 8001994:	f001 f8bc 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_CK_STM_Pin SpareButton_STM_Pin */
  GPIO_InitStruct.Pin = TS_CK_STM_Pin|SpareButton_STM_Pin;
 8001998:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4831      	ldr	r0, [pc, #196]	; (8001a74 <MX_GPIO_Init+0x1e4>)
 80019ae:	f001 f8af 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMS_CMD_Pin BUZZEREV_CMD_Pin IMD_CMD_Pin PWM3_CMD_Pin
                           TSOFF_CMD_Pin RTD_CMD_Pin */
  GPIO_InitStruct.Pin = AMS_CMD_Pin|BUZZEREV_CMD_Pin|IMD_CMD_Pin|PWM3_CMD_Pin
 80019b2:	f44f 53ee 	mov.w	r3, #7616	; 0x1dc0
 80019b6:	617b      	str	r3, [r7, #20]
                          |TSOFF_CMD_Pin|RTD_CMD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019bc:	2302      	movs	r3, #2
 80019be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	482b      	ldr	r0, [pc, #172]	; (8001a78 <MX_GPIO_Init+0x1e8>)
 80019cc:	f001 f8a0 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : TS_EX_STM_Pin */
  GPIO_InitStruct.Pin = TS_EX_STM_Pin;
 80019d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019da:	2301      	movs	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TS_EX_STM_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	4824      	ldr	r0, [pc, #144]	; (8001a78 <MX_GPIO_Init+0x1e8>)
 80019e6:	f001 f893 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASB_CMD_Pin */
  GPIO_InitStruct.Pin = ASB_CMD_Pin;
 80019ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ASB_CMD_GPIO_Port, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a06:	f001 f883 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a1c:	2307      	movs	r3, #7
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2a:	f001 f871 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMI1_CMD_Pin ASSI_YELLOW_CMD_Pin ASSI_BLUE_CMD_Pin */
  GPIO_InitStruct.Pin = AMI1_CMD_Pin|ASSI_YELLOW_CMD_Pin|ASSI_BLUE_CMD_Pin;
 8001a2e:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	480d      	ldr	r0, [pc, #52]	; (8001a7c <MX_GPIO_Init+0x1ec>)
 8001a48:	f001 f862 	bl	8002b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM1_CMD_Pin PWM2_CMD_Pin */
  GPIO_InitStruct.Pin = PWM1_CMD_Pin|PWM2_CMD_Pin;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	4807      	ldr	r0, [pc, #28]	; (8001a80 <MX_GPIO_Init+0x1f0>)
 8001a64:	f001 f854 	bl	8002b10 <HAL_GPIO_Init>

}
 8001a68:	bf00      	nop
 8001a6a:	3728      	adds	r7, #40	; 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000
 8001a74:	48000c00 	.word	0x48000c00
 8001a78:	48000800 	.word	0x48000800
 8001a7c:	48000400 	.word	0x48000400
 8001a80:	48001000 	.word	0x48001000

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <Error_Handler+0x8>
	...

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_MspInit+0x44>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <HAL_MspInit+0x44>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6193      	str	r3, [r2, #24]
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_MspInit+0x44>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_MspInit+0x44>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_MspInit+0x44>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	61d3      	str	r3, [r2, #28]
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_MspInit+0x44>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <HAL_CAN_MspInit+0x7c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d127      	bne.n	8001b4a <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_CAN_MspInit+0x80>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <HAL_CAN_MspInit+0x80>)
 8001b00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_CAN_MspInit+0x80>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_CAN_MspInit+0x80>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <HAL_CAN_MspInit+0x80>)
 8001b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b1c:	6153      	str	r3, [r2, #20]
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_CAN_MspInit+0x80>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PD0     ------> CAN_RX
    PD1     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <HAL_CAN_MspInit+0x84>)
 8001b46:	f000 ffe3 	bl	8002b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3728      	adds	r7, #40	; 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40006400 	.word	0x40006400
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	48000c00 	.word	0x48000c00

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <NMI_Handler+0x4>

08001b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <HardFault_Handler+0x4>

08001b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <MemManage_Handler+0x4>

08001b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bac:	f000 f8c4 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (HAL_GetTick() - lastTimer > 250) {
 8001bb0:	f7ff f93e 	bl	8000e30 <HAL_GetTick>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <SysTick_Handler+0x38>)
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	2bfa      	cmp	r3, #250	; 0xfa
 8001bbe:	d90d      	bls.n	8001bdc <SysTick_Handler+0x34>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	4808      	ldr	r0, [pc, #32]	; (8001be4 <SysTick_Handler+0x3c>)
 8001bc4:	f001 f946 	bl	8002e54 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001bc8:	2108      	movs	r1, #8
 8001bca:	4806      	ldr	r0, [pc, #24]	; (8001be4 <SysTick_Handler+0x3c>)
 8001bcc:	f001 f942 	bl	8002e54 <HAL_GPIO_TogglePin>
	  lastTimer = HAL_GetTick();
 8001bd0:	f7ff f92e 	bl	8000e30 <HAL_GetTick>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b01      	ldr	r3, [pc, #4]	; (8001be0 <SysTick_Handler+0x38>)
 8001bda:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200004f8 	.word	0x200004f8
 8001be4:	48000c00 	.word	0x48000c00

08001be8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <SystemInit+0x20>)
 8001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <SystemInit+0x20>)
 8001bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c12:	490e      	ldr	r1, [pc, #56]	; (8001c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c14:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <LoopForever+0xe>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c28:	4c0b      	ldr	r4, [pc, #44]	; (8001c58 <LoopForever+0x16>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c36:	f7ff ffd7 	bl	8001be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f001 fa61 	bl	8003100 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c3e:	f7ff fde1 	bl	8001804 <main>

08001c42 <LoopForever>:

LoopForever:
    b LoopForever
 8001c42:	e7fe      	b.n	8001c42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001c50:	080031c4 	.word	0x080031c4
  ldr r2, =_sbss
 8001c54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c58:	20000520 	.word	0x20000520

08001c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC1_2_IRQHandler>
	...

08001c60 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_Init+0x28>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <HAL_Init+0x28>)
 8001c6a:	f043 0310 	orr.w	r3, r3, #16
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c70:	2003      	movs	r0, #3
 8001c72:	f000 fd41 	bl	80026f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c76:	200f      	movs	r0, #15
 8001c78:	f000 f82e 	bl	8001cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c7c:	f7ff ff08 	bl	8001a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40022000 	.word	0x40022000

08001c8c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_DeInit+0x38>)
 8001c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c96:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_DeInit+0x38>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_DeInit+0x38>)
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca4:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <HAL_DeInit+0x38>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_DeInit+0x38>)
 8001cae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_DeInit+0x38>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001cba:	f000 f805 	bl	8001cc8 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_InitTick+0x54>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_InitTick+0x58>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fd25 	bl	8002746 <HAL_SYSTICK_Config>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00e      	b.n	8001d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d80a      	bhi.n	8001d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d14:	f000 fcfb 	bl	800270e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d18:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <HAL_InitTick+0x5c>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000004 	.word	0x20000004
 8001d30:	2000000c 	.word	0x2000000c
 8001d34:	20000008 	.word	0x20000008

08001d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_IncTick+0x20>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x24>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <HAL_IncTick+0x24>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	2000000c 	.word	0x2000000c
 8001d5c:	200004fc 	.word	0x200004fc

08001d60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e0ed      	b.n	8001f4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d102      	bne.n	8001d84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff feaa 	bl	8001ad8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d94:	f7ff f84c 	bl	8000e30 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d9a:	e012      	b.n	8001dc2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d9c:	f7ff f848 	bl	8000e30 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b0a      	cmp	r3, #10
 8001da8:	d90b      	bls.n	8001dc2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2205      	movs	r2, #5
 8001dba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0c5      	b.n	8001f4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0e5      	beq.n	8001d9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0202 	bic.w	r2, r2, #2
 8001dde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de0:	f7ff f826 	bl	8000e30 <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001de6:	e012      	b.n	8001e0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001de8:	f7ff f822 	bl	8000e30 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b0a      	cmp	r3, #10
 8001df4:	d90b      	bls.n	8001e0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2205      	movs	r2, #5
 8001e06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e09f      	b.n	8001f4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e5      	bne.n	8001de8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7e1b      	ldrb	r3, [r3, #24]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d108      	bne.n	8001e36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	e007      	b.n	8001e46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7e5b      	ldrb	r3, [r3, #25]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d108      	bne.n	8001e60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e007      	b.n	8001e70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7e9b      	ldrb	r3, [r3, #26]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d108      	bne.n	8001e8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0220 	orr.w	r2, r2, #32
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	e007      	b.n	8001e9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0220 	bic.w	r2, r2, #32
 8001e98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	7edb      	ldrb	r3, [r3, #27]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d108      	bne.n	8001eb4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0210 	bic.w	r2, r2, #16
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e007      	b.n	8001ec4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0210 	orr.w	r2, r2, #16
 8001ec2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7f1b      	ldrb	r3, [r3, #28]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d108      	bne.n	8001ede <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0208 	orr.w	r2, r2, #8
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	e007      	b.n	8001eee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0208 	bic.w	r2, r2, #8
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7f5b      	ldrb	r3, [r3, #29]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d108      	bne.n	8001f08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0204 	orr.w	r2, r2, #4
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e007      	b.n	8001f18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0204 	bic.w	r2, r2, #4
 8001f16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	ea42 0103 	orr.w	r1, r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	1e5a      	subs	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b087      	sub	sp, #28
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f6c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f6e:	7cfb      	ldrb	r3, [r7, #19]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d003      	beq.n	8001f7c <HAL_CAN_ConfigFilter+0x26>
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	f040 80aa 	bne.w	80020d0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f82:	f043 0201 	orr.w	r2, r3, #1
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	2201      	movs	r2, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d123      	bne.n	8001ffe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fd8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3248      	adds	r2, #72	; 0x48
 8001fde:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ff2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ff4:	6979      	ldr	r1, [r7, #20]
 8001ff6:	3348      	adds	r3, #72	; 0x48
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	440b      	add	r3, r1
 8001ffc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d122      	bne.n	800204c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	431a      	orrs	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002026:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3248      	adds	r2, #72	; 0x48
 800202c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002040:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002042:	6979      	ldr	r1, [r7, #20]
 8002044:	3348      	adds	r3, #72	; 0x48
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d109      	bne.n	8002068 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	43db      	mvns	r3, r3
 800205e:	401a      	ands	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002066:	e007      	b.n	8002078 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	431a      	orrs	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d109      	bne.n	8002094 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43db      	mvns	r3, r3
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002092:	e007      	b.n	80020a4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	431a      	orrs	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d107      	bne.n	80020bc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020c2:	f023 0201 	bic.w	r2, r3, #1
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e006      	b.n	80020de <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
  }
}
 80020de:	4618      	mov	r0, r3
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d12e      	bne.n	800215c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2202      	movs	r2, #2
 8002102:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002116:	f7fe fe8b 	bl	8000e30 <HAL_GetTick>
 800211a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800211c:	e012      	b.n	8002144 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800211e:	f7fe fe87 	bl	8000e30 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b0a      	cmp	r3, #10
 800212a:	d90b      	bls.n	8002144 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2205      	movs	r2, #5
 800213c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e012      	b.n	800216a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1e5      	bne.n	800211e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	e006      	b.n	800216a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
  }
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002172:	b480      	push	{r7}
 8002174:	b089      	sub	sp, #36	; 0x24
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002186:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002190:	7ffb      	ldrb	r3, [r7, #31]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d003      	beq.n	800219e <HAL_CAN_AddTxMessage+0x2c>
 8002196:	7ffb      	ldrb	r3, [r7, #31]
 8002198:	2b02      	cmp	r3, #2
 800219a:	f040 80b8 	bne.w	800230e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d105      	bne.n	80021be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a0 	beq.w	80022fe <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	0e1b      	lsrs	r3, r3, #24
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d907      	bls.n	80021de <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e09e      	b.n	800231c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021de:	2201      	movs	r2, #1
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	409a      	lsls	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10d      	bne.n	800220c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021fa:	68f9      	ldr	r1, [r7, #12]
 80021fc:	6809      	ldr	r1, [r1, #0]
 80021fe:	431a      	orrs	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3318      	adds	r3, #24
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	440b      	add	r3, r1
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e00f      	b.n	800222c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002216:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800221c:	68f9      	ldr	r1, [r7, #12]
 800221e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002220:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3318      	adds	r3, #24
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	440b      	add	r3, r1
 800222a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6819      	ldr	r1, [r3, #0]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3318      	adds	r3, #24
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	440b      	add	r3, r1
 800223c:	3304      	adds	r3, #4
 800223e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	7d1b      	ldrb	r3, [r3, #20]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d111      	bne.n	800226c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	3318      	adds	r3, #24
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	6811      	ldr	r1, [r2, #0]
 800225c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	3318      	adds	r3, #24
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	440b      	add	r3, r1
 8002268:	3304      	adds	r3, #4
 800226a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3307      	adds	r3, #7
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	061a      	lsls	r2, r3, #24
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3306      	adds	r3, #6
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	041b      	lsls	r3, r3, #16
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3305      	adds	r3, #5
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	4313      	orrs	r3, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	3204      	adds	r2, #4
 800228c:	7812      	ldrb	r2, [r2, #0]
 800228e:	4610      	mov	r0, r2
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	6811      	ldr	r1, [r2, #0]
 8002294:	ea43 0200 	orr.w	r2, r3, r0
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	440b      	add	r3, r1
 800229e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80022a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3303      	adds	r3, #3
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	061a      	lsls	r2, r3, #24
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3302      	adds	r3, #2
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	041b      	lsls	r3, r3, #16
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3301      	adds	r3, #1
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	4313      	orrs	r3, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	7812      	ldrb	r2, [r2, #0]
 80022c4:	4610      	mov	r0, r2
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	6811      	ldr	r1, [r2, #0]
 80022ca:	ea43 0200 	orr.w	r2, r3, r0
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	440b      	add	r3, r1
 80022d4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80022d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3318      	adds	r3, #24
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	4413      	add	r3, r2
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	6811      	ldr	r1, [r2, #0]
 80022ec:	f043 0201 	orr.w	r2, r3, #1
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3318      	adds	r3, #24
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	440b      	add	r3, r1
 80022f8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e00e      	b.n	800231c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e006      	b.n	800231c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
  }
}
 800231c:	4618      	mov	r0, r3
 800231e:	3724      	adds	r7, #36	; 0x24
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3020 	ldrb.w	r3, [r3, #32]
 800233c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800233e:	7afb      	ldrb	r3, [r7, #11]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d002      	beq.n	800234a <HAL_CAN_IsTxMessagePending+0x22>
 8002344:	7afb      	ldrb	r3, [r7, #11]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d10b      	bne.n	8002362 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	069b      	lsls	r3, r3, #26
 8002354:	401a      	ands	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	069b      	lsls	r3, r3, #26
 800235a:	429a      	cmp	r2, r3
 800235c:	d001      	beq.n	8002362 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800235e:	2301      	movs	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002384:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002386:	7dfb      	ldrb	r3, [r7, #23]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d003      	beq.n	8002394 <HAL_CAN_GetRxMessage+0x24>
 800238c:	7dfb      	ldrb	r3, [r7, #23]
 800238e:	2b02      	cmp	r3, #2
 8002390:	f040 80f3 	bne.w	800257a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10e      	bne.n	80023b8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d116      	bne.n	80023d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0e7      	b.n	8002588 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0d8      	b.n	8002588 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	331b      	adds	r3, #27
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	4413      	add	r3, r2
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0204 	and.w	r2, r3, #4
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10c      	bne.n	800240e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	331b      	adds	r3, #27
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	4413      	add	r3, r2
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0d5b      	lsrs	r3, r3, #21
 8002404:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	e00b      	b.n	8002426 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	331b      	adds	r3, #27
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	4413      	add	r3, r2
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	08db      	lsrs	r3, r3, #3
 800241e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	331b      	adds	r3, #27
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	4413      	add	r3, r2
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0202 	and.w	r2, r3, #2
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	331b      	adds	r3, #27
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	4413      	add	r3, r2
 8002448:	3304      	adds	r3, #4
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 020f 	and.w	r2, r3, #15
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	331b      	adds	r3, #27
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	4413      	add	r3, r2
 8002460:	3304      	adds	r3, #4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	b2da      	uxtb	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	331b      	adds	r3, #27
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	4413      	add	r3, r2
 8002478:	3304      	adds	r3, #4
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	b29a      	uxth	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	4413      	add	r3, r2
 800248e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0a1a      	lsrs	r2, r3, #8
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	4413      	add	r3, r2
 80024be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0c1a      	lsrs	r2, r3, #16
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	3302      	adds	r3, #2
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	0e1a      	lsrs	r2, r3, #24
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	3303      	adds	r3, #3
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	3304      	adds	r3, #4
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	4413      	add	r3, r2
 800250a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	0a1a      	lsrs	r2, r3, #8
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	3305      	adds	r3, #5
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	4413      	add	r3, r2
 8002524:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0c1a      	lsrs	r2, r3, #16
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	3306      	adds	r3, #6
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	4413      	add	r3, r2
 800253e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0e1a      	lsrs	r2, r3, #24
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	3307      	adds	r3, #7
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d108      	bne.n	8002566 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0220 	orr.w	r2, r2, #32
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	e007      	b.n	8002576 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0220 	orr.w	r2, r2, #32
 8002574:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e006      	b.n	8002588 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
  }
}
 8002588:	4618      	mov	r0, r3
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	6039      	str	r1, [r7, #0]
 8002602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	2b00      	cmp	r3, #0
 800260a:	db0a      	blt.n	8002622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	490c      	ldr	r1, [pc, #48]	; (8002644 <__NVIC_SetPriority+0x4c>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	440b      	add	r3, r1
 800261c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002620:	e00a      	b.n	8002638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4908      	ldr	r1, [pc, #32]	; (8002648 <__NVIC_SetPriority+0x50>)
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	3b04      	subs	r3, #4
 8002630:	0112      	lsls	r2, r2, #4
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	440b      	add	r3, r1
 8002636:	761a      	strb	r2, [r3, #24]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000e100 	.word	0xe000e100
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264c:	b480      	push	{r7}
 800264e:	b089      	sub	sp, #36	; 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f1c3 0307 	rsb	r3, r3, #7
 8002666:	2b04      	cmp	r3, #4
 8002668:	bf28      	it	cs
 800266a:	2304      	movcs	r3, #4
 800266c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3304      	adds	r3, #4
 8002672:	2b06      	cmp	r3, #6
 8002674:	d902      	bls.n	800267c <NVIC_EncodePriority+0x30>
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3b03      	subs	r3, #3
 800267a:	e000      	b.n	800267e <NVIC_EncodePriority+0x32>
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	401a      	ands	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002694:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	43d9      	mvns	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	4313      	orrs	r3, r2
         );
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3724      	adds	r7, #36	; 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c4:	d301      	bcc.n	80026ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00f      	b.n	80026ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <SysTick_Config+0x40>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d2:	210f      	movs	r1, #15
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026d8:	f7ff ff8e 	bl	80025f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <SysTick_Config+0x40>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <SysTick_Config+0x40>)
 80026e4:	2207      	movs	r2, #7
 80026e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	e000e010 	.word	0xe000e010

080026f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff47 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002720:	f7ff ff5c 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7ff ff8e 	bl	800264c <NVIC_EncodePriority>
 8002730:	4602      	mov	r2, r0
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff5d 	bl	80025f8 <__NVIC_SetPriority>
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ffb0 	bl	80026b4 <SysTick_Config>
 8002754:	4603      	mov	r3, r0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800277a:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <HAL_FLASH_Program+0xd8>)
 800277c:	7e1b      	ldrb	r3, [r3, #24]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_FLASH_Program+0x26>
 8002782:	2302      	movs	r3, #2
 8002784:	e054      	b.n	8002830 <HAL_FLASH_Program+0xd0>
 8002786:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <HAL_FLASH_Program+0xd8>)
 8002788:	2201      	movs	r2, #1
 800278a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800278c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002790:	f000 f8a8 	bl	80028e4 <FLASH_WaitForLastOperation>
 8002794:	4603      	mov	r3, r0
 8002796:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d144      	bne.n	8002828 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d102      	bne.n	80027aa <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80027a4:	2301      	movs	r3, #1
 80027a6:	757b      	strb	r3, [r7, #21]
 80027a8:	e007      	b.n	80027ba <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d102      	bne.n	80027b6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80027b0:	2302      	movs	r3, #2
 80027b2:	757b      	strb	r3, [r7, #21]
 80027b4:	e001      	b.n	80027ba <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80027b6:	2304      	movs	r3, #4
 80027b8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	75bb      	strb	r3, [r7, #22]
 80027be:	e02d      	b.n	800281c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80027c0:	7dbb      	ldrb	r3, [r7, #22]
 80027c2:	005a      	lsls	r2, r3, #1
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	eb02 0c03 	add.w	ip, r2, r3
 80027ca:	7dbb      	ldrb	r3, [r7, #22]
 80027cc:	0119      	lsls	r1, r3, #4
 80027ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027d2:	f1c1 0620 	rsb	r6, r1, #32
 80027d6:	f1a1 0020 	sub.w	r0, r1, #32
 80027da:	fa22 f401 	lsr.w	r4, r2, r1
 80027de:	fa03 f606 	lsl.w	r6, r3, r6
 80027e2:	4334      	orrs	r4, r6
 80027e4:	fa23 f000 	lsr.w	r0, r3, r0
 80027e8:	4304      	orrs	r4, r0
 80027ea:	fa23 f501 	lsr.w	r5, r3, r1
 80027ee:	b2a3      	uxth	r3, r4
 80027f0:	4619      	mov	r1, r3
 80027f2:	4660      	mov	r0, ip
 80027f4:	f000 f85a 	bl	80028ac <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027fc:	f000 f872 	bl	80028e4 <FLASH_WaitForLastOperation>
 8002800:	4603      	mov	r3, r0
 8002802:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_FLASH_Program+0xdc>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	4a0c      	ldr	r2, [pc, #48]	; (800283c <HAL_FLASH_Program+0xdc>)
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8002810:	7dfb      	ldrb	r3, [r7, #23]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d107      	bne.n	8002826 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002816:	7dbb      	ldrb	r3, [r7, #22]
 8002818:	3301      	adds	r3, #1
 800281a:	75bb      	strb	r3, [r7, #22]
 800281c:	7dba      	ldrb	r2, [r7, #22]
 800281e:	7d7b      	ldrb	r3, [r7, #21]
 8002820:	429a      	cmp	r2, r3
 8002822:	d3cd      	bcc.n	80027c0 <HAL_FLASH_Program+0x60>
 8002824:	e000      	b.n	8002828 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002826:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <HAL_FLASH_Program+0xd8>)
 800282a:	2200      	movs	r2, #0
 800282c:	761a      	strb	r2, [r3, #24]

  return status;
 800282e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002830:	4618      	mov	r0, r3
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002838:	20000500 	.word	0x20000500
 800283c:	40022000 	.word	0x40022000

08002840 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <HAL_FLASH_Unlock+0x40>)
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00d      	beq.n	8002872 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <HAL_FLASH_Unlock+0x40>)
 8002858:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <HAL_FLASH_Unlock+0x44>)
 800285a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_FLASH_Unlock+0x40>)
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_FLASH_Unlock+0x48>)
 8002860:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <HAL_FLASH_Unlock+0x40>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002872:	79fb      	ldrb	r3, [r7, #7]
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	40022000 	.word	0x40022000
 8002884:	45670123 	.word	0x45670123
 8002888:	cdef89ab 	.word	0xcdef89ab

0800288c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_FLASH_Lock+0x1c>)
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <HAL_FLASH_Lock+0x1c>)
 8002896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	40022000 	.word	0x40022000

080028ac <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <FLASH_Program_HalfWord+0x30>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <FLASH_Program_HalfWord+0x34>)
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <FLASH_Program_HalfWord+0x34>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	887a      	ldrh	r2, [r7, #2]
 80028ce:	801a      	strh	r2, [r3, #0]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	20000500 	.word	0x20000500
 80028e0:	40022000 	.word	0x40022000

080028e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7fe faa0 	bl	8000e30 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80028f2:	e010      	b.n	8002916 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028fa:	d00c      	beq.n	8002916 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <FLASH_WaitForLastOperation+0x2e>
 8002902:	f7fe fa95 	bl	8000e30 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	429a      	cmp	r2, r3
 8002910:	d201      	bcs.n	8002916 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e01f      	b.n	8002956 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <FLASH_WaitForLastOperation+0x7c>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d0e8      	beq.n	80028f4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <FLASH_WaitForLastOperation+0x7c>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b20      	cmp	r3, #32
 800292c:	d102      	bne.n	8002934 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <FLASH_WaitForLastOperation+0x7c>)
 8002930:	2220      	movs	r2, #32
 8002932:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <FLASH_WaitForLastOperation+0x7c>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b10      	cmp	r3, #16
 800293e:	d005      	beq.n	800294c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <FLASH_WaitForLastOperation+0x7c>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002948:	2b04      	cmp	r3, #4
 800294a:	d103      	bne.n	8002954 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800294c:	f000 f80a 	bl	8002964 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40022000 	.word	0x40022000

08002964 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <FLASH_SetErrorCode+0x5c>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b10      	cmp	r3, #16
 8002978:	d109      	bne.n	800298e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <FLASH_SetErrorCode+0x60>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f043 0302 	orr.w	r3, r3, #2
 8002982:	4a10      	ldr	r2, [pc, #64]	; (80029c4 <FLASH_SetErrorCode+0x60>)
 8002984:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f043 0310 	orr.w	r3, r3, #16
 800298c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <FLASH_SetErrorCode+0x5c>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b04      	cmp	r3, #4
 8002998:	d109      	bne.n	80029ae <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <FLASH_SetErrorCode+0x60>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <FLASH_SetErrorCode+0x60>)
 80029a4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80029ae:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <FLASH_SetErrorCode+0x5c>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	60d3      	str	r3, [r2, #12]
}  
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40022000 	.word	0x40022000
 80029c4:	20000500 	.word	0x20000500

080029c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80029da:	4b2e      	ldr	r3, [pc, #184]	; (8002a94 <HAL_FLASHEx_Erase+0xcc>)
 80029dc:	7e1b      	ldrb	r3, [r3, #24]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_FLASHEx_Erase+0x1e>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e052      	b.n	8002a8c <HAL_FLASHEx_Erase+0xc4>
 80029e6:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_FLASHEx_Erase+0xcc>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d115      	bne.n	8002a20 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80029f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029f8:	f7ff ff74 	bl	80028e4 <FLASH_WaitForLastOperation>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d140      	bne.n	8002a84 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002a02:	f000 f84b 	bl	8002a9c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a06:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a0a:	f7ff ff6b 	bl	80028e4 <FLASH_WaitForLastOperation>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002a12:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_FLASHEx_Erase+0xd0>)
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	4a20      	ldr	r2, [pc, #128]	; (8002a98 <HAL_FLASHEx_Erase+0xd0>)
 8002a18:	f023 0304 	bic.w	r3, r3, #4
 8002a1c:	6113      	str	r3, [r2, #16]
 8002a1e:	e031      	b.n	8002a84 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002a20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a24:	f7ff ff5e 	bl	80028e4 <FLASH_WaitForLastOperation>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d12a      	bne.n	8002a84 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a34:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	e019      	b.n	8002a72 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002a3e:	68b8      	ldr	r0, [r7, #8]
 8002a40:	f000 f846 	bl	8002ad0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a48:	f7ff ff4c 	bl	80028e4 <FLASH_WaitForLastOperation>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_FLASHEx_Erase+0xd0>)
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <HAL_FLASHEx_Erase+0xd0>)
 8002a56:	f023 0302 	bic.w	r3, r3, #2
 8002a5a:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	601a      	str	r2, [r3, #0]
            break;
 8002a68:	e00c      	b.n	8002a84 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a70:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	02da      	lsls	r2, r3, #11
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d3dc      	bcc.n	8002a3e <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_FLASHEx_Erase+0xcc>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	761a      	strb	r2, [r3, #24]

  return status;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000500 	.word	0x20000500
 8002a98:	40022000 	.word	0x40022000

08002a9c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002aa0:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <FLASH_MassErase+0x2c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <FLASH_MassErase+0x30>)
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	4a08      	ldr	r2, [pc, #32]	; (8002acc <FLASH_MassErase+0x30>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <FLASH_MassErase+0x30>)
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <FLASH_MassErase+0x30>)
 8002ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002abc:	6113      	str	r3, [r2, #16]
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	20000500 	.word	0x20000500
 8002acc:	40022000 	.word	0x40022000

08002ad0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <FLASH_PageErase+0x38>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <FLASH_PageErase+0x3c>)
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <FLASH_PageErase+0x3c>)
 8002ae4:	f043 0302 	orr.w	r3, r3, #2
 8002ae8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002aea:	4a08      	ldr	r2, [pc, #32]	; (8002b0c <FLASH_PageErase+0x3c>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <FLASH_PageErase+0x3c>)
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	4a05      	ldr	r2, [pc, #20]	; (8002b0c <FLASH_PageErase+0x3c>)
 8002af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002afa:	6113      	str	r3, [r2, #16]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	20000500 	.word	0x20000500
 8002b0c:	40022000 	.word	0x40022000

08002b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1e:	e160      	b.n	8002de2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2101      	movs	r1, #1
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8152 	beq.w	8002ddc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d005      	beq.n	8002b50 <HAL_GPIO_Init+0x40>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d130      	bne.n	8002bb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b86:	2201      	movs	r2, #1
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4013      	ands	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	f003 0201 	and.w	r2, r3, #1
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d017      	beq.n	8002bee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	2203      	movs	r2, #3
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d123      	bne.n	8002c42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	08da      	lsrs	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3208      	adds	r2, #8
 8002c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	08da      	lsrs	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3208      	adds	r2, #8
 8002c3c:	6939      	ldr	r1, [r7, #16]
 8002c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0203 	and.w	r2, r3, #3
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80ac 	beq.w	8002ddc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c84:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <HAL_GPIO_Init+0x2f0>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	4a5d      	ldr	r2, [pc, #372]	; (8002e00 <HAL_GPIO_Init+0x2f0>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6193      	str	r3, [r2, #24]
 8002c90:	4b5b      	ldr	r3, [pc, #364]	; (8002e00 <HAL_GPIO_Init+0x2f0>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c9c:	4a59      	ldr	r2, [pc, #356]	; (8002e04 <HAL_GPIO_Init+0x2f4>)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	220f      	movs	r2, #15
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cc6:	d025      	beq.n	8002d14 <HAL_GPIO_Init+0x204>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a4f      	ldr	r2, [pc, #316]	; (8002e08 <HAL_GPIO_Init+0x2f8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d01f      	beq.n	8002d10 <HAL_GPIO_Init+0x200>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a4e      	ldr	r2, [pc, #312]	; (8002e0c <HAL_GPIO_Init+0x2fc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d019      	beq.n	8002d0c <HAL_GPIO_Init+0x1fc>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a4d      	ldr	r2, [pc, #308]	; (8002e10 <HAL_GPIO_Init+0x300>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_GPIO_Init+0x1f8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a4c      	ldr	r2, [pc, #304]	; (8002e14 <HAL_GPIO_Init+0x304>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00d      	beq.n	8002d04 <HAL_GPIO_Init+0x1f4>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a4b      	ldr	r2, [pc, #300]	; (8002e18 <HAL_GPIO_Init+0x308>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d007      	beq.n	8002d00 <HAL_GPIO_Init+0x1f0>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a4a      	ldr	r2, [pc, #296]	; (8002e1c <HAL_GPIO_Init+0x30c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d101      	bne.n	8002cfc <HAL_GPIO_Init+0x1ec>
 8002cf8:	2306      	movs	r3, #6
 8002cfa:	e00c      	b.n	8002d16 <HAL_GPIO_Init+0x206>
 8002cfc:	2307      	movs	r3, #7
 8002cfe:	e00a      	b.n	8002d16 <HAL_GPIO_Init+0x206>
 8002d00:	2305      	movs	r3, #5
 8002d02:	e008      	b.n	8002d16 <HAL_GPIO_Init+0x206>
 8002d04:	2304      	movs	r3, #4
 8002d06:	e006      	b.n	8002d16 <HAL_GPIO_Init+0x206>
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e004      	b.n	8002d16 <HAL_GPIO_Init+0x206>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e002      	b.n	8002d16 <HAL_GPIO_Init+0x206>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_GPIO_Init+0x206>
 8002d14:	2300      	movs	r3, #0
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	f002 0203 	and.w	r2, r2, #3
 8002d1c:	0092      	lsls	r2, r2, #2
 8002d1e:	4093      	lsls	r3, r2
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d26:	4937      	ldr	r1, [pc, #220]	; (8002e04 <HAL_GPIO_Init+0x2f4>)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d34:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <HAL_GPIO_Init+0x310>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d58:	4a31      	ldr	r2, [pc, #196]	; (8002e20 <HAL_GPIO_Init+0x310>)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d5e:	4b30      	ldr	r3, [pc, #192]	; (8002e20 <HAL_GPIO_Init+0x310>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d82:	4a27      	ldr	r2, [pc, #156]	; (8002e20 <HAL_GPIO_Init+0x310>)
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d88:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_GPIO_Init+0x310>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002dac:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <HAL_GPIO_Init+0x310>)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db2:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_GPIO_Init+0x310>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002dd6:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <HAL_GPIO_Init+0x310>)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3301      	adds	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f47f ae97 	bne.w	8002b20 <HAL_GPIO_Init+0x10>
  }
}
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40010000 	.word	0x40010000
 8002e08:	48000400 	.word	0x48000400
 8002e0c:	48000800 	.word	0x48000800
 8002e10:	48000c00 	.word	0x48000c00
 8002e14:	48001000 	.word	0x48001000
 8002e18:	48001400 	.word	0x48001400
 8002e1c:	48001800 	.word	0x48001800
 8002e20:	40010400 	.word	0x40010400

08002e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
 8002e30:	4613      	mov	r3, r2
 8002e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e34:	787b      	ldrb	r3, [r7, #1]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e40:	e002      	b.n	8002e48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e66:	887a      	ldrh	r2, [r7, #2]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	041a      	lsls	r2, r3, #16
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43d9      	mvns	r1, r3
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	400b      	ands	r3, r1
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	619a      	str	r2, [r3, #24]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <LL_RCC_GetSysClkSource>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <LL_RCC_GetSysClkSource+0x18>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 030c 	and.w	r3, r3, #12
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <LL_RCC_GetAHBPrescaler+0x18>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000

08002ec0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000

08002edc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <LL_RCC_PLL_GetMainSource+0x18>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000

08002f14 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002f18:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000

08002f30 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <LL_RCC_PLL_GetPrediv+0x18>)
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	f003 030f 	and.w	r3, r3, #15
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000

08002f4c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002f54:	f000 f820 	bl	8002f98 <RCC_GetSystemClockFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f83e 	bl	8002fe4 <RCC_GetHCLKClockFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f84c 	bl	8003010 <RCC_GetPCLK1ClockFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f858 	bl	8003038 <RCC_GetPCLK2ClockFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	60da      	str	r2, [r3, #12]
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002fa2:	f7ff ff71 	bl	8002e88 <LL_RCC_GetSysClkSource>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d00c      	beq.n	8002fc6 <RCC_GetSystemClockFreq+0x2e>
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d80e      	bhi.n	8002fce <RCC_GetSystemClockFreq+0x36>
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <RCC_GetSystemClockFreq+0x22>
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d003      	beq.n	8002fc0 <RCC_GetSystemClockFreq+0x28>
 8002fb8:	e009      	b.n	8002fce <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002fba:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <RCC_GetSystemClockFreq+0x48>)
 8002fbc:	607b      	str	r3, [r7, #4]
      break;
 8002fbe:	e009      	b.n	8002fd4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002fc0:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <RCC_GetSystemClockFreq+0x48>)
 8002fc2:	607b      	str	r3, [r7, #4]
      break;
 8002fc4:	e006      	b.n	8002fd4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002fc6:	f000 f84b 	bl	8003060 <RCC_PLL_GetFreqDomain_SYS>
 8002fca:	6078      	str	r0, [r7, #4]
      break;
 8002fcc:	e002      	b.n	8002fd4 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002fce:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <RCC_GetSystemClockFreq+0x48>)
 8002fd0:	607b      	str	r3, [r7, #4]
      break;
 8002fd2:	bf00      	nop
  }

  return frequency;
 8002fd4:	687b      	ldr	r3, [r7, #4]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	007a1200 	.word	0x007a1200

08002fe4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002fec:	f7ff ff5a 	bl	8002ea4 <LL_RCC_GetAHBPrescaler>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	4a04      	ldr	r2, [pc, #16]	; (800300c <RCC_GetHCLKClockFreq+0x28>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	40d3      	lsrs	r3, r2
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	080031a4 	.word	0x080031a4

08003010 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003018:	f7ff ff52 	bl	8002ec0 <LL_RCC_GetAPB1Prescaler>
 800301c:	4603      	mov	r3, r0
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	4a04      	ldr	r2, [pc, #16]	; (8003034 <RCC_GetPCLK1ClockFreq+0x24>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	461a      	mov	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	40d3      	lsrs	r3, r2
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	080031b4 	.word	0x080031b4

08003038 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003040:	f7ff ff4c 	bl	8002edc <LL_RCC_GetAPB2Prescaler>
 8003044:	4603      	mov	r3, r0
 8003046:	0adb      	lsrs	r3, r3, #11
 8003048:	4a04      	ldr	r2, [pc, #16]	; (800305c <RCC_GetPCLK2ClockFreq+0x24>)
 800304a:	5cd3      	ldrb	r3, [r2, r3]
 800304c:	461a      	mov	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	40d3      	lsrs	r3, r2
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	080031b4 	.word	0x080031b4

08003060 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800306e:	f7ff ff43 	bl	8002ef8 <LL_RCC_PLL_GetMainSource>
 8003072:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800307a:	d004      	beq.n	8003086 <RCC_PLL_GetFreqDomain_SYS+0x26>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003082:	d003      	beq.n	800308c <RCC_PLL_GetFreqDomain_SYS+0x2c>
 8003084:	e005      	b.n	8003092 <RCC_PLL_GetFreqDomain_SYS+0x32>
  {
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <RCC_PLL_GetFreqDomain_SYS+0x7c>)
 8003088:	60fb      	str	r3, [r7, #12]
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800308a:	e005      	b.n	8003098 <RCC_PLL_GetFreqDomain_SYS+0x38>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800308c:	4b13      	ldr	r3, [pc, #76]	; (80030dc <RCC_PLL_GetFreqDomain_SYS+0x7c>)
 800308e:	60fb      	str	r3, [r7, #12]
      break;
 8003090:	e002      	b.n	8003098 <RCC_PLL_GetFreqDomain_SYS+0x38>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <RCC_PLL_GetFreqDomain_SYS+0x7c>)
 8003094:	60fb      	str	r3, [r7, #12]
#else
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003096:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 8003098:	f7ff ff4a 	bl	8002f30 <LL_RCC_PLL_GetPrediv>
 800309c:	4603      	mov	r3, r0
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	3301      	adds	r3, #1
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	fbb2 f4f3 	udiv	r4, r2, r3
 80030aa:	f7ff ff33 	bl	8002f14 <LL_RCC_PLL_GetMultiplicator>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80030b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80030b8:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	fa92 f2a2 	rbit	r2, r2
 80030c0:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	fab2 f282 	clz	r2, r2
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	40d3      	lsrs	r3, r2
 80030cc:	3302      	adds	r3, #2
 80030ce:	fb04 f303 	mul.w	r3, r4, r3
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd90      	pop	{r4, r7, pc}
 80030da:	bf00      	nop
 80030dc:	007a1200 	.word	0x007a1200

080030e0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80030e8:	4a04      	ldr	r2, [pc, #16]	; (80030fc <LL_SetSystemCoreClock+0x1c>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6013      	str	r3, [r2, #0]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000004 	.word	0x20000004

08003100 <__libc_init_array>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	4d0d      	ldr	r5, [pc, #52]	; (8003138 <__libc_init_array+0x38>)
 8003104:	4c0d      	ldr	r4, [pc, #52]	; (800313c <__libc_init_array+0x3c>)
 8003106:	1b64      	subs	r4, r4, r5
 8003108:	10a4      	asrs	r4, r4, #2
 800310a:	2600      	movs	r6, #0
 800310c:	42a6      	cmp	r6, r4
 800310e:	d109      	bne.n	8003124 <__libc_init_array+0x24>
 8003110:	4d0b      	ldr	r5, [pc, #44]	; (8003140 <__libc_init_array+0x40>)
 8003112:	4c0c      	ldr	r4, [pc, #48]	; (8003144 <__libc_init_array+0x44>)
 8003114:	f000 f818 	bl	8003148 <_init>
 8003118:	1b64      	subs	r4, r4, r5
 800311a:	10a4      	asrs	r4, r4, #2
 800311c:	2600      	movs	r6, #0
 800311e:	42a6      	cmp	r6, r4
 8003120:	d105      	bne.n	800312e <__libc_init_array+0x2e>
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	f855 3b04 	ldr.w	r3, [r5], #4
 8003128:	4798      	blx	r3
 800312a:	3601      	adds	r6, #1
 800312c:	e7ee      	b.n	800310c <__libc_init_array+0xc>
 800312e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003132:	4798      	blx	r3
 8003134:	3601      	adds	r6, #1
 8003136:	e7f2      	b.n	800311e <__libc_init_array+0x1e>
 8003138:	080031bc 	.word	0x080031bc
 800313c:	080031bc 	.word	0x080031bc
 8003140:	080031bc 	.word	0x080031bc
 8003144:	080031c0 	.word	0x080031c0

08003148 <_init>:
 8003148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314a:	bf00      	nop
 800314c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314e:	bc08      	pop	{r3}
 8003150:	469e      	mov	lr, r3
 8003152:	4770      	bx	lr

08003154 <_fini>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	bf00      	nop
 8003158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315a:	bc08      	pop	{r3}
 800315c:	469e      	mov	lr, r3
 800315e:	4770      	bx	lr
