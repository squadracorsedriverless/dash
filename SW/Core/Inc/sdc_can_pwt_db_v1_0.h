/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Sat Jul  8 21:08:10 2023.
 */

#ifndef SDC_CAN_PWT_DB_V1_0_H
#define SDC_CAN_PWT_DB_V1_0_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define SDC_CAN_PWT_DB_V1_0_FBMS_CELLS_VDC_FRAME_ID (0x639u)
#define SDC_CAN_PWT_DB_V1_0_BCM_VEHICLE_STATUS_FRAME_ID (0x123u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_LIMITS_FRAME_ID (0x503u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_CHARGE_FRAME_ID (0x509u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_STATUS_FRAME_ID (0x501u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_WARN_ERR_FRAME_ID (0x506u)

/* Frame lengths in bytes. */
#define SDC_CAN_PWT_DB_V1_0_FBMS_CELLS_VDC_LENGTH (8u)
#define SDC_CAN_PWT_DB_V1_0_BCM_VEHICLE_STATUS_LENGTH (8u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_LIMITS_LENGTH (8u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_CHARGE_LENGTH (8u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_STATUS_LENGTH (8u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_WARN_ERR_LENGTH (8u)

/* Extended or standard frame types. */
#define SDC_CAN_PWT_DB_V1_0_FBMS_CELLS_VDC_IS_EXTENDED (0)
#define SDC_CAN_PWT_DB_V1_0_BCM_VEHICLE_STATUS_IS_EXTENDED (0)
#define SDC_CAN_PWT_DB_V1_0_FBMS_LIMITS_IS_EXTENDED (0)
#define SDC_CAN_PWT_DB_V1_0_FBMS_CHARGE_IS_EXTENDED (0)
#define SDC_CAN_PWT_DB_V1_0_FBMS_STATUS_IS_EXTENDED (0)
#define SDC_CAN_PWT_DB_V1_0_FBMS_WARN_ERR_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define SDC_CAN_PWT_DB_V1_0_FBMS_CELLS_VDC_CYCLE_TIME_MS (20u)
#define SDC_CAN_PWT_DB_V1_0_BCM_VEHICLE_STATUS_CYCLE_TIME_MS (100u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_LIMITS_CYCLE_TIME_MS (20u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_CHARGE_CYCLE_TIME_MS (50u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_STATUS_CYCLE_TIME_MS (20u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_WARN_ERR_CYCLE_TIME_MS (50u)

/* Signal choices. */
#define SDC_CAN_PWT_DB_V1_0_BCM_VEHICLE_STATUS_BCM_CHARGE_REQ_NO_REQ_CHOICE (0u)
#define SDC_CAN_PWT_DB_V1_0_BCM_VEHICLE_STATUS_BCM_CHARGE_REQ_CHARGE_REQUESTED_CHOICE (1u)

#define SDC_CAN_PWT_DB_V1_0_BCM_VEHICLE_STATUS_BCM_CLEAR_LATCHED_ERRORS_NO_REQ_CHOICE (0u)
#define SDC_CAN_PWT_DB_V1_0_BCM_VEHICLE_STATUS_BCM_CLEAR_LATCHED_ERRORS_LATCHED_ERRORS_CLEAR_REQUESTED_CHOICE (1u)

#define SDC_CAN_PWT_DB_V1_0_FBMS_LIMITS_FBMS_TRACTION_EN_TRACTION_POWER_NOT_ALLOWED_CHOICE (0u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_LIMITS_FBMS_TRACTION_EN_TRACTION_POWER_ALLOWED_CHOICE (1u)

#define SDC_CAN_PWT_DB_V1_0_FBMS_LIMITS_FBMS_REGEN_BRAKE_EN_REGENERATIVE_BRAKING_NOT_ALLOWED_CHOICE (0u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_LIMITS_FBMS_REGEN_BRAKE_EN_REGENERATIVE_BRAKING_ALLOWED_CHOICE (1u)

#define SDC_CAN_PWT_DB_V1_0_FBMS_LIMITS_FBMS_DE_ENERGIZE_REQ_NO_REQ_CHOICE (0u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_LIMITS_FBMS_DE_ENERGIZE_REQ_DISCHARGE_H_VBUS_CHOICE (1u)

#define SDC_CAN_PWT_DB_V1_0_FBMS_CHARGE_FBMS_CHARGE_STS_CHARGE_NOT_AVAILABLE_CHOICE (0u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_CHARGE_FBMS_CHARGE_STS_CHARGE_ENABLE_CHOICE (1u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_CHARGE_FBMS_CHARGE_STS_CHARGING_CHOICE (2u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_CHARGE_FBMS_CHARGE_STS_CHARGE_COMPLETED_CHOICE (3u)

#define SDC_CAN_PWT_DB_V1_0_FBMS_CHARGE_FBMS_BALANCING_BALANCE_OFF_CHOICE (0u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_CHARGE_FBMS_BALANCING_BALANCE_RUNNING_CHOICE (1u)

#define SDC_CAN_PWT_DB_V1_0_FBMS_STATUS_FBMS_CONTACTORS_STS_CONTACTORS_OPEN_CHOICE (0u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_STATUS_FBMS_CONTACTORS_STS_CONTACTORS_OPENING_CHOICE (1u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_STATUS_FBMS_CONTACTORS_STS_CONTACTORS_CLOSED_CHOICE (2u)
#define SDC_CAN_PWT_DB_V1_0_FBMS_STATUS_FBMS_CONTACTORS_STS_CONTACTORS_FAULT_CHOICE (3u)

/**
 * Signals in message FBMS_Cells_Vdc.
 *
 * All signal values are as on the CAN bus.
 */
struct sdc_can_pwt_db_v1_0_fbms_cells_vdc_t {
    /**
     * Minimum cells' voltage
     *
     * Range: 0..65535.00000041411566500261680 (0..5 V)
     * Scale: 7.6295109483e-05
     * Offset: 0
     */
    uint16_t fbms_cells_min_volt;

    /**
     * Maximum cells' voltage
     *
     * Range: 0..65535.00000041411566500261680 (0..5 V)
     * Scale: 7.6295109483e-05
     * Offset: 0
     */
    uint16_t fbms_cells_max_volt;

    /**
     * VDC voltage, vehicle side
     *
     * Range: 0..2046.999999999997524800000000 (0..602.058823529412 V)
     * Scale: 0.294117647058824
     * Offset: 0
     */
    uint16_t fbms_vdc;

    /**
     * Incremental counter for active check
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_cells_msg_cnt;

    /**
     * Negated byte sum of all message fields excluding checksum itself
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_cells_checksum;
};

/**
 * Signals in message BCM_VehicleStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct sdc_can_pwt_db_v1_0_bcm_vehicle_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_charge_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_clear_latched_errors;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_contactors_mode;

    /**
     * Incremental counter for active check
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_msg_cnt;

    /**
     * Negated byte sum of all message fields excluding checksum itself
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_vehicle_status_checksum;
};

/**
 * Signals in message FBMS_Limits.
 *
 * All signal values are as on the CAN bus.
 */
struct sdc_can_pwt_db_v1_0_fbms_limits_t {
    /**
     * Maximum traction DC current
     *
     * Range: 0..4095 (0..204.75 A)
     * Scale: 0.05
     * Offset: 0
     */
    uint16_t fbms_max_output_curr;

    /**
     * Maximum regenerative DC current
     *
     * Range: 0..4095 (0..204.75 A)
     * Scale: 0.05
     * Offset: 0
     */
    uint16_t fbms_max_regen_curr;

    /**
     * Maximum traction DC power
     *
     * Range: 0..4000 (0..200 kW)
     * Scale: 0.05
     * Offset: 0
     */
    uint16_t fbms_max_output_pow;

    /**
     * Maximum regenerative DC power
     *
     * Range: 0..4000 (0..200 kW)
     * Scale: 0.05
     * Offset: 0
     */
    uint16_t fbms_max_regen_pow;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_traction_en;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_regen_brake_en;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_de_energize_req;

    /**
     * Incremental counter for active check
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_limits_msg_cnt;

    /**
     * Negated byte sum of all message fields excluding checksum itself
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_limits_checksum;
};

/**
 * Signals in message FBMS_Charge.
 *
 * All signal values are as on the CAN bus.
 */
struct sdc_can_pwt_db_v1_0_fbms_charge_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_charge_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_balancing;

    /**
     * Maximum charge current
     *
     * Range: 0..4095 (0..204.75 A)
     * Scale: 0.05
     * Offset: 0
     */
    uint16_t fbms_charge_max_curr;

    /**
     * Maximum charge voltage
     *
     * Range: 0..8191.000000000001457300000000 (0..630.076923076923 V)
     * Scale: 0.0769230769230769
     * Offset: 0
     */
    uint16_t fbms_charge_max_volt;

    /**
     * Maximum voltage difference between battery cells
     *
     * Range: 0..1023 (0..1023 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fbms_unbalance;

    /**
     * Incremental counter for active check
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_charge_msg_cnt;

    /**
     * Negated byte sum of all message fields excluding checksum itself
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_charge_checksum;
};

/**
 * Signals in message FBMS_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct sdc_can_pwt_db_v1_0_fbms_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_contactors_sts;

    /**
     * If 1, at least one fault is asserted
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_fault;

    /**
     * Range: 0..2046.999999999997524800000000 (0..602.058823529412 V)
     * Scale: 0.294117647058824
     * Offset: 0
     */
    uint16_t fbms_battery_voltage;

    /**
     * Range: -4096..4095 (-204.8..204.75 A)
     * Scale: 0.05
     * Offset: 0
     */
    int16_t fbms_battery_current;

    /**
     * Actual power drawn from the battery
     *
     * Range: -2000..2000 (-200..200 kW)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fbms_act_power;

    /**
     * Battery state of charge
     *
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t fbms_so_c;

    /**
     * Incremental counter for active check
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_msg_cnt;

    /**
     * Negated byte sum of all message fields excluding checksum itself
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_status_checksum;
};

/**
 * Signals in message FBMS_WarnErr.
 *
 * All signal values are as on the CAN bus.
 */
struct sdc_can_pwt_db_v1_0_fbms_warn_err_t {
    /**
     * Loss of insulation between HV and chassis warning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_warn_insulation;

    /**
     * Battery over current warning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_warn_over_current;

    /**
     * Battery performance limited by temperature
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_warn_limits_by_temp;

    /**
     * Battery performance limited by voltage
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_warn_limits_by_volt;

    /**
     * No regenerative braking allowed, driver shall be informed
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_warn_no_regen_brake;

    /**
     * Loss of insulation between HV and chassis
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_insulation;

    /**
     * Battery over current fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_over_current;

    /**
     * Contactors fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_contactors;

    /**
     * Battery over voltage fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_over_voltage;

    /**
     * Battery under voltage fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_under_voltage;

    /**
     * Battery over temperature fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_over_temp;

    /**
     * Battery under temperature fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_under_temp;

    /**
     * BMS internal error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_system_fault;

    /**
     * Generic Battery fault (slave communication, over/under voltage/temperature...)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_battery_fault;

    /**
     * Current sensors KO
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_current_sensor_ko;

    /**
     * Latched loss of insulation fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_lt_insulation;

    /**
     * Latched battery over current fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_lt_over_current;

    /**
     * Latched contactors fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_lt_contactors;

    /**
     * Latched battery over voltage fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_lt_over_voltage;

    /**
     * Latched battery under voltage fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_lt_under_voltage;

    /**
     * Latched battery over temperature fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_lt_over_temp;

    /**
     * Latched battery under temperature fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_lt_under_temp;

    /**
     * Latched BMS internal fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_lt_system_fault;

    /**
     * Latched generic Battery fault (slave communication, over/under voltage/temperature...)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_lt_battery_fault;

    /**
     * Latched current sensors KO
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_err_lt_current_sensor_ko;

    /**
     * Incremental counter for active check
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_warn_err_msg_cnt;

    /**
     * Negated byte sum of all message fields excluding checksum itself
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fbms_warn_err_checksum;
};

/**
 * Pack message FBMS_Cells_Vdc.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sdc_can_pwt_db_v1_0_fbms_cells_vdc_pack(
    uint8_t *dst_p,
    const struct sdc_can_pwt_db_v1_0_fbms_cells_vdc_t *src_p,
    size_t size);

/**
 * Unpack message FBMS_Cells_Vdc.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sdc_can_pwt_db_v1_0_fbms_cells_vdc_unpack(
    struct sdc_can_pwt_db_v1_0_fbms_cells_vdc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_cells_min_volt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_cells_min_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_cells_min_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_cells_max_volt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_cells_max_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_cells_max_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_vdc_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_vdc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_vdc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_cells_msg_cnt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_cells_msg_cnt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_cells_msg_cnt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_cells_checksum_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_cells_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_cells_vdc_fbms_cells_checksum_is_in_range(uint8_t value);

/**
 * Pack message BCM_VehicleStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sdc_can_pwt_db_v1_0_bcm_vehicle_status_pack(
    uint8_t *dst_p,
    const struct sdc_can_pwt_db_v1_0_bcm_vehicle_status_t *src_p,
    size_t size);

/**
 * Unpack message BCM_VehicleStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sdc_can_pwt_db_v1_0_bcm_vehicle_status_unpack(
    struct sdc_can_pwt_db_v1_0_bcm_vehicle_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_charge_req_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_charge_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_charge_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_clear_latched_errors_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_clear_latched_errors_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_clear_latched_errors_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_contactors_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_contactors_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_contactors_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_msg_cnt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_msg_cnt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_msg_cnt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_vehicle_status_checksum_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_vehicle_status_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_bcm_vehicle_status_bcm_vehicle_status_checksum_is_in_range(uint8_t value);

/**
 * Pack message FBMS_Limits.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sdc_can_pwt_db_v1_0_fbms_limits_pack(
    uint8_t *dst_p,
    const struct sdc_can_pwt_db_v1_0_fbms_limits_t *src_p,
    size_t size);

/**
 * Unpack message FBMS_Limits.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sdc_can_pwt_db_v1_0_fbms_limits_unpack(
    struct sdc_can_pwt_db_v1_0_fbms_limits_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sdc_can_pwt_db_v1_0_fbms_limits_fbms_max_output_curr_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_limits_fbms_max_output_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_limits_fbms_max_output_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sdc_can_pwt_db_v1_0_fbms_limits_fbms_max_regen_curr_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_limits_fbms_max_regen_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_limits_fbms_max_regen_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sdc_can_pwt_db_v1_0_fbms_limits_fbms_max_output_pow_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_limits_fbms_max_output_pow_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_limits_fbms_max_output_pow_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sdc_can_pwt_db_v1_0_fbms_limits_fbms_max_regen_pow_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_limits_fbms_max_regen_pow_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_limits_fbms_max_regen_pow_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_limits_fbms_traction_en_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_limits_fbms_traction_en_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_limits_fbms_traction_en_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_limits_fbms_regen_brake_en_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_limits_fbms_regen_brake_en_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_limits_fbms_regen_brake_en_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_limits_fbms_de_energize_req_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_limits_fbms_de_energize_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_limits_fbms_de_energize_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_limits_fbms_limits_msg_cnt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_limits_fbms_limits_msg_cnt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_limits_fbms_limits_msg_cnt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_limits_fbms_limits_checksum_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_limits_fbms_limits_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_limits_fbms_limits_checksum_is_in_range(uint8_t value);

/**
 * Pack message FBMS_Charge.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sdc_can_pwt_db_v1_0_fbms_charge_pack(
    uint8_t *dst_p,
    const struct sdc_can_pwt_db_v1_0_fbms_charge_t *src_p,
    size_t size);

/**
 * Unpack message FBMS_Charge.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sdc_can_pwt_db_v1_0_fbms_charge_unpack(
    struct sdc_can_pwt_db_v1_0_fbms_charge_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_sts_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_charge_fbms_balancing_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_charge_fbms_balancing_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_charge_fbms_balancing_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_max_curr_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_max_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_max_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_max_volt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_max_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_max_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sdc_can_pwt_db_v1_0_fbms_charge_fbms_unbalance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_charge_fbms_unbalance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_charge_fbms_unbalance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_msg_cnt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_msg_cnt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_msg_cnt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_checksum_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_charge_fbms_charge_checksum_is_in_range(uint8_t value);

/**
 * Pack message FBMS_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sdc_can_pwt_db_v1_0_fbms_status_pack(
    uint8_t *dst_p,
    const struct sdc_can_pwt_db_v1_0_fbms_status_t *src_p,
    size_t size);

/**
 * Unpack message FBMS_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sdc_can_pwt_db_v1_0_fbms_status_unpack(
    struct sdc_can_pwt_db_v1_0_fbms_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_status_fbms_contactors_sts_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_status_fbms_contactors_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_status_fbms_contactors_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_status_fbms_fault_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_status_fbms_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_status_fbms_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sdc_can_pwt_db_v1_0_fbms_status_fbms_battery_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_status_fbms_battery_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_status_fbms_battery_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t sdc_can_pwt_db_v1_0_fbms_status_fbms_battery_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_status_fbms_battery_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_status_fbms_battery_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t sdc_can_pwt_db_v1_0_fbms_status_fbms_act_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_status_fbms_act_power_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_status_fbms_act_power_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_status_fbms_so_c_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_status_fbms_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_status_fbms_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_status_fbms_msg_cnt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_status_fbms_msg_cnt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_status_fbms_msg_cnt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_status_fbms_status_checksum_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_status_fbms_status_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_status_fbms_status_checksum_is_in_range(uint8_t value);

/**
 * Pack message FBMS_WarnErr.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sdc_can_pwt_db_v1_0_fbms_warn_err_pack(
    uint8_t *dst_p,
    const struct sdc_can_pwt_db_v1_0_fbms_warn_err_t *src_p,
    size_t size);

/**
 * Unpack message FBMS_WarnErr.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sdc_can_pwt_db_v1_0_fbms_warn_err_unpack(
    struct sdc_can_pwt_db_v1_0_fbms_warn_err_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_insulation_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_insulation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_insulation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_over_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_limits_by_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_limits_by_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_limits_by_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_limits_by_volt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_limits_by_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_limits_by_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_no_regen_brake_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_no_regen_brake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_no_regen_brake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_insulation_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_insulation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_insulation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_over_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_contactors_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_contactors_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_contactors_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_over_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_over_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_over_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_under_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_under_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_under_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_over_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_over_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_over_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_under_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_under_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_under_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_system_fault_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_system_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_system_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_battery_fault_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_battery_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_battery_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_current_sensor_ko_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_current_sensor_ko_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_current_sensor_ko_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_insulation_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_insulation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_insulation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_over_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_contactors_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_contactors_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_contactors_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_over_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_over_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_over_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_under_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_under_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_under_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_over_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_over_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_over_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_under_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_under_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_under_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_system_fault_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_system_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_system_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_battery_fault_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_battery_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_battery_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_current_sensor_ko_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_current_sensor_ko_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_err_lt_current_sensor_ko_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_err_msg_cnt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_err_msg_cnt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_err_msg_cnt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_err_checksum_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_err_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sdc_can_pwt_db_v1_0_fbms_warn_err_fbms_warn_err_checksum_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
