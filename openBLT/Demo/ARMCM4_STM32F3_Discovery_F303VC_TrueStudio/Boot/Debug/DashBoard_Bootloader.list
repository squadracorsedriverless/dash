
DashBoard_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cf0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08001e78  08001e78  00011e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f38  08001f38  00011f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f3c  08001f3c  00011f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08001f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          00000570  20000008  20000008  00020008  2**3
                  ALLOC
  8 ._user_heap_stack 00001000  20000578  20000578  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001126c  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003012  00000000  00000000  000312a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008b8  00000000  00000000  000342b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000790  00000000  00000000  00034b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001cfe2  00000000  00000000  00035300  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e590  00000000  00000000  000522e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00099e44  00000000  00000000  00060872  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000fa6b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001330  00000000  00000000  000fa734  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000042b3  00000000  00000000  000fba64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e60 	.word	0x08001e60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08001e60 	.word	0x08001e60

080001c8 <CpuIrqDisable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
  __asm volatile ("cpsid i");
 80001c8:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 80001ca:	4770      	bx	lr

080001cc <CpuIrqEnable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
  __asm volatile ("cpsie i");
 80001cc:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 80001ce:	4770      	bx	lr

080001d0 <CanGetSpeedConfig>:
**            otherwise.
**
****************************************************************************************/
static blt_bool CanGetSpeedConfig(blt_int16u baud, blt_int16u *prescaler,
                                  blt_int8u *tseg1, blt_int8u *tseg2)
{
 80001d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001d4:	b084      	sub	sp, #16
 80001d6:	4604      	mov	r4, r0
 80001d8:	460d      	mov	r5, r1
 80001da:	4617      	mov	r7, r2
 80001dc:	4698      	mov	r8, r3
  blt_int8u  cnt;
  blt_int32u canClockFreqkHz;
  LL_RCC_ClocksTypeDef rccClocks;

  /* read clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rccClocks);
 80001de:	4668      	mov	r0, sp
 80001e0:	f001 fdd0 	bl	8001d84 <LL_RCC_GetSystemClocksFreq>
  /* store CAN peripheral clock speed in kHz */
  canClockFreqkHz = rccClocks.PCLK1_Frequency / 1000u;
 80001e4:	9902      	ldr	r1, [sp, #8]
 80001e6:	4b16      	ldr	r3, [pc, #88]	; (8000240 <CanGetSpeedConfig+0x70>)
 80001e8:	fba3 3101 	umull	r3, r1, r3, r1
 80001ec:	0989      	lsrs	r1, r1, #6

  /* loop through all possible time quanta configurations to find a match */
  for (cnt=0; cnt < sizeof(canTiming)/sizeof(canTiming[0]); cnt++)
 80001ee:	2200      	movs	r2, #0
 80001f0:	e001      	b.n	80001f6 <CanGetSpeedConfig+0x26>
 80001f2:	3201      	adds	r2, #1
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	2a11      	cmp	r2, #17
 80001f8:	d81d      	bhi.n	8000236 <CanGetSpeedConfig+0x66>
  {
    if ((canClockFreqkHz % (baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1))) == 0)
 80001fa:	4b12      	ldr	r3, [pc, #72]	; (8000244 <CanGetSpeedConfig+0x74>)
 80001fc:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8000200:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8000204:	f893 c001 	ldrb.w	ip, [r3, #1]
 8000208:	eb00 030c 	add.w	r3, r0, ip
 800020c:	fb03 4304 	mla	r3, r3, r4, r4
 8000210:	fbb1 fef3 	udiv	lr, r1, r3
 8000214:	fb03 161e 	mls	r6, r3, lr, r1
 8000218:	2e00      	cmp	r6, #0
 800021a:	d1ea      	bne.n	80001f2 <CanGetSpeedConfig+0x22>
    {
      /* compute the prescaler that goes with this TQ configuration */
      *prescaler = canClockFreqkHz/(baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1));
 800021c:	fa1f f38e 	uxth.w	r3, lr
 8000220:	802b      	strh	r3, [r5, #0]

      /* make sure the prescaler is valid */
      if ((*prescaler > 0) && (*prescaler <= 1024))
 8000222:	3b01      	subs	r3, #1
 8000224:	b29b      	uxth	r3, r3
 8000226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800022a:	d2e2      	bcs.n	80001f2 <CanGetSpeedConfig+0x22>
      {
        /* store the bustiming configuration */
        *tseg1 = canTiming[cnt].tseg1;
 800022c:	7038      	strb	r0, [r7, #0]
        *tseg2 = canTiming[cnt].tseg2;
 800022e:	f888 c000 	strb.w	ip, [r8]
        /* found a good bus timing configuration */
        return BLT_TRUE;
 8000232:	2001      	movs	r0, #1
 8000234:	e000      	b.n	8000238 <CanGetSpeedConfig+0x68>
      }
    }
  }
  /* could not find a good bus timing configuration */
  return BLT_FALSE;
 8000236:	2000      	movs	r0, #0
} /*** end of CanGetSpeedConfig ***/
 8000238:	b004      	add	sp, #16
 800023a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800023e:	bf00      	nop
 8000240:	10624dd3 	.word	0x10624dd3
 8000244:	08001ee8 	.word	0x08001ee8

08000248 <CanInit>:
** \brief     Initializes the CAN controller and synchronizes it to the CAN bus.
** \return    none.
**
****************************************************************************************/
void CanInit(void)
{
 8000248:	b530      	push	{r4, r5, lr}
 800024a:	b08d      	sub	sp, #52	; 0x34
  blt_int16u prescaler = 0;
 800024c:	2200      	movs	r2, #0
 800024e:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
  blt_int8u  tseg1 = 0, tseg2 = 0;
 8000252:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
 8000256:	ab0c      	add	r3, sp, #48	; 0x30
 8000258:	f803 2d04 	strb.w	r2, [r3, #-4]!
  /* the current implementation supports CAN1. throw an assertion error in case a
   * different CAN channel is configured.
   */
  ASSERT_CT(BOOT_COM_CAN_CHANNEL_INDEX == 0);
  /* obtain bittiming configuration information. */
  if (CanGetSpeedConfig(BOOT_COM_CAN_BAUDRATE/1000, &prescaler, &tseg1, &tseg2) == BLT_FALSE)
 800025c:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 8000260:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8000264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000268:	f7ff ffb2 	bl	80001d0 <CanGetSpeedConfig>
 800026c:	2800      	cmp	r0, #0
 800026e:	d036      	beq.n	80002de <CanInit+0x96>
     */
    ASSERT_RT(BLT_FALSE);
  }

  /* set the CAN controller configuration. */
  canHandle.Instance = CAN;
 8000270:	4c1d      	ldr	r4, [pc, #116]	; (80002e8 <CanInit+0xa0>)
 8000272:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <CanInit+0xa4>)
 8000274:	6023      	str	r3, [r4, #0]
  canHandle.pTxMsg = &canTxMessage;
 8000276:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <CanInit+0xa8>)
 8000278:	6323      	str	r3, [r4, #48]	; 0x30
  canHandle.pRxMsg = &canRxMessage;
 800027a:	4b1e      	ldr	r3, [pc, #120]	; (80002f4 <CanInit+0xac>)
 800027c:	6363      	str	r3, [r4, #52]	; 0x34
  canHandle.Init.TTCM = DISABLE;
 800027e:	2500      	movs	r5, #0
 8000280:	61a5      	str	r5, [r4, #24]
  canHandle.Init.ABOM = DISABLE;
 8000282:	61e5      	str	r5, [r4, #28]
  canHandle.Init.AWUM = DISABLE;
 8000284:	6225      	str	r5, [r4, #32]
  canHandle.Init.NART = DISABLE;
 8000286:	6265      	str	r5, [r4, #36]	; 0x24
  canHandle.Init.RFLM = DISABLE;
 8000288:	62a5      	str	r5, [r4, #40]	; 0x28
  canHandle.Init.TXFP = DISABLE;
 800028a:	62e5      	str	r5, [r4, #44]	; 0x2c
  canHandle.Init.Mode = CAN_MODE_NORMAL;
 800028c:	60a5      	str	r5, [r4, #8]
  canHandle.Init.SJW = CAN_SJW_1TQ;
 800028e:	60e5      	str	r5, [r4, #12]
  canHandle.Init.BS1 = ((blt_int32u)tseg1 - 1) << CAN_BTR_TS1_Pos;
 8000290:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8000294:	3b01      	subs	r3, #1
 8000296:	041b      	lsls	r3, r3, #16
 8000298:	6123      	str	r3, [r4, #16]
  canHandle.Init.BS2 = ((blt_int32u)tseg2 - 1) << CAN_BTR_TS2_Pos;
 800029a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800029e:	3b01      	subs	r3, #1
 80002a0:	051b      	lsls	r3, r3, #20
 80002a2:	6163      	str	r3, [r4, #20]
  canHandle.Init.Prescaler = prescaler;
 80002a4:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80002a8:	6063      	str	r3, [r4, #4]
  /* initialize the CAN controller. this only fails if the CAN controller hardware is
   * faulty. no need to evaluate the return value as there is nothing we can do about
   * a faulty CAN controller.
   */
  (void)HAL_CAN_Init(&canHandle);
 80002aa:	4620      	mov	r0, r4
 80002ac:	f000 ff64 	bl	8001178 <HAL_CAN_Init>
    rxFilterMask = (CAN_RI0R_EXID_Msk) | CAN_RI0R_IDE;
  }
  /* configure the reception filter. note that the implementation of this function
   * always returns HAL_OK, so no need to evaluate the return value.
   */
  filterConfig.FilterNumber = 0;
 80002b0:	9506      	str	r5, [sp, #24]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002b2:	9507      	str	r5, [sp, #28]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80002b4:	2301      	movs	r3, #1
 80002b6:	9308      	str	r3, [sp, #32]
  filterConfig.FilterIdHigh = (rxFilterId >> 16) & 0x0000FFFFu;
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	9201      	str	r2, [sp, #4]
  filterConfig.FilterIdLow = rxFilterId & 0x0000FFFFu;
 80002bc:	9502      	str	r5, [sp, #8]
  filterConfig.FilterMaskIdHigh = (rxFilterMask >> 16) & 0x0000FFFFu;
 80002be:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80002c2:	9203      	str	r2, [sp, #12]
  filterConfig.FilterMaskIdLow = rxFilterMask & 0x0000FFFFu;
 80002c4:	2204      	movs	r2, #4
 80002c6:	9204      	str	r2, [sp, #16]
  filterConfig.FilterFIFOAssignment = 0;
 80002c8:	9505      	str	r5, [sp, #20]
  filterConfig.FilterActivation = ENABLE;
 80002ca:	9309      	str	r3, [sp, #36]	; 0x24
  /* the bank number is don't care for STM32F3 devices as it only supports one CAN
   * controller.
   */
  filterConfig.BankNumber = 14;
 80002cc:	230e      	movs	r3, #14
 80002ce:	930a      	str	r3, [sp, #40]	; 0x28
  (void)HAL_CAN_ConfigFilter(&canHandle, &filterConfig);
 80002d0:	eb0d 0102 	add.w	r1, sp, r2
 80002d4:	4620      	mov	r0, r4
 80002d6:	f000 fecf 	bl	8001078 <HAL_CAN_ConfigFilter>
} /*** end of CanInit ***/
 80002da:	b00d      	add	sp, #52	; 0x34
 80002dc:	bd30      	pop	{r4, r5, pc}
    ASSERT_RT(BLT_FALSE);
 80002de:	21b2      	movs	r1, #178	; 0xb2
 80002e0:	4805      	ldr	r0, [pc, #20]	; (80002f8 <CanInit+0xb0>)
 80002e2:	f000 fa6a 	bl	80007ba <AssertFailure>
 80002e6:	e7c3      	b.n	8000270 <CanInit+0x28>
 80002e8:	20000024 	.word	0x20000024
 80002ec:	40006400 	.word	0x40006400
 80002f0:	2000008c 	.word	0x2000008c
 80002f4:	20000068 	.word	0x20000068
 80002f8:	08001e78 	.word	0x08001e78

080002fc <CanTransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void CanTransmitPacket(blt_int8u *data, blt_int8u len)
{
 80002fc:	b510      	push	{r4, lr}

  /* configure the message that should be transmitted. */
  if ((txMsgId & 0x80000000) == 0)
  {
    /* set the 11-bit CAN identifier. */
    canHandle.pTxMsg->StdId = txMsgId;
 80002fe:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <CanTransmitPacket+0x38>)
 8000300:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000302:	f240 74e1 	movw	r4, #2017	; 0x7e1
 8000306:	601c      	str	r4, [r3, #0]
    canHandle.pTxMsg->IDE = CAN_ID_STD;
 8000308:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800030a:	2300      	movs	r3, #0
 800030c:	60a3      	str	r3, [r4, #8]
    txMsgId &= ~0x80000000;
    /* set the 29-bit CAN identifier. */
    canHandle.pTxMsg->ExtId = txMsgId;
    canHandle.pTxMsg->IDE = CAN_ID_EXT;
  }
  canHandle.pTxMsg->RTR = CAN_RTR_DATA;
 800030e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8000310:	60e3      	str	r3, [r4, #12]
  canHandle.pTxMsg->DLC = len;
 8000312:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000314:	6111      	str	r1, [r2, #16]
  /* copy the message data. */
  for (byteIdx = 0; byteIdx < len; byteIdx++)
 8000316:	e006      	b.n	8000326 <CanTransmitPacket+0x2a>
  {
    canHandle.pTxMsg->Data[byteIdx] = data[byteIdx];
 8000318:	4a06      	ldr	r2, [pc, #24]	; (8000334 <CanTransmitPacket+0x38>)
 800031a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800031c:	5cc4      	ldrb	r4, [r0, r3]
 800031e:	441a      	add	r2, r3
 8000320:	7514      	strb	r4, [r2, #20]
  for (byteIdx = 0; byteIdx < len; byteIdx++)
 8000322:	3301      	adds	r3, #1
 8000324:	b2db      	uxtb	r3, r3
 8000326:	428b      	cmp	r3, r1
 8000328:	d3f6      	bcc.n	8000318 <CanTransmitPacket+0x1c>
  }
  /* submit the message for transmission. no need to check the return value. if the
   * response cannot be transmitted, then the receiving node will detect a timeout.
   */
  (void)HAL_CAN_Transmit(&canHandle, CAN_MSG_TX_TIMEOUT_MS);
 800032a:	2132      	movs	r1, #50	; 0x32
 800032c:	4801      	ldr	r0, [pc, #4]	; (8000334 <CanTransmitPacket+0x38>)
 800032e:	f000 ffdd 	bl	80012ec <HAL_CAN_Transmit>
} /*** end of CanTransmitPacket ***/
 8000332:	bd10      	pop	{r4, pc}
 8000334:	20000024 	.word	0x20000024

08000338 <CanReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE is a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool CanReceivePacket(blt_int8u *data, blt_int8u *len)
{
 8000338:	b538      	push	{r3, r4, r5, lr}
 800033a:	4604      	mov	r4, r0
 800033c:	460d      	mov	r5, r1
  blt_bool result = BLT_FALSE;
  blt_bool packetIdMatches = BLT_FALSE;
  blt_int8u byteIdx;

  /* poll for received CAN messages that await processing. */
  if (HAL_CAN_Receive(&canHandle, CAN_FIFO0, 0) == HAL_OK)
 800033e:	2200      	movs	r2, #0
 8000340:	4611      	mov	r1, r2
 8000342:	480f      	ldr	r0, [pc, #60]	; (8000380 <CanReceivePacket+0x48>)
 8000344:	f001 f8dc 	bl	8001500 <HAL_CAN_Receive>
 8000348:	b9b8      	cbnz	r0, 800037a <CanReceivePacket+0x42>
  {
    /* check if this message has the configured CAN packet identifier. */
    if ((rxMsgId & 0x80000000) == 0)
    {
      /* was an 11-bit CAN message received that matches? */
      if ( (canHandle.pRxMsg->StdId == rxMsgId) &&
 800034a:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <CanReceivePacket+0x48>)
 800034c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	2a04      	cmp	r2, #4
 8000352:	d001      	beq.n	8000358 <CanReceivePacket+0x20>
  blt_bool result = BLT_FALSE;
 8000354:	2000      	movs	r0, #0
 8000356:	e011      	b.n	800037c <CanReceivePacket+0x44>
           (canHandle.pRxMsg->IDE == CAN_ID_STD) )
 8000358:	689b      	ldr	r3, [r3, #8]
      if ( (canHandle.pRxMsg->StdId == rxMsgId) &&
 800035a:	b97b      	cbnz	r3, 800037c <CanReceivePacket+0x44>

    /* only continue if a packet with a matching CAN identifier was received. */
    if (packetIdMatches == BLT_TRUE)
    {
      /* copy the received package data. */
      for (byteIdx = 0; byteIdx < canHandle.pRxMsg->DLC; byteIdx++)
 800035c:	2300      	movs	r3, #0
 800035e:	e004      	b.n	800036a <CanReceivePacket+0x32>
      {
        data[byteIdx] = canHandle.pRxMsg->Data[byteIdx];
 8000360:	441a      	add	r2, r3
 8000362:	7d12      	ldrb	r2, [r2, #20]
 8000364:	54e2      	strb	r2, [r4, r3]
      for (byteIdx = 0; byteIdx < canHandle.pRxMsg->DLC; byteIdx++)
 8000366:	3301      	adds	r3, #1
 8000368:	b2db      	uxtb	r3, r3
 800036a:	4a05      	ldr	r2, [pc, #20]	; (8000380 <CanReceivePacket+0x48>)
 800036c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800036e:	6911      	ldr	r1, [r2, #16]
 8000370:	428b      	cmp	r3, r1
 8000372:	d3f5      	bcc.n	8000360 <CanReceivePacket+0x28>
      }
      *len = canHandle.pRxMsg->DLC;
 8000374:	7029      	strb	r1, [r5, #0]
      /* update the return value to indicate that new packet data was received. */
      result = BLT_TRUE;
 8000376:	2001      	movs	r0, #1
 8000378:	e000      	b.n	800037c <CanReceivePacket+0x44>
  blt_bool result = BLT_FALSE;
 800037a:	2000      	movs	r0, #0
    }
  }
  /* Give the result back to the caller. */
  return result;
} /*** end of CanReceivePacket ***/
 800037c:	bd38      	pop	{r3, r4, r5, pc}
 800037e:	bf00      	nop
 8000380:	20000024 	.word	0x20000024

08000384 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8000384:	b508      	push	{r3, lr}
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals. */
  CpuIrqDisable();
 8000386:	f7ff ff1f 	bl	80001c8 <CpuIrqDisable>
} /*** end of CpuInit ***/
 800038a:	bd08      	pop	{r3, pc}

0800038c <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 800038c:	b510      	push	{r4, lr}
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 800038e:	f000 f9cd 	bl	800072c <NvmVerifyChecksum>
 8000392:	b900      	cbnz	r0, 8000396 <CpuStartUserProgram+0xa>
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 8000394:	bd10      	pop	{r4, pc}
  ComFree();
 8000396:	f000 fa91 	bl	80008bc <ComFree>
  TimerReset();
 800039a:	f000 f9db 	bl	8000754 <TimerReset>
  HAL_DeInit();
 800039e:	f000 fe31 	bl	8001004 <HAL_DeInit>
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 80003a2:	f000 f9c7 	bl	8000734 <NvmGetUserProgBaseAddress>
 80003a6:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80003aa:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 80003ae:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <CpuStartUserProgram+0x34>)
 80003b0:	6098      	str	r0, [r3, #8]
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 80003b2:	f000 f9bf 	bl	8000734 <NvmGetUserProgBaseAddress>
 80003b6:	6844      	ldr	r4, [r0, #4]
  CpuIrqEnable();
 80003b8:	f7ff ff08 	bl	80001cc <CpuIrqEnable>
  pProgResetHandler();
 80003bc:	47a0      	blx	r4
 80003be:	e7e9      	b.n	8000394 <CpuStartUserProgram+0x8>
 80003c0:	e000ed00 	.word	0xe000ed00

080003c4 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 80003c4:	b570      	push	{r4, r5, r6, lr}
  /* set casted pointers */
  from = (blt_int8u *)src;
  to = (blt_int8u *)dest;

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 80003c6:	e008      	b.n	80003da <CpuMemCopy+0x16>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 80003c8:	1c4d      	adds	r5, r1, #1
 80003ca:	1c46      	adds	r6, r0, #1
 80003cc:	780b      	ldrb	r3, [r1, #0]
 80003ce:	7003      	strb	r3, [r0, #0]
    /* keep the watchdog happy */
    CopService();
 80003d0:	f000 fab4 	bl	800093c <CopService>
    *to++ = *from++;
 80003d4:	4630      	mov	r0, r6
 80003d6:	4629      	mov	r1, r5
  while (len-- > 0)
 80003d8:	4622      	mov	r2, r4
 80003da:	1e53      	subs	r3, r2, #1
 80003dc:	b29c      	uxth	r4, r3
 80003de:	2a00      	cmp	r2, #0
 80003e0:	d1f2      	bne.n	80003c8 <CpuMemCopy+0x4>
  }
} /*** end of CpuMemCopy ***/
 80003e2:	bd70      	pop	{r4, r5, r6, pc}

080003e4 <FlashInitBlock>:
** \param     address Base address of the block data.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashInitBlock(tFlashBlockInfo *block, blt_addr address)
{
 80003e4:	b508      	push	{r3, lr}
  /* check address alignment */
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 80003e6:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80003ea:	b953      	cbnz	r3, 8000402 <FlashInitBlock+0x1e>
  {
    return BLT_FALSE;
  }
  /* make sure that we are initializing a new block and not the same one */
  if (block->base_addr == address)
 80003ec:	6803      	ldr	r3, [r0, #0]
 80003ee:	428b      	cmp	r3, r1
 80003f0:	d009      	beq.n	8000406 <FlashInitBlock+0x22>
  {
    /* block already initialized, so nothing to do */
    return BLT_TRUE;
  }
  /* set the base address and copies the current data from flash */
  block->base_addr = address;
 80003f2:	f840 1b04 	str.w	r1, [r0], #4
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 80003f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003fa:	f7ff ffe3 	bl	80003c4 <CpuMemCopy>
  return BLT_TRUE;
 80003fe:	2001      	movs	r0, #1
 8000400:	e000      	b.n	8000404 <FlashInitBlock+0x20>
    return BLT_FALSE;
 8000402:	2000      	movs	r0, #0
} /*** end of FlashInitBlock ***/
 8000404:	bd08      	pop	{r3, pc}
    return BLT_TRUE;
 8000406:	2001      	movs	r0, #1
 8000408:	e7fc      	b.n	8000404 <FlashInitBlock+0x20>

0800040a <FlashWriteBlock>:
** \param     block   Pointer to flash block info structure to operate on.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashWriteBlock(tFlashBlockInfo *block)
{
 800040a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800040e:	4607      	mov	r7, r0
    }
  }
#endif

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 8000410:	f001 fa40 	bl	8001894 <HAL_FLASH_Unlock>

  /* program all words in the block one by one */
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000414:	2400      	movs	r4, #0
 8000416:	2c7f      	cmp	r4, #127	; 0x7f
 8000418:	d814      	bhi.n	8000444 <FlashWriteBlock+0x3a>
  {
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 800041a:	683e      	ldr	r6, [r7, #0]
 800041c:	00a3      	lsls	r3, r4, #2
 800041e:	eb06 0803 	add.w	r8, r6, r3
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8000422:	443b      	add	r3, r7
 8000424:	685d      	ldr	r5, [r3, #4]
    /* keep the watchdog happy */
    CopService();
 8000426:	f000 fa89 	bl	800093c <CopService>
    /* program the word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 800042a:	462a      	mov	r2, r5
 800042c:	2300      	movs	r3, #0
 800042e:	4641      	mov	r1, r8
 8000430:	2002      	movs	r0, #2
 8000432:	f001 fa7f 	bl	8001934 <HAL_FLASH_Program>
 8000436:	b938      	cbnz	r0, 8000448 <FlashWriteBlock+0x3e>
    {
      result = BLT_FALSE;
      break;
    }
    /* verify that the written data is actually there */
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8000438:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800043c:	42ab      	cmp	r3, r5
 800043e:	d109      	bne.n	8000454 <FlashWriteBlock+0x4a>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000440:	3401      	adds	r4, #1
 8000442:	e7e8      	b.n	8000416 <FlashWriteBlock+0xc>
  blt_bool   result = BLT_TRUE;
 8000444:	2401      	movs	r4, #1
 8000446:	e000      	b.n	800044a <FlashWriteBlock+0x40>
      result = BLT_FALSE;
 8000448:	2400      	movs	r4, #0
      break;
    }
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 800044a:	f001 fa37 	bl	80018bc <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
} /*** end of FlashWriteBlock ***/
 800044e:	4620      	mov	r0, r4
 8000450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      result = BLT_FALSE;
 8000454:	2400      	movs	r4, #0
 8000456:	e7f8      	b.n	800044a <FlashWriteBlock+0x40>

08000458 <FlashSwitchBlock>:
{
 8000458:	b538      	push	{r3, r4, r5, lr}
 800045a:	460d      	mov	r5, r1
  if (block == &bootBlockInfo)
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <FlashSwitchBlock+0x38>)
 800045e:	4298      	cmp	r0, r3
 8000460:	d011      	beq.n	8000486 <FlashSwitchBlock+0x2e>
 8000462:	4604      	mov	r4, r0
  else if (base_addr == flashLayout[0].sector_start)
 8000464:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <FlashSwitchBlock+0x3c>)
 8000466:	4299      	cmp	r1, r3
 8000468:	d107      	bne.n	800047a <FlashSwitchBlock+0x22>
    block = &bootBlockInfo;
 800046a:	4c09      	ldr	r4, [pc, #36]	; (8000490 <FlashSwitchBlock+0x38>)
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 800046c:	4629      	mov	r1, r5
 800046e:	4620      	mov	r0, r4
 8000470:	f7ff ffb8 	bl	80003e4 <FlashInitBlock>
 8000474:	b148      	cbz	r0, 800048a <FlashSwitchBlock+0x32>
} /*** end of FlashSwitchBlock ***/
 8000476:	4620      	mov	r0, r4
 8000478:	bd38      	pop	{r3, r4, r5, pc}
    if (FlashWriteBlock(block) == BLT_FALSE)
 800047a:	f7ff ffc6 	bl	800040a <FlashWriteBlock>
 800047e:	2800      	cmp	r0, #0
 8000480:	d1f4      	bne.n	800046c <FlashSwitchBlock+0x14>
      return BLT_NULL;
 8000482:	2400      	movs	r4, #0
 8000484:	e7f7      	b.n	8000476 <FlashSwitchBlock+0x1e>
    block = &blockInfo;
 8000486:	4c04      	ldr	r4, [pc, #16]	; (8000498 <FlashSwitchBlock+0x40>)
 8000488:	e7f0      	b.n	800046c <FlashSwitchBlock+0x14>
    return BLT_NULL;
 800048a:	2400      	movs	r4, #0
 800048c:	e7f3      	b.n	8000476 <FlashSwitchBlock+0x1e>
 800048e:	bf00      	nop
 8000490:	200002ac 	.word	0x200002ac
 8000494:	08004000 	.word	0x08004000
 8000498:	200000a8 	.word	0x200000a8

0800049c <FlashAddToBlock>:
{
 800049c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004a0:	4606      	mov	r6, r0
 80004a2:	460c      	mov	r4, r1
 80004a4:	4617      	mov	r7, r2
 80004a6:	461d      	mov	r5, r3
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 80004a8:	f421 78ff 	bic.w	r8, r1, #510	; 0x1fe
 80004ac:	f028 0801 	bic.w	r8, r8, #1
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 80004b0:	6803      	ldr	r3, [r0, #0]
 80004b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80004b6:	d007      	beq.n	80004c8 <FlashAddToBlock+0x2c>
  if (block->base_addr != current_base_addr)
 80004b8:	6833      	ldr	r3, [r6, #0]
 80004ba:	4543      	cmp	r3, r8
 80004bc:	d10b      	bne.n	80004d6 <FlashAddToBlock+0x3a>
  dst = &(block->data[address - block->base_addr]);
 80004be:	6833      	ldr	r3, [r6, #0]
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	4434      	add	r4, r6
 80004c4:	3404      	adds	r4, #4
 80004c6:	e015      	b.n	80004f4 <FlashAddToBlock+0x58>
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 80004c8:	4641      	mov	r1, r8
 80004ca:	f7ff ff8b 	bl	80003e4 <FlashInitBlock>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2800      	cmp	r0, #0
 80004d2:	d1f1      	bne.n	80004b8 <FlashAddToBlock+0x1c>
 80004d4:	e01f      	b.n	8000516 <FlashAddToBlock+0x7a>
    block = FlashSwitchBlock(block, current_base_addr);
 80004d6:	4641      	mov	r1, r8
 80004d8:	4630      	mov	r0, r6
 80004da:	f7ff ffbd 	bl	8000458 <FlashSwitchBlock>
    if (block == BLT_NULL)
 80004de:	4606      	mov	r6, r0
 80004e0:	2800      	cmp	r0, #0
 80004e2:	d1ec      	bne.n	80004be <FlashAddToBlock+0x22>
      return BLT_FALSE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	e016      	b.n	8000516 <FlashAddToBlock+0x7a>
    *dst = *src;
 80004e8:	f817 3b01 	ldrb.w	r3, [r7], #1
 80004ec:	f804 3b01 	strb.w	r3, [r4], #1
  while (len > 0);
 80004f0:	3d01      	subs	r5, #1
 80004f2:	d00f      	beq.n	8000514 <FlashAddToBlock+0x78>
    CopService();
 80004f4:	f000 fa22 	bl	800093c <CopService>
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 80004f8:	1d33      	adds	r3, r6, #4
 80004fa:	1ae3      	subs	r3, r4, r3
 80004fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000500:	d3f2      	bcc.n	80004e8 <FlashAddToBlock+0x4c>
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8000502:	f508 7100 	add.w	r1, r8, #512	; 0x200
 8000506:	4630      	mov	r0, r6
 8000508:	f7ff ffa6 	bl	8000458 <FlashSwitchBlock>
      if (block == BLT_NULL)
 800050c:	4606      	mov	r6, r0
 800050e:	b128      	cbz	r0, 800051c <FlashAddToBlock+0x80>
      dst = &(block->data[0]);
 8000510:	1d04      	adds	r4, r0, #4
 8000512:	e7e9      	b.n	80004e8 <FlashAddToBlock+0x4c>
  return BLT_TRUE;
 8000514:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 8000516:	4618      	mov	r0, r3
 8000518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLT_FALSE;
 800051c:	2300      	movs	r3, #0
 800051e:	e7fa      	b.n	8000516 <FlashAddToBlock+0x7a>

08000520 <FlashInit>:
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8000520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000524:	4a02      	ldr	r2, [pc, #8]	; (8000530 <FlashInit+0x10>)
 8000526:	6013      	str	r3, [r2, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8000528:	4a02      	ldr	r2, [pc, #8]	; (8000534 <FlashInit+0x14>)
 800052a:	6013      	str	r3, [r2, #0]
} /*** end of FlashInit ***/
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	200000a8 	.word	0x200000a8
 8000534:	200002ac 	.word	0x200002ac

08000538 <FlashWrite>:
{
 8000538:	b510      	push	{r4, lr}
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 800053a:	1e4b      	subs	r3, r1, #1
 800053c:	4c11      	ldr	r4, [pc, #68]	; (8000584 <FlashWrite+0x4c>)
 800053e:	1a24      	subs	r4, r4, r0
 8000540:	42a3      	cmp	r3, r4
 8000542:	d818      	bhi.n	8000576 <FlashWrite+0x3e>
  if ((addr < FLASH_START_ADDRESS) || ((addr+len-1) > FLASH_END_ADDRESS))
 8000544:	4b10      	ldr	r3, [pc, #64]	; (8000588 <FlashWrite+0x50>)
 8000546:	4298      	cmp	r0, r3
 8000548:	d917      	bls.n	800057a <FlashWrite+0x42>
 800054a:	180b      	adds	r3, r1, r0
 800054c:	3b01      	subs	r3, #1
 800054e:	4c0d      	ldr	r4, [pc, #52]	; (8000584 <FlashWrite+0x4c>)
 8000550:	42a3      	cmp	r3, r4
 8000552:	d814      	bhi.n	800057e <FlashWrite+0x46>
 8000554:	460b      	mov	r3, r1
 8000556:	4601      	mov	r1, r0
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8000558:	f420 70ff 	bic.w	r0, r0, #510	; 0x1fe
 800055c:	f020 0001 	bic.w	r0, r0, #1
  if (base_addr == flashLayout[0].sector_start)
 8000560:	4c0a      	ldr	r4, [pc, #40]	; (800058c <FlashWrite+0x54>)
 8000562:	42a0      	cmp	r0, r4
 8000564:	d003      	beq.n	800056e <FlashWrite+0x36>
  return FlashAddToBlock(&blockInfo, addr, data, len);
 8000566:	480a      	ldr	r0, [pc, #40]	; (8000590 <FlashWrite+0x58>)
 8000568:	f7ff ff98 	bl	800049c <FlashAddToBlock>
 800056c:	e004      	b.n	8000578 <FlashWrite+0x40>
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 800056e:	4809      	ldr	r0, [pc, #36]	; (8000594 <FlashWrite+0x5c>)
 8000570:	f7ff ff94 	bl	800049c <FlashAddToBlock>
 8000574:	e000      	b.n	8000578 <FlashWrite+0x40>
    return BLT_FALSE;
 8000576:	2000      	movs	r0, #0
} /*** end of FlashWrite ***/
 8000578:	bd10      	pop	{r4, pc}
    return BLT_FALSE;
 800057a:	2000      	movs	r0, #0
 800057c:	e7fc      	b.n	8000578 <FlashWrite+0x40>
 800057e:	2000      	movs	r0, #0
 8000580:	e7fa      	b.n	8000578 <FlashWrite+0x40>
 8000582:	bf00      	nop
 8000584:	0803ffff 	.word	0x0803ffff
 8000588:	08003fff 	.word	0x08003fff
 800058c:	08004000 	.word	0x08004000
 8000590:	200000a8 	.word	0x200000a8
 8000594:	200002ac 	.word	0x200002ac

08000598 <FlashErase>:
{
 8000598:	b530      	push	{r4, r5, lr}
 800059a:	b085      	sub	sp, #20
  blt_int32u pageError = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	9303      	str	r3, [sp, #12]
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80005a0:	1e4a      	subs	r2, r1, #1
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <FlashErase+0x88>)
 80005a4:	1a1b      	subs	r3, r3, r0
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d831      	bhi.n	800060e <FlashErase+0x76>
  erase_base_addr = (addr/FLASH_ERASE_SECTOR_SIZE)*FLASH_ERASE_SECTOR_SIZE;
 80005aa:	f420 63ff 	bic.w	r3, r0, #2040	; 0x7f8
 80005ae:	f023 0307 	bic.w	r3, r3, #7
  if ((erase_base_addr < FLASH_START_ADDRESS) || ((addr+len-1) > FLASH_END_ADDRESS))
 80005b2:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <FlashErase+0x8c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d92e      	bls.n	8000616 <FlashErase+0x7e>
 80005b8:	180a      	adds	r2, r1, r0
 80005ba:	3a01      	subs	r2, #1
 80005bc:	4c18      	ldr	r4, [pc, #96]	; (8000620 <FlashErase+0x88>)
 80005be:	42a2      	cmp	r2, r4
 80005c0:	d82b      	bhi.n	800061a <FlashErase+0x82>
  total_erase_len = len + (addr - erase_base_addr);
 80005c2:	1ac0      	subs	r0, r0, r3
 80005c4:	4401      	add	r1, r0
  nr_of_erase_sectors = (blt_int16u)(total_erase_len / FLASH_ERASE_SECTOR_SIZE);
 80005c6:	f3c1 25cf 	ubfx	r5, r1, #11, #16
  if ((total_erase_len % FLASH_ERASE_SECTOR_SIZE) > 0)
 80005ca:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80005ce:	b109      	cbz	r1, 80005d4 <FlashErase+0x3c>
    nr_of_erase_sectors++;
 80005d0:	3501      	adds	r5, #1
 80005d2:	b2ad      	uxth	r5, r5
  eraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80005d4:	2400      	movs	r4, #0
 80005d6:	9400      	str	r4, [sp, #0]
  eraseInitStruct.PageAddress = erase_base_addr;
 80005d8:	9301      	str	r3, [sp, #4]
  eraseInitStruct.NbPages     = 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	9302      	str	r3, [sp, #8]
  HAL_FLASH_Unlock();
 80005de:	f001 f959 	bl	8001894 <HAL_FLASH_Unlock>
  for (sector_idx = 0; sector_idx < nr_of_erase_sectors; sector_idx++)
 80005e2:	42a5      	cmp	r5, r4
 80005e4:	d90d      	bls.n	8000602 <FlashErase+0x6a>
    CopService();
 80005e6:	f000 f9a9 	bl	800093c <CopService>
    if (HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&pageError) != HAL_OK)
 80005ea:	a903      	add	r1, sp, #12
 80005ec:	4668      	mov	r0, sp
 80005ee:	f001 fa13 	bl	8001a18 <HAL_FLASHEx_Erase>
 80005f2:	b950      	cbnz	r0, 800060a <FlashErase+0x72>
    eraseInitStruct.PageAddress += FLASH_ERASE_SECTOR_SIZE;
 80005f4:	9b01      	ldr	r3, [sp, #4]
 80005f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80005fa:	9301      	str	r3, [sp, #4]
  for (sector_idx = 0; sector_idx < nr_of_erase_sectors; sector_idx++)
 80005fc:	3401      	adds	r4, #1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	e7ef      	b.n	80005e2 <FlashErase+0x4a>
  blt_bool result = BLT_TRUE;
 8000602:	2401      	movs	r4, #1
  HAL_FLASH_Lock();
 8000604:	f001 f95a 	bl	80018bc <HAL_FLASH_Lock>
  return result;
 8000608:	e002      	b.n	8000610 <FlashErase+0x78>
      result = BLT_FALSE;
 800060a:	2400      	movs	r4, #0
 800060c:	e7fa      	b.n	8000604 <FlashErase+0x6c>
    return BLT_FALSE;
 800060e:	2400      	movs	r4, #0
} /*** end of FlashErase ***/
 8000610:	4620      	mov	r0, r4
 8000612:	b005      	add	sp, #20
 8000614:	bd30      	pop	{r4, r5, pc}
    return BLT_FALSE;
 8000616:	2400      	movs	r4, #0
 8000618:	e7fa      	b.n	8000610 <FlashErase+0x78>
 800061a:	2400      	movs	r4, #0
 800061c:	e7f8      	b.n	8000610 <FlashErase+0x78>
 800061e:	bf00      	nop
 8000620:	0803ffff 	.word	0x0803ffff
 8000624:	08003fff 	.word	0x08003fff

08000628 <FlashWriteChecksum>:
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <FlashWriteChecksum+0x44>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000630:	d01a      	beq.n	8000668 <FlashWriteChecksum+0x40>
{
 8000632:	b500      	push	{lr}
 8000634:	b083      	sub	sp, #12
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8000636:	4a0d      	ldr	r2, [pc, #52]	; (800066c <FlashWriteChecksum+0x44>)
 8000638:	6853      	ldr	r3, [r2, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 800063a:	6891      	ldr	r1, [r2, #8]
 800063c:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 800063e:	68d1      	ldr	r1, [r2, #12]
 8000640:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 8000642:	6911      	ldr	r1, [r2, #16]
 8000644:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 8000646:	6951      	ldr	r1, [r2, #20]
 8000648:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 800064a:	6991      	ldr	r1, [r2, #24]
 800064c:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 800064e:	69d2      	ldr	r2, [r2, #28]
 8000650:	4413      	add	r3, r2
  signature_checksum += 1; /* two's complement */
 8000652:	425b      	negs	r3, r3
 8000654:	aa02      	add	r2, sp, #8
 8000656:	f842 3d04 	str.w	r3, [r2, #-4]!
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 800065a:	2104      	movs	r1, #4
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <FlashWriteChecksum+0x48>)
 800065e:	f7ff ff6b 	bl	8000538 <FlashWrite>
} /*** end of FlashWriteChecksum ***/
 8000662:	b003      	add	sp, #12
 8000664:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLT_TRUE;
 8000668:	2001      	movs	r0, #1
} /*** end of FlashWriteChecksum ***/
 800066a:	4770      	bx	lr
 800066c:	200002ac 	.word	0x200002ac
 8000670:	08004188 	.word	0x08004188

08000674 <FlashVerifyChecksum>:
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <FlashVerifyChecksum+0x38>)
 8000676:	681b      	ldr	r3, [r3, #0]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <FlashVerifyChecksum+0x3c>)
 800067a:	6812      	ldr	r2, [r2, #0]
 800067c:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <FlashVerifyChecksum+0x40>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <FlashVerifyChecksum+0x44>)
 8000686:	6812      	ldr	r2, [r2, #0]
 8000688:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 800068a:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <FlashVerifyChecksum+0x48>)
 800068c:	6812      	ldr	r2, [r2, #0]
 800068e:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <FlashVerifyChecksum+0x4c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <FlashVerifyChecksum+0x50>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 800069c:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <FlashVerifyChecksum+0x54>)
 800069e:	6812      	ldr	r2, [r2, #0]
  if (signature_checksum == 0)
 80006a0:	42da      	cmn	r2, r3
 80006a2:	d001      	beq.n	80006a8 <FlashVerifyChecksum+0x34>
  return BLT_FALSE;
 80006a4:	2000      	movs	r0, #0
} /*** end of FlashVerifyChecksum ***/
 80006a6:	4770      	bx	lr
    return BLT_TRUE;
 80006a8:	2001      	movs	r0, #1
 80006aa:	4770      	bx	lr
 80006ac:	08004000 	.word	0x08004000
 80006b0:	08004004 	.word	0x08004004
 80006b4:	08004008 	.word	0x08004008
 80006b8:	0800400c 	.word	0x0800400c
 80006bc:	08004010 	.word	0x08004010
 80006c0:	08004014 	.word	0x08004014
 80006c4:	08004018 	.word	0x08004018
 80006c8:	08004188 	.word	0x08004188

080006cc <FlashDone>:
{
 80006cc:	b508      	push	{r3, lr}
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <FlashDone+0x38>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006d6:	d10b      	bne.n	80006f0 <FlashDone+0x24>
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 80006d8:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <FlashDone+0x3c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006e0:	d00d      	beq.n	80006fe <FlashDone+0x32>
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 80006e2:	4809      	ldr	r0, [pc, #36]	; (8000708 <FlashDone+0x3c>)
 80006e4:	f7ff fe91 	bl	800040a <FlashWriteBlock>
 80006e8:	4603      	mov	r3, r0
 80006ea:	b148      	cbz	r0, 8000700 <FlashDone+0x34>
  return BLT_TRUE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	e007      	b.n	8000700 <FlashDone+0x34>
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <FlashDone+0x38>)
 80006f2:	f7ff fe8a 	bl	800040a <FlashWriteBlock>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2800      	cmp	r0, #0
 80006fa:	d1ed      	bne.n	80006d8 <FlashDone+0xc>
 80006fc:	e000      	b.n	8000700 <FlashDone+0x34>
  return BLT_TRUE;
 80006fe:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 8000700:	4618      	mov	r0, r3
 8000702:	bd08      	pop	{r3, pc}
 8000704:	200002ac 	.word	0x200002ac
 8000708:	200000a8 	.word	0x200000a8

0800070c <FlashGetUserProgBaseAddress>:
} /*** end of FlashGetUserProgBaseAddress ***/
 800070c:	4800      	ldr	r0, [pc, #0]	; (8000710 <FlashGetUserProgBaseAddress+0x4>)
 800070e:	4770      	bx	lr
 8000710:	08004000 	.word	0x08004000

08000714 <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8000714:	b508      	push	{r3, lr}
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 8000716:	f7ff ff03 	bl	8000520 <FlashInit>
} /*** end of NvmInit ***/
 800071a:	bd08      	pop	{r3, pc}

0800071c <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 800071c:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 800071e:	f7ff ff0b 	bl	8000538 <FlashWrite>
} /*** end of NvmWrite ***/
 8000722:	bd08      	pop	{r3, pc}

08000724 <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 8000724:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8000726:	f7ff ff37 	bl	8000598 <FlashErase>
} /*** end of NvmErase ***/
 800072a:	bd08      	pop	{r3, pc}

0800072c <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 800072c:	b508      	push	{r3, lr}
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 800072e:	f7ff ffa1 	bl	8000674 <FlashVerifyChecksum>
#endif
} /*** end of NvmVerifyChecksum ***/
 8000732:	bd08      	pop	{r3, pc}

08000734 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8000734:	b508      	push	{r3, lr}
  return FlashGetUserProgBaseAddress();
 8000736:	f7ff ffe9 	bl	800070c <FlashGetUserProgBaseAddress>
} /*** end of NvmGetUserProgBaseAddress ***/
 800073a:	bd08      	pop	{r3, pc}

0800073c <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 800073c:	b508      	push	{r3, lr}
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 800073e:	f7ff ff73 	bl	8000628 <FlashWriteChecksum>
 8000742:	4603      	mov	r3, r0
 8000744:	b908      	cbnz	r0, 800074a <NvmDone+0xe>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
} /*** end of NvmDone ***/
 8000746:	4618      	mov	r0, r3
 8000748:	bd08      	pop	{r3, pc}
  return FlashDone();
 800074a:	f7ff ffbf 	bl	80006cc <FlashDone>
 800074e:	4603      	mov	r3, r0
 8000750:	e7f9      	b.n	8000746 <NvmDone+0xa>
	...

08000754 <TimerReset>:
**
****************************************************************************************/
void TimerReset(void)
{
  /* Set the systick's status and control register back into the default reset value. */
  SysTick->CTRL = 0;
 8000754:	4b01      	ldr	r3, [pc, #4]	; (800075c <TimerReset+0x8>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
} /* end of TimerReset */
 800075a:	4770      	bx	lr
 800075c:	e000e010 	.word	0xe000e010

08000760 <TimerInit>:
{
 8000760:	b508      	push	{r3, lr}
  TimerReset();
 8000762:	f7ff fff7 	bl	8000754 <TimerReset>
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <TimerInit+0x1c>)
 8000768:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800076c:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8000772:	2105      	movs	r1, #5
 8000774:	6019      	str	r1, [r3, #0]
  millisecond_counter = 0;
 8000776:	4b02      	ldr	r3, [pc, #8]	; (8000780 <TimerInit+0x20>)
 8000778:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 800077a:	bd08      	pop	{r3, pc}
 800077c:	e000e010 	.word	0xe000e010
 8000780:	200004b0 	.word	0x200004b0

08000784 <TimerUpdate>:
**
****************************************************************************************/
void TimerUpdate(void)
{
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <TimerUpdate+0x14>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800078c:	d003      	beq.n	8000796 <TimerUpdate+0x12>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 800078e:	4a03      	ldr	r2, [pc, #12]	; (800079c <TimerUpdate+0x18>)
 8000790:	6813      	ldr	r3, [r2, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 8000796:	4770      	bx	lr
 8000798:	e000e010 	.word	0xe000e010
 800079c:	200004b0 	.word	0x200004b0

080007a0 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 80007a0:	b508      	push	{r3, lr}
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 80007a2:	f7ff ffef 	bl	8000784 <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
} /*** end of TimerGet ***/
 80007a6:	4b01      	ldr	r3, [pc, #4]	; (80007ac <TimerGet+0xc>)
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	bd08      	pop	{r3, pc}
 80007ac:	200004b0 	.word	0x200004b0

080007b0 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 80007b0:	b508      	push	{r3, lr}
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 80007b2:	f7ff fff5 	bl	80007a0 <TimerGet>
} /*** end of HAL_GetTick ***/
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <SysTick_Handler>:
**
****************************************************************************************/
void SysTick_Handler(void)
{
  /* Nothing to do here. */
} /*** end of SysTick_Handler ***/
 80007b8:	4770      	bx	lr

080007ba <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 80007ba:	b508      	push	{r3, lr}
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 80007bc:	f000 f8be 	bl	800093c <CopService>
 80007c0:	e7fc      	b.n	80007bc <AssertFailure+0x2>
	...

080007c4 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 80007c4:	b508      	push	{r3, lr}
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 80007c6:	f000 f8ad 	bl	8000924 <ComIsConnected>
 80007ca:	2801      	cmp	r0, #1
 80007cc:	d003      	beq.n	80007d6 <BackDoorCheck+0x12>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <BackDoorCheck+0x38>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d000      	beq.n	80007d8 <BackDoorCheck+0x14>
        CpuStartUserProgram();
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 80007d6:	bd08      	pop	{r3, pc}
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 80007d8:	f7ff ffe2 	bl	80007a0 <TimerGet>
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <BackDoorCheck+0x3c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a08      	ldr	r2, [pc, #32]	; (8000804 <BackDoorCheck+0x40>)
 80007e2:	6812      	ldr	r2, [r2, #0]
 80007e4:	4413      	add	r3, r2
 80007e6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80007ea:	4298      	cmp	r0, r3
 80007ec:	d3f3      	bcc.n	80007d6 <BackDoorCheck+0x12>
      backdoorOpen = BLT_FALSE;
 80007ee:	4b03      	ldr	r3, [pc, #12]	; (80007fc <BackDoorCheck+0x38>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
        CpuStartUserProgram();
 80007f4:	f7ff fdca 	bl	800038c <CpuStartUserProgram>
 80007f8:	e7ed      	b.n	80007d6 <BackDoorCheck+0x12>
 80007fa:	bf00      	nop
 80007fc:	200004b8 	.word	0x200004b8
 8000800:	200004b4 	.word	0x200004b4
 8000804:	200004bc 	.word	0x200004bc

08000808 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8000808:	b508      	push	{r3, lr}
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <BackDoorRestartTimer+0x18>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d000      	beq.n	8000814 <BackDoorRestartTimer+0xc>
  {
    backdoorOpenTime = TimerGet();
  }
} /*** end of BackDoorRestartTimer ***/
 8000812:	bd08      	pop	{r3, pc}
    backdoorOpenTime = TimerGet();
 8000814:	f7ff ffc4 	bl	80007a0 <TimerGet>
 8000818:	4b02      	ldr	r3, [pc, #8]	; (8000824 <BackDoorRestartTimer+0x1c>)
 800081a:	6018      	str	r0, [r3, #0]
} /*** end of BackDoorRestartTimer ***/
 800081c:	e7f9      	b.n	8000812 <BackDoorRestartTimer+0xa>
 800081e:	bf00      	nop
 8000820:	200004b8 	.word	0x200004b8
 8000824:	200004bc 	.word	0x200004bc

08000828 <BackDoorInit>:
{
 8000828:	b508      	push	{r3, lr}
  backdoorOpen = BLT_TRUE;
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <BackDoorInit+0x14>)
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 8000830:	f7ff ffea 	bl	8000808 <BackDoorRestartTimer>
  BackDoorCheck();
 8000834:	f7ff ffc6 	bl	80007c4 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8000838:	bd08      	pop	{r3, pc}
 800083a:	bf00      	nop
 800083c:	200004b8 	.word	0x200004b8

08000840 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8000840:	b508      	push	{r3, lr}
  /* initialize the CPU */
  CpuInit();
 8000842:	f7ff fd9f 	bl	8000384 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8000846:	f000 f875 	bl	8000934 <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 800084a:	f7ff ff89 	bl	8000760 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 800084e:	f7ff ff61 	bl	8000714 <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8000852:	f000 f80d 	bl	8000870 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 8000856:	f7ff ffe7 	bl	8000828 <BackDoorInit>
} /*** end of BootInit ***/
 800085a:	bd08      	pop	{r3, pc}

0800085c <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 800085c:	b508      	push	{r3, lr}
  /* service the watchdog */
  CopService();
 800085e:	f000 f86d 	bl	800093c <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8000862:	f7ff ff8f 	bl	8000784 <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 8000866:	f000 f80f 	bl	8000888 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 800086a:	f7ff ffab 	bl	80007c4 <BackDoorCheck>
} /*** end of BootTask ***/
 800086e:	bd08      	pop	{r3, pc}

08000870 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8000870:	b508      	push	{r3, lr}
  /* initialize the XCP communication protocol */
  XcpInit();
 8000872:	f000 f9d1 	bl	8000c18 <XcpInit>
#if (BOOT_COM_CAN_ENABLE > 0)
  /* initialize the CAN controller */
  CanInit();
 8000876:	f7ff fce7 	bl	8000248 <CanInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
 800087a:	4b02      	ldr	r3, [pc, #8]	; (8000884 <ComInit+0x14>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 8000880:	bd08      	pop	{r3, pc}
 8000882:	bf00      	nop
 8000884:	20000000 	.word	0x20000000

08000888 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 8000888:	b500      	push	{lr}
 800088a:	b083      	sub	sp, #12
  blt_int8u xcpPacketLen;
  /* make xcpCtoReqPacket static for runtime efficiency */
  static blt_int8u xcpCtoReqPacket[BOOT_COM_RX_MAX_DATA];

#if (BOOT_COM_CAN_ENABLE > 0)
  if (CanReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 800088c:	f10d 0107 	add.w	r1, sp, #7
 8000890:	4808      	ldr	r0, [pc, #32]	; (80008b4 <ComTask+0x2c>)
 8000892:	f7ff fd51 	bl	8000338 <CanReceivePacket>
 8000896:	2801      	cmp	r0, #1
 8000898:	d002      	beq.n	80008a0 <ComTask+0x18>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 800089a:	b003      	add	sp, #12
 800089c:	f85d fb04 	ldr.w	pc, [sp], #4
    comActiveInterface = COM_IF_CAN;
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <ComTask+0x30>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 80008a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80008aa:	4802      	ldr	r0, [pc, #8]	; (80008b4 <ComTask+0x2c>)
 80008ac:	f000 f9d4 	bl	8000c58 <XcpPacketReceived>
} /*** end of ComTask ***/
 80008b0:	e7f3      	b.n	800089a <ComTask+0x12>
 80008b2:	bf00      	nop
 80008b4:	200004c0 	.word	0x200004c0
 80008b8:	20000000 	.word	0x20000000

080008bc <ComFree>:
{
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 80008bc:	4770      	bx	lr
	...

080008c0 <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 80008c0:	b508      	push	{r3, lr}
#if (BOOT_COM_CAN_ENABLE > 0)
  /* transmit the packet. note that len is limited to 8 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_CAN)
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <ComTransmitPacket+0x18>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d002      	beq.n	80008d0 <ComTransmitPacket+0x10>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 80008ca:	f000 f9bd 	bl	8000c48 <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 80008ce:	bd08      	pop	{r3, pc}
    CanTransmitPacket(data, (blt_int8u)len);
 80008d0:	b2c9      	uxtb	r1, r1
 80008d2:	f7ff fd13 	bl	80002fc <CanTransmitPacket>
 80008d6:	e7f8      	b.n	80008ca <ComTransmitPacket+0xa>
 80008d8:	20000000 	.word	0x20000000

080008dc <ComGetActiveInterfaceMaxRxLen>:
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <ComGetActiveInterfaceMaxRxLen+0x20>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d005      	beq.n	80008f0 <ComGetActiveInterfaceMaxRxLen+0x14>
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d005      	beq.n	80008f4 <ComGetActiveInterfaceMaxRxLen+0x18>
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d005      	beq.n	80008f8 <ComGetActiveInterfaceMaxRxLen+0x1c>
  {
    case COM_IF_UART:
      result = BOOT_COM_UART_RX_MAX_DATA;
 80008ec:	2040      	movs	r0, #64	; 0x40
 80008ee:	4770      	bx	lr
    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
      break;

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 80008f0:	203f      	movs	r0, #63	; 0x3f
      break;
 80008f2:	4770      	bx	lr

    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
 80008f4:	2000      	movs	r0, #0
      break;
 80008f6:	4770      	bx	lr
      result = BOOT_COM_CAN_RX_MAX_DATA;
 80008f8:	2008      	movs	r0, #8
      result = BOOT_COM_RX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 80008fa:	4770      	bx	lr
 80008fc:	20000000 	.word	0x20000000

08000900 <ComGetActiveInterfaceMaxTxLen>:
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <ComGetActiveInterfaceMaxTxLen+0x20>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d005      	beq.n	8000914 <ComGetActiveInterfaceMaxTxLen+0x14>
 8000908:	2b03      	cmp	r3, #3
 800090a:	d005      	beq.n	8000918 <ComGetActiveInterfaceMaxTxLen+0x18>
 800090c:	2b01      	cmp	r3, #1
 800090e:	d005      	beq.n	800091c <ComGetActiveInterfaceMaxTxLen+0x1c>
  {
    case COM_IF_UART:
      result = BOOT_COM_UART_TX_MAX_DATA;
 8000910:	2040      	movs	r0, #64	; 0x40
 8000912:	4770      	bx	lr
    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
      break;

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 8000914:	203f      	movs	r0, #63	; 0x3f
      break;
 8000916:	4770      	bx	lr

    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
 8000918:	2000      	movs	r0, #0
      break;
 800091a:	4770      	bx	lr
      result = BOOT_COM_CAN_TX_MAX_DATA;
 800091c:	2008      	movs	r0, #8
      result = BOOT_COM_TX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 800091e:	4770      	bx	lr
 8000920:	20000000 	.word	0x20000000

08000924 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8000924:	b508      	push	{r3, lr}
  blt_bool result = BLT_FALSE;

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 8000926:	f000 f985 	bl	8000c34 <XcpIsConnected>
 800092a:	4603      	mov	r3, r0
 800092c:	b100      	cbz	r0, 8000930 <ComIsConnected+0xc>
  {
    result = BLT_TRUE;
 800092e:	2301      	movs	r3, #1
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
} /*** end of ComIsConnected ***/
 8000930:	4618      	mov	r0, r3
 8000932:	bd08      	pop	{r3, pc}

08000934 <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 8000934:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 8000936:	f000 fa01 	bl	8000d3c <CopInitHook>
#endif
} /*** end of CopInit ***/
 800093a:	bd08      	pop	{r3, pc}

0800093c <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 800093c:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 800093e:	f000 fa02 	bl	8000d46 <CopServiceHook>
#endif
} /*** end of CopService ***/
 8000942:	bd08      	pop	{r3, pc}

08000944 <XcpProtectResources>:
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
  xcpInfo.protection = 0;
 8000944:	4b01      	ldr	r3, [pc, #4]	; (800094c <XcpProtectResources+0x8>)
 8000946:	2200      	movs	r2, #0
 8000948:	705a      	strb	r2, [r3, #1]

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 800094a:	4770      	bx	lr
 800094c:	20000500 	.word	0x20000500

08000950 <XcpSetCtoError>:
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <XcpSetCtoError+0x10>)
 8000952:	22fe      	movs	r2, #254	; 0xfe
 8000954:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = error;
 8000956:	7118      	strb	r0, [r3, #4]
  xcpInfo.ctoLen = 2;
 8000958:	2202      	movs	r2, #2
 800095a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpSetCtoError ***/
 800095e:	4770      	bx	lr
 8000960:	20000500 	.word	0x20000500

08000964 <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 8000964:	b510      	push	{r4, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 8000966:	4c05      	ldr	r4, [pc, #20]	; (800097c <XcpCmdDisconnect+0x18>)
 8000968:	2300      	movs	r3, #0
 800096a:	7023      	strb	r3, [r4, #0]

  /* enable resource protection */
  XcpProtectResources();
 800096c:	f7ff ffea 	bl	8000944 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8000970:	23ff      	movs	r3, #255	; 0xff
 8000972:	70e3      	strb	r3, [r4, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8000974:	2301      	movs	r3, #1
 8000976:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdDisconnect ***/
 800097a:	bd10      	pop	{r4, pc}
 800097c:	20000500 	.word	0x20000500

08000980 <XcpCmdGetStatus>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <XcpCmdGetStatus+0x1c>)
 8000982:	22ff      	movs	r2, #255	; 0xff
 8000984:	70da      	strb	r2, [r3, #3]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 8000986:	2200      	movs	r2, #0
 8000988:	711a      	strb	r2, [r3, #4]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 800098a:	7859      	ldrb	r1, [r3, #1]
 800098c:	7159      	strb	r1, [r3, #5]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 800098e:	719a      	strb	r2, [r3, #6]
  xcpInfo.ctoData[4] = 0;
 8000990:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = 0;
 8000992:	721a      	strb	r2, [r3, #8]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 8000994:	2206      	movs	r2, #6
 8000996:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetStatus ***/
 800099a:	4770      	bx	lr
 800099c:	20000500 	.word	0x20000500

080009a0 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 80009a0:	b508      	push	{r3, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff ffd4 	bl	8000950 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 80009a8:	bd08      	pop	{r3, pc}
	...

080009ac <XcpCmdGetId>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <XcpCmdGetId+0x20>)
 80009ae:	22ff      	movs	r2, #255	; 0xff
 80009b0:	70da      	strb	r2, [r3, #3]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 80009b2:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <XcpCmdGetId+0x24>)
 80009b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 80009b6:	2200      	movs	r2, #0
 80009b8:	711a      	strb	r2, [r3, #4]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 80009ba:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[3] = 0;
 80009bc:	719a      	strb	r2, [r3, #6]

  /* store station id length (excl. null termination) for response packet */
  *(blt_int32u *)&xcpInfo.ctoData[4] = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 80009be:	2207      	movs	r2, #7
 80009c0:	f8c3 2007 	str.w	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 80009c4:	2208      	movs	r2, #8
 80009c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetId ***/
 80009ca:	4770      	bx	lr
 80009cc:	20000500 	.word	0x20000500
 80009d0:	08001f0c 	.word	0x08001f0c

080009d4 <XcpCmdSetMta>:
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <XcpCmdSetMta+0x14>)
 80009d6:	22ff      	movs	r2, #255	; 0xff
 80009d8:	70da      	strb	r2, [r3, #3]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = *(blt_int32u *)&data[4];
 80009da:	6842      	ldr	r2, [r0, #4]
 80009dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80009de:	2201      	movs	r2, #1
 80009e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdSetMta ***/
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000500 	.word	0x20000500

080009ec <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 80009ec:	b508      	push	{r3, lr}
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 80009ee:	2031      	movs	r0, #49	; 0x31
 80009f0:	f7ff ffae 	bl	8000950 <XcpSetCtoError>
  return;
} /*** end of XcpCmdProgramPrepare ***/
 80009f4:	bd08      	pop	{r3, pc}
	...

080009f8 <XcpCmdProgramStart>:
{
 80009f8:	b538      	push	{r3, r4, r5, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80009fa:	4c08      	ldr	r4, [pc, #32]	; (8000a1c <XcpCmdProgramStart+0x24>)
 80009fc:	23ff      	movs	r3, #255	; 0xff
 80009fe:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = 0;
 8000a00:	2500      	movs	r5, #0
 8000a02:	7125      	strb	r5, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8000a04:	7165      	strb	r5, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8000a06:	f7ff ff69 	bl	80008dc <ComGetActiveInterfaceMaxRxLen>
 8000a0a:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = 0;
 8000a0c:	71e5      	strb	r5, [r4, #7]
  xcpInfo.ctoData[5] = 0;
 8000a0e:	7225      	strb	r5, [r4, #8]
  xcpInfo.ctoData[6] = 0;
 8000a10:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoLen = 7;
 8000a12:	2307      	movs	r3, #7
 8000a14:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdProgramStart ***/
 8000a18:	bd38      	pop	{r3, r4, r5, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000500 	.word	0x20000500

08000a20 <XcpCmdConnect>:
{
 8000a20:	b538      	push	{r3, r4, r5, lr}
  XcpProtectResources();
 8000a22:	f7ff ff8f 	bl	8000944 <XcpProtectResources>
  xcpInfo.connected = 1;
 8000a26:	4c0e      	ldr	r4, [pc, #56]	; (8000a60 <XcpCmdConnect+0x40>)
 8000a28:	2501      	movs	r5, #1
 8000a2a:	7025      	strb	r5, [r4, #0]
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8000a2c:	23ff      	movs	r3, #255	; 0xff
 8000a2e:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 8000a30:	2310      	movs	r3, #16
 8000a32:	7123      	strb	r3, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8000a38:	f7ff ff50 	bl	80008dc <ComGetActiveInterfaceMaxRxLen>
 8000a3c:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 8000a3e:	f7ff ff5f 	bl	8000900 <ComGetActiveInterfaceMaxTxLen>
 8000a42:	71e0      	strb	r0, [r4, #7]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8000a44:	f7ff ff5c 	bl	8000900 <ComGetActiveInterfaceMaxTxLen>
 8000a48:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8000a4c:	7220      	strb	r0, [r4, #8]
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 8000a4e:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 8000a50:	72a5      	strb	r5, [r4, #10]
  xcpInfo.ctoLen = 8;
 8000a52:	2308      	movs	r3, #8
 8000a54:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  NvmInit();
 8000a58:	f7ff fe5c 	bl	8000714 <NvmInit>
} /*** end of XcpCmdConnect ***/
 8000a5c:	bd38      	pop	{r3, r4, r5, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000500 	.word	0x20000500

08000a64 <XcpCmdUpload>:
{
 8000a64:	b538      	push	{r3, r4, r5, lr}
 8000a66:	4605      	mov	r5, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8000a68:	7844      	ldrb	r4, [r0, #1]
 8000a6a:	f7ff ff37 	bl	80008dc <ComGetActiveInterfaceMaxRxLen>
 8000a6e:	3801      	subs	r0, #1
 8000a70:	4284      	cmp	r4, r0
 8000a72:	dc10      	bgt.n	8000a96 <XcpCmdUpload+0x32>
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8000a74:	4c0a      	ldr	r4, [pc, #40]	; (8000aa0 <XcpCmdUpload+0x3c>)
 8000a76:	786a      	ldrb	r2, [r5, #1]
 8000a78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000a7a:	1d20      	adds	r0, r4, #4
 8000a7c:	f7ff fca2 	bl	80003c4 <CpuMemCopy>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8000a80:	23ff      	movs	r3, #255	; 0xff
 8000a82:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta += data[1];
 8000a84:	786a      	ldrb	r2, [r5, #1]
 8000a86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000a88:	4413      	add	r3, r2
 8000a8a:	64a3      	str	r3, [r4, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 8000a8c:	786b      	ldrb	r3, [r5, #1]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdUpload ***/
 8000a94:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8000a96:	2022      	movs	r0, #34	; 0x22
 8000a98:	f7ff ff5a 	bl	8000950 <XcpSetCtoError>
    return;
 8000a9c:	e7fa      	b.n	8000a94 <XcpCmdUpload+0x30>
 8000a9e:	bf00      	nop
 8000aa0:	20000500 	.word	0x20000500

08000aa4 <XcpCmdShortUpload>:
{
 8000aa4:	b538      	push	{r3, r4, r5, lr}
 8000aa6:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8000aa8:	7845      	ldrb	r5, [r0, #1]
 8000aaa:	f7ff ff17 	bl	80008dc <ComGetActiveInterfaceMaxRxLen>
 8000aae:	3801      	subs	r0, #1
 8000ab0:	4285      	cmp	r5, r0
 8000ab2:	dc11      	bgt.n	8000ad8 <XcpCmdShortUpload+0x34>
  xcpInfo.mta = *(blt_int32u *)&data[4];
 8000ab4:	6861      	ldr	r1, [r4, #4]
 8000ab6:	4d0a      	ldr	r5, [pc, #40]	; (8000ae0 <XcpCmdShortUpload+0x3c>)
 8000ab8:	64a9      	str	r1, [r5, #72]	; 0x48
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8000aba:	7862      	ldrb	r2, [r4, #1]
 8000abc:	1d28      	adds	r0, r5, #4
 8000abe:	f7ff fc81 	bl	80003c4 <CpuMemCopy>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8000ac2:	23ff      	movs	r3, #255	; 0xff
 8000ac4:	70eb      	strb	r3, [r5, #3]
  xcpInfo.mta += data[1];
 8000ac6:	7862      	ldrb	r2, [r4, #1]
 8000ac8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000aca:	4413      	add	r3, r2
 8000acc:	64ab      	str	r3, [r5, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 8000ace:	7863      	ldrb	r3, [r4, #1]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
} /*** end of XcpCmdShortUpload ***/
 8000ad6:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8000ad8:	2022      	movs	r0, #34	; 0x22
 8000ada:	f7ff ff39 	bl	8000950 <XcpSetCtoError>
    return;
 8000ade:	e7fa      	b.n	8000ad6 <XcpCmdShortUpload+0x32>
 8000ae0:	20000500 	.word	0x20000500

08000ae4 <XcpComputeChecksum>:
{
 8000ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae6:	4605      	mov	r5, r0
 8000ae8:	4617      	mov	r7, r2
  blt_int8u cs = 0;
 8000aea:	2400      	movs	r4, #0
  while (length-- > 0)
 8000aec:	e006      	b.n	8000afc <XcpComputeChecksum+0x18>
    cs += *((blt_int8u *)(blt_addr)address);
 8000aee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000af2:	441c      	add	r4, r3
 8000af4:	b2e4      	uxtb	r4, r4
    CopService();
 8000af6:	f7ff ff21 	bl	800093c <CopService>
  while (length-- > 0)
 8000afa:	4631      	mov	r1, r6
 8000afc:	1e4e      	subs	r6, r1, #1
 8000afe:	2900      	cmp	r1, #0
 8000b00:	d1f5      	bne.n	8000aee <XcpComputeChecksum+0xa>
  *checksum = cs;
 8000b02:	603c      	str	r4, [r7, #0]
} /*** end of XcpComputeChecksum ***/
 8000b04:	2001      	movs	r0, #1
 8000b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b08 <XcpCmdBuildCheckSum>:
{
 8000b08:	b510      	push	{r4, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8000b0a:	4c08      	ldr	r4, [pc, #32]	; (8000b2c <XcpCmdBuildCheckSum+0x24>)
 8000b0c:	23ff      	movs	r3, #255	; 0xff
 8000b0e:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = XcpComputeChecksum(xcpInfo.mta, *(blt_int32u *)&data[4],
 8000b10:	1de2      	adds	r2, r4, #7
 8000b12:	6841      	ldr	r1, [r0, #4]
 8000b14:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000b16:	f7ff ffe5 	bl	8000ae4 <XcpComputeChecksum>
 8000b1a:	7120      	strb	r0, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = 0;
 8000b20:	71a3      	strb	r3, [r4, #6]
  xcpInfo.ctoLen = 8;
 8000b22:	2308      	movs	r3, #8
 8000b24:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdBuildCheckSum ***/
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000500 	.word	0x20000500

08000b30 <XcpCmdProgramMax>:
{
 8000b30:	b538      	push	{r3, r4, r5, lr}
 8000b32:	4605      	mov	r5, r0
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == 0)
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <XcpCmdProgramMax+0x3c>)
 8000b36:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8000b38:	f7ff fed0 	bl	80008dc <ComGetActiveInterfaceMaxRxLen>
 8000b3c:	1c6a      	adds	r2, r5, #1
 8000b3e:	1e41      	subs	r1, r0, #1
 8000b40:	4620      	mov	r0, r4
 8000b42:	f7ff fdeb 	bl	800071c <NvmWrite>
 8000b46:	b160      	cbz	r0, 8000b62 <XcpCmdProgramMax+0x32>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8000b48:	4c08      	ldr	r4, [pc, #32]	; (8000b6c <XcpCmdProgramMax+0x3c>)
 8000b4a:	23ff      	movs	r3, #255	; 0xff
 8000b4c:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8000b4e:	f7ff fec5 	bl	80008dc <ComGetActiveInterfaceMaxRxLen>
 8000b52:	3801      	subs	r0, #1
 8000b54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000b56:	4403      	add	r3, r0
 8000b58:	64a3      	str	r3, [r4, #72]	; 0x48
  xcpInfo.ctoLen = 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdProgramMax ***/
 8000b60:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 8000b62:	2031      	movs	r0, #49	; 0x31
 8000b64:	f7ff fef4 	bl	8000950 <XcpSetCtoError>
    return;
 8000b68:	e7fa      	b.n	8000b60 <XcpCmdProgramMax+0x30>
 8000b6a:	bf00      	nop
 8000b6c:	20000500 	.word	0x20000500

08000b70 <XcpCmdProgram>:
{
 8000b70:	b538      	push	{r3, r4, r5, lr}
 8000b72:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8000b74:	7845      	ldrb	r5, [r0, #1]
 8000b76:	f7ff feb1 	bl	80008dc <ComGetActiveInterfaceMaxRxLen>
 8000b7a:	3802      	subs	r0, #2
 8000b7c:	4285      	cmp	r5, r0
 8000b7e:	dc0e      	bgt.n	8000b9e <XcpCmdProgram+0x2e>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <XcpCmdProgram+0x58>)
 8000b82:	22ff      	movs	r2, #255	; 0xff
 8000b84:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 8000b86:	2201      	movs	r2, #1
 8000b88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (data[1] == 0)
 8000b8c:	7861      	ldrb	r1, [r4, #1]
 8000b8e:	b951      	cbnz	r1, 8000ba6 <XcpCmdProgram+0x36>
    if (NvmDone() == BLT_FALSE)
 8000b90:	f7ff fdd4 	bl	800073c <NvmDone>
 8000b94:	b930      	cbnz	r0, 8000ba4 <XcpCmdProgram+0x34>
      XcpSetCtoError(XCP_ERR_GENERIC);
 8000b96:	2031      	movs	r0, #49	; 0x31
 8000b98:	f7ff feda 	bl	8000950 <XcpSetCtoError>
 8000b9c:	e002      	b.n	8000ba4 <XcpCmdProgram+0x34>
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8000b9e:	2022      	movs	r0, #34	; 0x22
 8000ba0:	f7ff fed6 	bl	8000950 <XcpSetCtoError>
} /*** end of XcpCmdProgram ***/
 8000ba4:	bd38      	pop	{r3, r4, r5, pc}
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == 0)
 8000ba6:	1ca2      	adds	r2, r4, #2
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <XcpCmdProgram+0x58>)
 8000baa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8000bac:	f7ff fdb6 	bl	800071c <NvmWrite>
 8000bb0:	b128      	cbz	r0, 8000bbe <XcpCmdProgram+0x4e>
  xcpInfo.mta += data[1];
 8000bb2:	7861      	ldrb	r1, [r4, #1]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <XcpCmdProgram+0x58>)
 8000bb6:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8000bb8:	440b      	add	r3, r1
 8000bba:	6493      	str	r3, [r2, #72]	; 0x48
 8000bbc:	e7f2      	b.n	8000ba4 <XcpCmdProgram+0x34>
    XcpSetCtoError(XCP_ERR_GENERIC);
 8000bbe:	2031      	movs	r0, #49	; 0x31
 8000bc0:	f7ff fec6 	bl	8000950 <XcpSetCtoError>
    return;
 8000bc4:	e7ee      	b.n	8000ba4 <XcpCmdProgram+0x34>
 8000bc6:	bf00      	nop
 8000bc8:	20000500 	.word	0x20000500

08000bcc <XcpCmdProgramClear>:
{
 8000bcc:	b508      	push	{r3, lr}
  if (NvmErase((blt_addr)xcpInfo.mta, *(blt_int32u *)&data[4]) == 0)
 8000bce:	6841      	ldr	r1, [r0, #4]
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <XcpCmdProgramClear+0x24>)
 8000bd2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8000bd4:	f7ff fda6 	bl	8000724 <NvmErase>
 8000bd8:	b130      	cbz	r0, 8000be8 <XcpCmdProgramClear+0x1c>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <XcpCmdProgramClear+0x24>)
 8000bdc:	22ff      	movs	r2, #255	; 0xff
 8000bde:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 8000be0:	2201      	movs	r2, #1
 8000be2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramClear ***/
 8000be6:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 8000be8:	2031      	movs	r0, #49	; 0x31
 8000bea:	f7ff feb1 	bl	8000950 <XcpSetCtoError>
    return;
 8000bee:	e7fa      	b.n	8000be6 <XcpCmdProgramClear+0x1a>
 8000bf0:	20000500 	.word	0x20000500

08000bf4 <XcpCmdProgramReset>:
{
 8000bf4:	b508      	push	{r3, lr}
  CpuStartUserProgram();
 8000bf6:	f7ff fbc9 	bl	800038c <CpuStartUserProgram>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8000bfa:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <XcpCmdProgramReset+0x14>)
 8000bfc:	22ff      	movs	r2, #255	; 0xff
 8000bfe:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 8000c00:	2201      	movs	r2, #1
 8000c02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramReset ***/
 8000c06:	bd08      	pop	{r3, pc}
 8000c08:	20000500 	.word	0x20000500

08000c0c <XcpTransmitPacket>:
{
 8000c0c:	b508      	push	{r3, lr}
  ComTransmitPacket(data, len);
 8000c0e:	b289      	uxth	r1, r1
 8000c10:	f7ff fe56 	bl	80008c0 <ComTransmitPacket>
} /*** end of XcpTransmitPacket ***/
 8000c14:	bd08      	pop	{r3, pc}
	...

08000c18 <XcpInit>:
  xcpInfo.connected = 0;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <XcpInit+0x18>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
  xcpInfo.mta = 0;
 8000c1e:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoPending = 0;
 8000c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  xcpInfo.ctoLen = 0;
 8000c24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  xcpInfo.s_n_k_resource = 0;
 8000c28:	709a      	strb	r2, [r3, #2]
  xcpInfo.protection = 0;
 8000c2a:	705a      	strb	r2, [r3, #1]
} /*** end of XcpInit ***/
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000500 	.word	0x20000500

08000c34 <XcpIsConnected>:
  if (xcpInfo.connected == 0)
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <XcpIsConnected+0x10>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b10b      	cbz	r3, 8000c3e <XcpIsConnected+0xa>
  return BLT_TRUE;
 8000c3a:	2001      	movs	r0, #1
} /*** end of XcpIsConnected ***/
 8000c3c:	4770      	bx	lr
    return BLT_FALSE;
 8000c3e:	2000      	movs	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000500 	.word	0x20000500

08000c48 <XcpPacketTransmitted>:
  xcpInfo.ctoPending = 0;
 8000c48:	4b02      	ldr	r3, [pc, #8]	; (8000c54 <XcpPacketTransmitted+0xc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
} /*** end of XcpPacketTransmitted ***/
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000500 	.word	0x20000500

08000c58 <XcpPacketReceived>:
{
 8000c58:	b508      	push	{r3, lr}
  if (data[0] == XCP_CMD_CONNECT)
 8000c5a:	7803      	ldrb	r3, [r0, #0]
 8000c5c:	2bff      	cmp	r3, #255	; 0xff
 8000c5e:	d004      	beq.n	8000c6a <XcpPacketReceived+0x12>
  else if (xcpInfo.connected == 1)
 8000c60:	4a35      	ldr	r2, [pc, #212]	; (8000d38 <XcpPacketReceived+0xe0>)
 8000c62:	7812      	ldrb	r2, [r2, #0]
 8000c64:	2a01      	cmp	r2, #1
 8000c66:	d014      	beq.n	8000c92 <XcpPacketReceived+0x3a>
} /*** end of XcpPacketReceived ***/
 8000c68:	bd08      	pop	{r3, pc}
    XcpCmdConnect(data);
 8000c6a:	f7ff fed9 	bl	8000a20 <XcpCmdConnect>
  if (xcpInfo.ctoPending == 1)
 8000c6e:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <XcpPacketReceived+0xe0>)
 8000c70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d05a      	beq.n	8000d2e <XcpPacketReceived+0xd6>
  if (xcpInfo.ctoLen > 0)
 8000c78:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <XcpPacketReceived+0xe0>)
 8000c7a:	f9b3 1044 	ldrsh.w	r1, [r3, #68]	; 0x44
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	ddf2      	ble.n	8000c68 <XcpPacketReceived+0x10>
    xcpInfo.ctoPending = 1;
 8000c82:	4618      	mov	r0, r3
 8000c84:	2301      	movs	r3, #1
 8000c86:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 8000c8a:	3003      	adds	r0, #3
 8000c8c:	f7ff ffbe 	bl	8000c0c <XcpTransmitPacket>
 8000c90:	e7ea      	b.n	8000c68 <XcpPacketReceived+0x10>
    switch (data[0])
 8000c92:	3bc9      	subs	r3, #201	; 0xc9
 8000c94:	2b35      	cmp	r3, #53	; 0x35
 8000c96:	d846      	bhi.n	8000d26 <XcpPacketReceived+0xce>
 8000c98:	e8df f003 	tbb	[pc, r3]
 8000c9c:	42454533 	.word	0x42454533
 8000ca0:	363f4545 	.word	0x363f4545
 8000ca4:	4545393c 	.word	0x4545393c
 8000ca8:	45454545 	.word	0x45454545
 8000cac:	45454545 	.word	0x45454545
 8000cb0:	45454545 	.word	0x45454545
 8000cb4:	45454545 	.word	0x45454545
 8000cb8:	45454545 	.word	0x45454545
 8000cbc:	45454545 	.word	0x45454545
 8000cc0:	45454545 	.word	0x45454545
 8000cc4:	1e244545 	.word	0x1e244545
 8000cc8:	4545211b 	.word	0x4545211b
 8000ccc:	2a452745 	.word	0x2a452745
 8000cd0:	302d      	.short	0x302d
        XcpCmdUpload(data);
 8000cd2:	f7ff fec7 	bl	8000a64 <XcpCmdUpload>
        break;
 8000cd6:	e7ca      	b.n	8000c6e <XcpPacketReceived+0x16>
        XcpCmdShortUpload(data);
 8000cd8:	f7ff fee4 	bl	8000aa4 <XcpCmdShortUpload>
        break;
 8000cdc:	e7c7      	b.n	8000c6e <XcpPacketReceived+0x16>
        XcpCmdSetMta(data);
 8000cde:	f7ff fe79 	bl	80009d4 <XcpCmdSetMta>
        break;
 8000ce2:	e7c4      	b.n	8000c6e <XcpPacketReceived+0x16>
        XcpCmdBuildCheckSum(data);
 8000ce4:	f7ff ff10 	bl	8000b08 <XcpCmdBuildCheckSum>
        break;
 8000ce8:	e7c1      	b.n	8000c6e <XcpPacketReceived+0x16>
        XcpCmdGetId(data);
 8000cea:	f7ff fe5f 	bl	80009ac <XcpCmdGetId>
        break;
 8000cee:	e7be      	b.n	8000c6e <XcpPacketReceived+0x16>
        XcpCmdSynch(data);
 8000cf0:	f7ff fe56 	bl	80009a0 <XcpCmdSynch>
        break;
 8000cf4:	e7bb      	b.n	8000c6e <XcpPacketReceived+0x16>
        XcpCmdGetStatus(data);
 8000cf6:	f7ff fe43 	bl	8000980 <XcpCmdGetStatus>
        break;
 8000cfa:	e7b8      	b.n	8000c6e <XcpPacketReceived+0x16>
        XcpCmdDisconnect(data);
 8000cfc:	f7ff fe32 	bl	8000964 <XcpCmdDisconnect>
        break;
 8000d00:	e7b5      	b.n	8000c6e <XcpPacketReceived+0x16>
        XcpCmdProgramMax(data);
 8000d02:	f7ff ff15 	bl	8000b30 <XcpCmdProgramMax>
        break;
 8000d06:	e7b2      	b.n	8000c6e <XcpPacketReceived+0x16>
        XcpCmdProgram(data);
 8000d08:	f7ff ff32 	bl	8000b70 <XcpCmdProgram>
        break;
 8000d0c:	e7af      	b.n	8000c6e <XcpPacketReceived+0x16>
        XcpCmdProgramStart(data);
 8000d0e:	f7ff fe73 	bl	80009f8 <XcpCmdProgramStart>
        break;
 8000d12:	e7ac      	b.n	8000c6e <XcpPacketReceived+0x16>
        XcpCmdProgramClear(data);
 8000d14:	f7ff ff5a 	bl	8000bcc <XcpCmdProgramClear>
        break;
 8000d18:	e7a9      	b.n	8000c6e <XcpPacketReceived+0x16>
        XcpCmdProgramReset(data);
 8000d1a:	f7ff ff6b 	bl	8000bf4 <XcpCmdProgramReset>
        break;
 8000d1e:	e7a6      	b.n	8000c6e <XcpPacketReceived+0x16>
        XcpCmdProgramPrepare(data);
 8000d20:	f7ff fe64 	bl	80009ec <XcpCmdProgramPrepare>
        break;
 8000d24:	e7a3      	b.n	8000c6e <XcpPacketReceived+0x16>
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 8000d26:	2020      	movs	r0, #32
 8000d28:	f7ff fe12 	bl	8000950 <XcpSetCtoError>
        break;
 8000d2c:	e79f      	b.n	8000c6e <XcpPacketReceived+0x16>
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 8000d2e:	2010      	movs	r0, #16
 8000d30:	f7ff fe0e 	bl	8000950 <XcpSetCtoError>
 8000d34:	e7a0      	b.n	8000c78 <XcpPacketReceived+0x20>
 8000d36:	bf00      	nop
 8000d38:	20000500 	.word	0x20000500

08000d3c <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 8000d3c:	b508      	push	{r3, lr}
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 8000d3e:	2064      	movs	r0, #100	; 0x64
 8000d40:	f000 f806 	bl	8000d50 <LedBlinkInit>
} /*** end of CopInitHook ***/
 8000d44:	bd08      	pop	{r3, pc}

08000d46 <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 8000d46:	b508      	push	{r3, lr}
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 8000d48:	f000 f808 	bl	8000d5c <LedBlinkTask>
} /*** end of CopServiceHook ***/
 8000d4c:	bd08      	pop	{r3, pc}
	...

08000d50 <LedBlinkInit>:
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 8000d50:	4b01      	ldr	r3, [pc, #4]	; (8000d58 <LedBlinkInit+0x8>)
 8000d52:	8018      	strh	r0, [r3, #0]
} /*** end of LedBlinkInit ***/
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	2000054c 	.word	0x2000054c

08000d5c <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 8000d5c:	b508      	push	{r3, lr}
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 8000d5e:	f7ff fd1f 	bl	80007a0 <TimerGet>
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <LedBlinkTask+0x44>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4298      	cmp	r0, r3
 8000d68:	d310      	bcc.n	8000d8c <LedBlinkTask+0x30>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <LedBlinkTask+0x48>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b973      	cbnz	r3, 8000d8e <LedBlinkTask+0x32>
    {
      ledOn = BLT_TRUE;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <LedBlinkTask+0x48>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000d76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d7a:	2208      	movs	r2, #8
 8000d7c:	619a      	str	r2, [r3, #24]
    {
      ledOn = BLT_FALSE;
      LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 8000d7e:	f7ff fd0f 	bl	80007a0 <TimerGet>
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <LedBlinkTask+0x4c>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	4418      	add	r0, r3
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <LedBlinkTask+0x44>)
 8000d8a:	6018      	str	r0, [r3, #0]
  }
} /*** end of LedBlinkTask ***/
 8000d8c:	bd08      	pop	{r3, pc}
      ledOn = BLT_FALSE;
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <LedBlinkTask+0x48>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000d94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d98:	2208      	movs	r2, #8
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
 8000d9c:	e7ef      	b.n	8000d7e <LedBlinkTask+0x22>
 8000d9e:	bf00      	nop
 8000da0:	20000550 	.word	0x20000550
 8000da4:	2000054e 	.word	0x2000054e
 8000da8:	2000054c 	.word	0x2000054c

08000dac <SystemClock_Config>:
**            subsystem.
** \return    none.
**
****************************************************************************************/
static void SystemClock_Config(void)
{
 8000dac:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000dae:	4a34      	ldr	r2, [pc, #208]	; (8000e80 <SystemClock_Config+0xd4>)
 8000db0:	6813      	ldr	r3, [r2, #0]
 8000db2:	f023 0307 	bic.w	r3, r3, #7
 8000db6:	f043 0302 	orr.w	r3, r3, #2
 8000dba:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000dbc:	6813      	ldr	r3, [r2, #0]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
  /* Set flash latency. */
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  /* Verify flash latency setting. */
  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d156      	bne.n	8000e74 <SystemClock_Config+0xc8>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000dc6:	4a2f      	ldr	r2, [pc, #188]	; (8000e84 <SystemClock_Config+0xd8>)
 8000dc8:	6813      	ldr	r3, [r2, #0]
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <SystemClock_Config+0xd8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]


  LL_RCC_HSI_Enable();

    /* Wait till HSE is ready */
   while(LL_RCC_HSI_IsReady() != 1)
 8000dd4:	f013 0f02 	tst.w	r3, #2
 8000dd8:	d0fa      	beq.n	8000dd0 <SystemClock_Config+0x24>
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <SystemClock_Config+0xd8>)
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000de2:	f442 1250 	orr.w	r2, r2, #3407872	; 0x340000
 8000de6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dea:	f022 020f 	bic.w	r2, r2, #15
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000df6:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000df8:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <SystemClock_Config+0xd8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]

  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_15);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000dfc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e00:	d0fa      	beq.n	8000df8 <SystemClock_Config+0x4c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <SystemClock_Config+0xd8>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e0a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000e12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e16:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000e1e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	f022 0203 	bic.w	r2, r2, #3
 8000e26:	f042 0202 	orr.w	r2, r2, #2
 8000e2a:	605a      	str	r2, [r3, #4]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <SystemClock_Config+0xd8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000e30:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e34:	d0fa      	beq.n	8000e2c <SystemClock_Config+0x80>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <SystemClock_Config+0xd8>)
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e3e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000e46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e4a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000e52:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	f022 0203 	bic.w	r2, r2, #3
 8000e5a:	f042 0202 	orr.w	r2, r2, #2
 8000e5e:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <SystemClock_Config+0xd8>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000e68:	2b08      	cmp	r3, #8
 8000e6a:	d1f9      	bne.n	8000e60 <SystemClock_Config+0xb4>
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5);
#endif


  /* Update the system clock speed setting. */
  LL_SetSystemCoreClock(BOOT_CPU_SYSTEM_SPEED_KHZ * 1000u);
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <SystemClock_Config+0xdc>)
 8000e6e:	f000 ff99 	bl	8001da4 <LL_SetSystemCoreClock>
} /*** end of SystemClock_Config ***/
 8000e72:	bd08      	pop	{r3, pc}
    ASSERT_RT(BLT_FALSE);
 8000e74:	216a      	movs	r1, #106	; 0x6a
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <SystemClock_Config+0xe0>)
 8000e78:	f7ff fc9f 	bl	80007ba <AssertFailure>
 8000e7c:	e7a3      	b.n	8000dc6 <SystemClock_Config+0x1a>
 8000e7e:	bf00      	nop
 8000e80:	40022000 	.word	0x40022000
 8000e84:	40021000 	.word	0x40021000
 8000e88:	03938700 	.word	0x03938700
 8000e8c:	08001f14 	.word	0x08001f14

08000e90 <Init>:
{
 8000e90:	b508      	push	{r3, lr}
  HAL_Init();
 8000e92:	f000 f8df 	bl	8001054 <HAL_Init>
  SystemClock_Config();
 8000e96:	f7ff ff89 	bl	8000dac <SystemClock_Config>
} /*** end of Init ***/
 8000e9a:	bd08      	pop	{r3, pc}

08000e9c <main>:
{
 8000e9c:	b508      	push	{r3, lr}
  Init();
 8000e9e:	f7ff fff7 	bl	8000e90 <Init>
  BootInit();
 8000ea2:	f7ff fccd 	bl	8000840 <BootInit>
    BootTask();
 8000ea6:	f7ff fcd9 	bl	800085c <BootTask>
 8000eaa:	e7fc      	b.n	8000ea6 <main+0xa>

08000eac <HAL_MspInit>:
**            interrupt).
** \return    none.
**
****************************************************************************************/
void HAL_MspInit(void)
{
 8000eac:	b530      	push	{r4, r5, lr}
 8000eae:	b08d      	sub	sp, #52	; 0x34
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <HAL_MspInit+0xb0>)
 8000eb2:	699a      	ldr	r2, [r3, #24]
 8000eb4:	f042 0201 	orr.w	r2, r2, #1
 8000eb8:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000eba:	699a      	ldr	r2, [r3, #24]
 8000ebc:	f002 0201 	and.w	r2, r2, #1
 8000ec0:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 8000ec2:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHBENR, Periphs);
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000eca:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000ecc:	695a      	ldr	r2, [r3, #20]
 8000ece:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000ed2:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8000ed4:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHBENR, Periphs);
 8000ed6:	695a      	ldr	r2, [r3, #20]
 8000ed8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000edc:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000ede:	695a      	ldr	r2, [r3, #20]
 8000ee0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000ee4:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000ee6:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHBENR, Periphs);
 8000ee8:	695a      	ldr	r2, [r3, #20]
 8000eea:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000eee:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8000ef6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000ef8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHBENR, Periphs);
 8000efa:	695a      	ldr	r2, [r3, #20]
 8000efc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f00:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f02:	695a      	ldr	r2, [r3, #20]
 8000f04:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8000f08:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000f0a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f0c:	69da      	ldr	r2, [r3, #28]
 8000f0e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000f12:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f1a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000f1c:	9b00      	ldr	r3, [sp, #0]
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_CAN);
#endif


  /* Configure GPIO pin for the LED. */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000f1e:	2508      	movs	r5, #8
 8000f20:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f22:	2301      	movs	r3, #1
 8000f24:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f26:	2400      	movs	r4, #0
 8000f28:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f2a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f2c:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	a906      	add	r1, sp, #24
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f000 fe34 	bl	8001ba0 <LL_GPIO_Init>
 8000f38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f3c:	629d      	str	r5, [r3, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
#endif

#if (BOOT_COM_CAN_ENABLE > 0)
  /* CAN TX and RX GPIO pin configuration. */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f42:	2202      	movs	r2, #2
 8000f44:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000f46:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f48:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f4a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f50:	a906      	add	r1, sp, #24
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <HAL_MspInit+0xb4>)
 8000f54:	f000 fe24 	bl	8001ba0 <LL_GPIO_Init>
#endif


} /*** end of HAL_MspInit ***/
 8000f58:	b00d      	add	sp, #52	; 0x34
 8000f5a:	bd30      	pop	{r4, r5, pc}
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	48000c00 	.word	0x48000c00

08000f64 <HAL_MspDeInit>:
**            interrupt).
** \return    none.
**
****************************************************************************************/
void HAL_MspDeInit(void)
{
 8000f64:	b510      	push	{r4, lr}
 8000f66:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 8000f6a:	2308      	movs	r3, #8
 8000f6c:	62a3      	str	r3, [r4, #40]	; 0x28
  /* Reset GPIO pin for the LED to turn it off. */
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);

  /* Deinit used GPIOs. */
  LL_GPIO_DeInit(GPIOE);
 8000f6e:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <HAL_MspDeInit+0x44>)
 8000f70:	f000 fda4 	bl	8001abc <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOA);
 8000f74:	4620      	mov	r0, r4
 8000f76:	f000 fda1 	bl	8001abc <LL_GPIO_DeInit>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_MspDeInit+0x48>)
 8000f7c:	69da      	ldr	r2, [r3, #28]
 8000f7e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000f82:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(RCC->AHBENR, Periphs);
 8000f84:	695a      	ldr	r2, [r3, #20]
 8000f86:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000f8a:	615a      	str	r2, [r3, #20]
 8000f8c:	695a      	ldr	r2, [r3, #20]
 8000f8e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f92:	615a      	str	r2, [r3, #20]
 8000f94:	695a      	ldr	r2, [r3, #20]
 8000f96:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000f9a:	615a      	str	r2, [r3, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f9c:	699a      	ldr	r2, [r3, #24]
 8000f9e:	f022 0201 	bic.w	r2, r2, #1
 8000fa2:	619a      	str	r2, [r3, #24]
  LL_AHB1_GRP1_DisableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
  LL_AHB1_GRP1_DisableClock(LL_AHB1_GRP1_PERIPH_GPIOF);

  /* SYSCFG clock disable. */
  LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
} /*** end of HAL_MspDeInit ***/
 8000fa4:	bd10      	pop	{r4, pc}
 8000fa6:	bf00      	nop
 8000fa8:	48001000 	.word	0x48001000
 8000fac:	40021000 	.word	0x40021000

08000fb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fb6:	e003      	b.n	8000fc0 <LoopCopyDataInit>

08000fb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fbe:	3104      	adds	r1, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fc0:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fc8:	d3f6      	bcc.n	8000fb8 <CopyDataInit>
	ldr	r2, =_sbss
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fcc:	e002      	b.n	8000fd4 <LoopFillZerobss>

08000fce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fd0:	f842 3b04 	str.w	r3, [r2], #4

08000fd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <LoopForever+0x16>)
	cmp	r2, r3
 8000fd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fd8:	d3f9      	bcc.n	8000fce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fda:	f000 fee9 	bl	8001db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f000 ff1b 	bl	8001e18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe2:	f7ff ff5b 	bl	8000e9c <main>

08000fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fe6:	e7fe      	b.n	8000fe6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fe8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000fec:	08001f40 	.word	0x08001f40
	ldr	r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ff4:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8000ff8:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8000ffc:	20000578 	.word	0x20000578

08001000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC1_2_IRQHandler>
	...

08001004 <HAL_DeInit>:
  *         of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001004:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <HAL_DeInit+0x20>)
 8001008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800100c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 800100e:	2400      	movs	r4, #0
 8001010:	611c      	str	r4, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8001012:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8001014:	60dc      	str	r4, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8001018:	629c      	str	r4, [r3, #40]	; 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800101a:	f7ff ffa3 	bl	8000f64 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
}
 800101e:	4620      	mov	r0, r4
 8001020:	bd10      	pop	{r4, pc}
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b510      	push	{r4, lr}
 800102a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <HAL_InitTick+0x24>)
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HAL_InitTick+0x28>)
 8001032:	fba3 3000 	umull	r3, r0, r3, r0
 8001036:	0980      	lsrs	r0, r0, #6
 8001038:	f000 fbe8 	bl	800180c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800103c:	2200      	movs	r2, #0
 800103e:	4621      	mov	r1, r4
 8001040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001044:	f000 fbae 	bl	80017a4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8001048:	2000      	movs	r0, #0
 800104a:	bd10      	pop	{r4, pc}
 800104c:	20000004 	.word	0x20000004
 8001050:	10624dd3 	.word	0x10624dd3

08001054 <HAL_Init>:
{
 8001054:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001056:	4a07      	ldr	r2, [pc, #28]	; (8001074 <HAL_Init+0x20>)
 8001058:	6813      	ldr	r3, [r2, #0]
 800105a:	f043 0310 	orr.w	r3, r3, #16
 800105e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 fb8d 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff ffde 	bl	8001028 <HAL_InitTick>
  HAL_MspInit();
 800106c:	f7ff ff1e 	bl	8000eac <HAL_MspInit>
}
 8001070:	2000      	movs	r0, #0
 8001072:	bd08      	pop	{r3, pc}
 8001074:	40022000 	.word	0x40022000

08001078 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 8001078:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));

  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 800107a:	694b      	ldr	r3, [r1, #20]
 800107c:	2201      	movs	r2, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3

  /* Initialisation mode for the filter */
  SET_BIT(hcan->Instance->FMR, CAN_FMR_FINIT);
 8001082:	6804      	ldr	r4, [r0, #0]
 8001084:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8001088:	f042 0201 	orr.w	r2, r2, #1
 800108c:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8001090:	6805      	ldr	r5, [r0, #0]
 8001092:	f8d5 421c 	ldr.w	r4, [r5, #540]	; 0x21c
 8001096:	43da      	mvns	r2, r3
 8001098:	4014      	ands	r4, r2
 800109a:	f8c5 421c 	str.w	r4, [r5, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800109e:	69cc      	ldr	r4, [r1, #28]
 80010a0:	b9c4      	cbnz	r4, 80010d4 <HAL_CAN_ConfigFilter+0x5c>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80010a2:	6805      	ldr	r5, [r0, #0]
 80010a4:	f8d5 420c 	ldr.w	r4, [r5, #524]	; 0x20c
 80010a8:	4014      	ands	r4, r2
 80010aa:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010ae:	68cf      	ldr	r7, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010b0:	888d      	ldrh	r5, [r1, #4]
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80010b2:	6806      	ldr	r6, [r0, #0]
 80010b4:	694c      	ldr	r4, [r1, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010b6:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80010ba:	3448      	adds	r4, #72	; 0x48
 80010bc:	f846 5034 	str.w	r5, [r6, r4, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010c0:	688f      	ldr	r7, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010c2:	880d      	ldrh	r5, [r1, #0]
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80010c4:	6804      	ldr	r4, [r0, #0]
 80010c6:	694e      	ldr	r6, [r1, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010c8:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80010cc:	3648      	adds	r6, #72	; 0x48
 80010ce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80010d2:	6065      	str	r5, [r4, #4]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010d4:	69cc      	ldr	r4, [r1, #28]
 80010d6:	2c01      	cmp	r4, #1
 80010d8:	d01e      	beq.n	8001118 <HAL_CAN_ConfigFilter+0xa0>
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010da:	698c      	ldr	r4, [r1, #24]
 80010dc:	2c00      	cmp	r4, #0
 80010de:	d135      	bne.n	800114c <HAL_CAN_ConfigFilter+0xd4>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80010e0:	6805      	ldr	r5, [r0, #0]
 80010e2:	f8d5 4204 	ldr.w	r4, [r5, #516]	; 0x204
 80010e6:	4014      	ands	r4, r2
 80010e8:	f8c5 4204 	str.w	r4, [r5, #516]	; 0x204
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010ec:	690c      	ldr	r4, [r1, #16]
 80010ee:	2c00      	cmp	r4, #0
 80010f0:	d133      	bne.n	800115a <HAL_CAN_ConfigFilter+0xe2>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 80010f2:	6804      	ldr	r4, [r0, #0]
 80010f4:	f8d4 5214 	ldr.w	r5, [r4, #532]	; 0x214
 80010f8:	402a      	ands	r2, r5
 80010fa:	f8c4 2214 	str.w	r2, [r4, #532]	; 0x214
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 80010fe:	6a0a      	ldr	r2, [r1, #32]
 8001100:	2a01      	cmp	r2, #1
 8001102:	d031      	beq.n	8001168 <HAL_CAN_ConfigFilter+0xf0>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 8001104:	6802      	ldr	r2, [r0, #0]
 8001106:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800110a:	f023 0301 	bic.w	r3, r3, #1
 800110e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
}
 8001112:	2000      	movs	r0, #0
 8001114:	bcf0      	pop	{r4, r5, r6, r7}
 8001116:	4770      	bx	lr
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8001118:	6805      	ldr	r5, [r0, #0]
 800111a:	f8d5 420c 	ldr.w	r4, [r5, #524]	; 0x20c
 800111e:	431c      	orrs	r4, r3
 8001120:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001124:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001126:	888d      	ldrh	r5, [r1, #4]
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8001128:	6806      	ldr	r6, [r0, #0]
 800112a:	694c      	ldr	r4, [r1, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800112c:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8001130:	3448      	adds	r4, #72	; 0x48
 8001132:	f846 5034 	str.w	r5, [r6, r4, lsl #3]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001136:	688f      	ldr	r7, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001138:	898d      	ldrh	r5, [r1, #12]
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 800113a:	6804      	ldr	r4, [r0, #0]
 800113c:	694e      	ldr	r6, [r1, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800113e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8001142:	3648      	adds	r6, #72	; 0x48
 8001144:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8001148:	6065      	str	r5, [r4, #4]
 800114a:	e7c6      	b.n	80010da <HAL_CAN_ConfigFilter+0x62>
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 800114c:	6805      	ldr	r5, [r0, #0]
 800114e:	f8d5 4204 	ldr.w	r4, [r5, #516]	; 0x204
 8001152:	431c      	orrs	r4, r3
 8001154:	f8c5 4204 	str.w	r4, [r5, #516]	; 0x204
 8001158:	e7c8      	b.n	80010ec <HAL_CAN_ConfigFilter+0x74>
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 800115a:	6804      	ldr	r4, [r0, #0]
 800115c:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8001160:	431a      	orrs	r2, r3
 8001162:	f8c4 2214 	str.w	r2, [r4, #532]	; 0x214
 8001166:	e7ca      	b.n	80010fe <HAL_CAN_ConfigFilter+0x86>
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8001168:	6801      	ldr	r1, [r0, #0]
 800116a:	f8d1 221c 	ldr.w	r2, [r1, #540]	; 0x21c
 800116e:	4313      	orrs	r3, r2
 8001170:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
 8001174:	e7c6      	b.n	8001104 <HAL_CAN_ConfigFilter+0x8c>

08001176 <HAL_CAN_MspInit>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */ 
}
 8001176:	4770      	bx	lr

08001178 <HAL_CAN_Init>:
  if(hcan == NULL)
 8001178:	2800      	cmp	r0, #0
 800117a:	f000 80b5 	beq.w	80012e8 <HAL_CAN_Init+0x170>
{
 800117e:	b538      	push	{r3, r4, r5, lr}
 8001180:	4604      	mov	r4, r0
  if(hcan->State == HAL_CAN_STATE_RESET)
 8001182:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001186:	b303      	cbz	r3, 80011ca <HAL_CAN_Init+0x52>
  hcan->State = HAL_CAN_STATE_BUSY;
 8001188:	2302      	movs	r3, #2
 800118a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800118e:	6822      	ldr	r2, [r4, #0]
 8001190:	6813      	ldr	r3, [r2, #0]
 8001192:	f023 0302 	bic.w	r3, r3, #2
 8001196:	6013      	str	r3, [r2, #0]
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001198:	6822      	ldr	r2, [r4, #0]
 800119a:	6813      	ldr	r3, [r2, #0]
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();   
 80011a2:	f7ff fb05 	bl	80007b0 <HAL_GetTick>
 80011a6:	4605      	mov	r5, r0
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	f012 0f01 	tst.w	r2, #1
 80011b0:	d110      	bne.n	80011d4 <HAL_CAN_Init+0x5c>
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80011b2:	f7ff fafd 	bl	80007b0 <HAL_GetTick>
 80011b6:	1b40      	subs	r0, r0, r5
 80011b8:	280a      	cmp	r0, #10
 80011ba:	d9f5      	bls.n	80011a8 <HAL_CAN_Init+0x30>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 80011bc:	2003      	movs	r0, #3
 80011be:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hcan);
 80011c2:	2300      	movs	r3, #0
 80011c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80011c8:	bd38      	pop	{r3, r4, r5, pc}
    hcan->Lock = HAL_UNLOCKED;
 80011ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_CAN_MspInit(hcan);
 80011ce:	f7ff ffd2 	bl	8001176 <HAL_CAN_MspInit>
 80011d2:	e7d9      	b.n	8001188 <HAL_CAN_Init+0x10>
  if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	f012 0f01 	tst.w	r2, #1
 80011da:	d07a      	beq.n	80012d2 <HAL_CAN_Init+0x15a>
    if (hcan->Init.TTCM == ENABLE)
 80011dc:	69a2      	ldr	r2, [r4, #24]
 80011de:	2a01      	cmp	r2, #1
 80011e0:	d050      	beq.n	8001284 <HAL_CAN_Init+0x10c>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e8:	601a      	str	r2, [r3, #0]
    if (hcan->Init.ABOM == ENABLE)
 80011ea:	69e3      	ldr	r3, [r4, #28]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d04e      	beq.n	800128e <HAL_CAN_Init+0x116>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011f0:	6822      	ldr	r2, [r4, #0]
 80011f2:	6813      	ldr	r3, [r2, #0]
 80011f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011f8:	6013      	str	r3, [r2, #0]
    if (hcan->Init.AWUM == ENABLE)
 80011fa:	6a23      	ldr	r3, [r4, #32]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d04c      	beq.n	800129a <HAL_CAN_Init+0x122>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001200:	6822      	ldr	r2, [r4, #0]
 8001202:	6813      	ldr	r3, [r2, #0]
 8001204:	f023 0320 	bic.w	r3, r3, #32
 8001208:	6013      	str	r3, [r2, #0]
    if (hcan->Init.NART == ENABLE)
 800120a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800120c:	2b01      	cmp	r3, #1
 800120e:	d04a      	beq.n	80012a6 <HAL_CAN_Init+0x12e>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001210:	6822      	ldr	r2, [r4, #0]
 8001212:	6813      	ldr	r3, [r2, #0]
 8001214:	f023 0310 	bic.w	r3, r3, #16
 8001218:	6013      	str	r3, [r2, #0]
    if (hcan->Init.RFLM == ENABLE)
 800121a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800121c:	2b01      	cmp	r3, #1
 800121e:	d048      	beq.n	80012b2 <HAL_CAN_Init+0x13a>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001220:	6822      	ldr	r2, [r4, #0]
 8001222:	6813      	ldr	r3, [r2, #0]
 8001224:	f023 0308 	bic.w	r3, r3, #8
 8001228:	6013      	str	r3, [r2, #0]
    if (hcan->Init.TXFP == ENABLE)
 800122a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800122c:	2b01      	cmp	r3, #1
 800122e:	d046      	beq.n	80012be <HAL_CAN_Init+0x146>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001230:	6822      	ldr	r2, [r4, #0]
 8001232:	6813      	ldr	r3, [r2, #0]
 8001234:	f023 0304 	bic.w	r3, r3, #4
 8001238:	6013      	str	r3, [r2, #0]
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800123a:	68a3      	ldr	r3, [r4, #8]
 800123c:	68e2      	ldr	r2, [r4, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	6922      	ldr	r2, [r4, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	6962      	ldr	r2, [r4, #20]
 8001246:	4313      	orrs	r3, r2
 8001248:	6862      	ldr	r2, [r4, #4]
 800124a:	3a01      	subs	r2, #1
 800124c:	6821      	ldr	r1, [r4, #0]
 800124e:	4313      	orrs	r3, r2
 8001250:	61cb      	str	r3, [r1, #28]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001252:	6822      	ldr	r2, [r4, #0]
 8001254:	6813      	ldr	r3, [r2, #0]
 8001256:	f023 0301 	bic.w	r3, r3, #1
 800125a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();   
 800125c:	f7ff faa8 	bl	80007b0 <HAL_GetTick>
 8001260:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	f012 0f01 	tst.w	r2, #1
 800126a:	d02e      	beq.n	80012ca <HAL_CAN_Init+0x152>
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 800126c:	f7ff faa0 	bl	80007b0 <HAL_GetTick>
 8001270:	1b40      	subs	r0, r0, r5
 8001272:	280a      	cmp	r0, #10
 8001274:	d9f5      	bls.n	8001262 <HAL_CAN_Init+0xea>
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001276:	2003      	movs	r0, #3
 8001278:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
       __HAL_UNLOCK(hcan);
 800127c:	2300      	movs	r3, #0
 800127e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
       return HAL_TIMEOUT;
 8001282:	e7a1      	b.n	80011c8 <HAL_CAN_Init+0x50>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	e7ad      	b.n	80011ea <HAL_CAN_Init+0x72>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800128e:	6822      	ldr	r2, [r4, #0]
 8001290:	6813      	ldr	r3, [r2, #0]
 8001292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	e7af      	b.n	80011fa <HAL_CAN_Init+0x82>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800129a:	6822      	ldr	r2, [r4, #0]
 800129c:	6813      	ldr	r3, [r2, #0]
 800129e:	f043 0320 	orr.w	r3, r3, #32
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	e7b1      	b.n	800120a <HAL_CAN_Init+0x92>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012a6:	6822      	ldr	r2, [r4, #0]
 80012a8:	6813      	ldr	r3, [r2, #0]
 80012aa:	f043 0310 	orr.w	r3, r3, #16
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e7b3      	b.n	800121a <HAL_CAN_Init+0xa2>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012b2:	6822      	ldr	r2, [r4, #0]
 80012b4:	6813      	ldr	r3, [r2, #0]
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	e7b5      	b.n	800122a <HAL_CAN_Init+0xb2>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012be:	6822      	ldr	r2, [r4, #0]
 80012c0:	6813      	ldr	r3, [r2, #0]
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e7b7      	b.n	800123a <HAL_CAN_Init+0xc2>
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f013 0f01 	tst.w	r3, #1
 80012d0:	d004      	beq.n	80012dc <HAL_CAN_Init+0x164>
    hcan->State = HAL_CAN_STATE_ERROR;
 80012d2:	2304      	movs	r3, #4
 80012d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 80012d8:	2001      	movs	r0, #1
 80012da:	e775      	b.n	80011c8 <HAL_CAN_Init+0x50>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012dc:	2000      	movs	r0, #0
 80012de:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 80012e0:	2301      	movs	r3, #1
 80012e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80012e6:	e76f      	b.n	80011c8 <HAL_CAN_Init+0x50>
     return HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
}
 80012ea:	4770      	bx	lr

080012ec <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.  
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 80012ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80012ee:	6803      	ldr	r3, [r0, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 80012f6:	d108      	bne.n	800130a <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80012f8:	689a      	ldr	r2, [r3, #8]
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80012fa:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
 80012fe:	d104      	bne.n	800130a <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 8001300:	689a      	ldr	r2, [r3, #8]
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8001302:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001306:	f000 80ee 	beq.w	80014e6 <HAL_CAN_Transmit+0x1fa>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 800130a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800130e:	2a01      	cmp	r2, #1
 8001310:	f000 80ee 	beq.w	80014f0 <HAL_CAN_Transmit+0x204>
 8001314:	2201      	movs	r2, #1
 8001316:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Change CAN state */
    switch(hcan->State)
 800131a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	2a32      	cmp	r2, #50	; 0x32
 8001322:	d014      	beq.n	800134e <HAL_CAN_Transmit+0x62>
 8001324:	2a62      	cmp	r2, #98	; 0x62
 8001326:	d016      	beq.n	8001356 <HAL_CAN_Transmit+0x6a>
 8001328:	2a22      	cmp	r2, #34	; 0x22
 800132a:	d003      	beq.n	8001334 <HAL_CAN_Transmit+0x48>
          break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 800132c:	2212      	movs	r2, #18
 800132e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
          break;
 8001332:	e002      	b.n	800133a <HAL_CAN_Transmit+0x4e>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8001334:	2242      	movs	r2, #66	; 0x42
 8001336:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    }

    /* Select one empty transmit mailbox */
    if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 8001340:	d10d      	bne.n	800135e <HAL_CAN_Transmit+0x72>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
    }
    else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
 8001348:	d05f      	beq.n	800140a <HAL_CAN_Transmit+0x11e>
    {
      transmitmailbox = CAN_TXMAILBOX_1;
 800134a:	2501      	movs	r5, #1
 800134c:	e008      	b.n	8001360 <HAL_CAN_Transmit+0x74>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 800134e:	2252      	movs	r2, #82	; 0x52
 8001350:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
          break;
 8001354:	e7f1      	b.n	800133a <HAL_CAN_Transmit+0x4e>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8001356:	2272      	movs	r2, #114	; 0x72
 8001358:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
          break;
 800135c:	e7ed      	b.n	800133a <HAL_CAN_Transmit+0x4e>
      transmitmailbox = CAN_TXMAILBOX_0;
 800135e:	2500      	movs	r5, #0
    {
      transmitmailbox = CAN_TXMAILBOX_2;
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8001360:	f105 0218 	add.w	r2, r5, #24
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	589c      	ldr	r4, [r3, r2]
 8001368:	f004 0401 	and.w	r4, r4, #1
 800136c:	509c      	str	r4, [r3, r2]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 800136e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001370:	6893      	ldr	r3, [r2, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d14b      	bne.n	800140e <HAL_CAN_Transmit+0x122>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 8001376:	6806      	ldr	r6, [r0, #0]
 8001378:	f105 0318 	add.w	r3, r5, #24
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	58f4      	ldr	r4, [r6, r3]
 8001380:	6817      	ldr	r7, [r2, #0]
                                                           hcan->pTxMsg->RTR);
 8001382:	68d2      	ldr	r2, [r2, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 8001384:	ea42 5247 	orr.w	r2, r2, r7, lsl #21
 8001388:	4322      	orrs	r2, r4
 800138a:	50f2      	str	r2, [r6, r3]
 800138c:	460e      	mov	r6, r1
 800138e:	4604      	mov	r4, r0
                                                           hcan->pTxMsg->IDE | \
                                                           hcan->pTxMsg->RTR);
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 8001390:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001392:	6913      	ldr	r3, [r2, #16]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	6113      	str	r3, [r2, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 800139a:	6803      	ldr	r3, [r0, #0]
 800139c:	f105 0218 	add.w	r2, r5, #24
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	4413      	add	r3, r2
 80013a4:	6859      	ldr	r1, [r3, #4]
 80013a6:	f021 010f 	bic.w	r1, r1, #15
 80013aa:	6059      	str	r1, [r3, #4]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 80013ac:	6803      	ldr	r3, [r0, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	6859      	ldr	r1, [r3, #4]
 80013b2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80013b4:	6900      	ldr	r0, [r0, #16]
 80013b6:	4301      	orrs	r1, r0
 80013b8:	6059      	str	r1, [r3, #4]

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 80013ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80013bc:	7dc8      	ldrb	r0, [r1, #23]
 80013be:	7d8b      	ldrb	r3, [r1, #22]
 80013c0:	041b      	lsls	r3, r3, #16
 80013c2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80013c6:	7d48      	ldrb	r0, [r1, #21]
 80013c8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80013cc:	7d09      	ldrb	r1, [r1, #20]
 80013ce:	6820      	ldr	r0, [r4, #0]
 80013d0:	430b      	orrs	r3, r1
 80013d2:	012f      	lsls	r7, r5, #4
 80013d4:	4438      	add	r0, r7
 80013d6:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_Pos));
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) |
 80013da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80013dc:	7ec8      	ldrb	r0, [r1, #27]
 80013de:	7e8b      	ldrb	r3, [r1, #26]
 80013e0:	041b      	lsls	r3, r3, #16
 80013e2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80013e6:	7e48      	ldrb	r0, [r1, #25]
 80013e8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80013ec:	7e08      	ldrb	r0, [r1, #24]
 80013ee:	6821      	ldr	r1, [r4, #0]
 80013f0:	4303      	orrs	r3, r0
 80013f2:	4439      	add	r1, r7
 80013f4:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_Pos));

    /* Request transmission */
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013f8:	6821      	ldr	r1, [r4, #0]
 80013fa:	588b      	ldr	r3, [r1, r2]
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	508b      	str	r3, [r1, r2]
  
    /* Get tick */
    tickstart = HAL_GetTick();   
 8001402:	f7ff f9d5 	bl	80007b0 <HAL_GetTick>
 8001406:	4607      	mov	r7, r0
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8001408:	e03f      	b.n	800148a <HAL_CAN_Transmit+0x19e>
      transmitmailbox = CAN_TXMAILBOX_2;
 800140a:	2502      	movs	r5, #2
 800140c:	e7a8      	b.n	8001360 <HAL_CAN_Transmit+0x74>
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 800140e:	6807      	ldr	r7, [r0, #0]
 8001410:	f105 0418 	add.w	r4, r5, #24
 8001414:	0124      	lsls	r4, r4, #4
 8001416:	f857 c004 	ldr.w	ip, [r7, r4]
 800141a:	6856      	ldr	r6, [r2, #4]
 800141c:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
                                                           hcan->pTxMsg->RTR);
 8001420:	68d2      	ldr	r2, [r2, #12]
                                                           hcan->pTxMsg->IDE | \
 8001422:	4313      	orrs	r3, r2
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8001424:	ea43 030c 	orr.w	r3, r3, ip
 8001428:	513b      	str	r3, [r7, r4]
 800142a:	e7af      	b.n	800138c <HAL_CAN_Transmit+0xa0>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800142c:	b126      	cbz	r6, 8001438 <HAL_CAN_Transmit+0x14c>
 800142e:	f7ff f9bf 	bl	80007b0 <HAL_GetTick>
 8001432:	1bc0      	subs	r0, r0, r7
 8001434:	42b0      	cmp	r0, r6
 8001436:	d928      	bls.n	800148a <HAL_CAN_Transmit+0x19e>
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

          /* Cancel transmission */
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 800143e:	b94d      	cbnz	r5, 8001454 <HAL_CAN_Transmit+0x168>
 8001440:	6822      	ldr	r2, [r4, #0]
 8001442:	6893      	ldr	r3, [r2, #8]
 8001444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001448:	6093      	str	r3, [r2, #8]

          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 800144a:	2300      	movs	r3, #0
 800144c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001450:	2003      	movs	r0, #3
 8001452:	e03f      	b.n	80014d4 <HAL_CAN_Transmit+0x1e8>
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 8001454:	2d01      	cmp	r5, #1
 8001456:	d005      	beq.n	8001464 <HAL_CAN_Transmit+0x178>
 8001458:	6822      	ldr	r2, [r4, #0]
 800145a:	6893      	ldr	r3, [r2, #8]
 800145c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001460:	6093      	str	r3, [r2, #8]
 8001462:	e7f2      	b.n	800144a <HAL_CAN_Transmit+0x15e>
 8001464:	6822      	ldr	r2, [r4, #0]
 8001466:	6893      	ldr	r3, [r2, #8]
 8001468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800146c:	6093      	str	r3, [r2, #8]
 800146e:	e7ec      	b.n	800144a <HAL_CAN_Transmit+0x15e>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8001470:	2d01      	cmp	r5, #1
 8001472:	d014      	beq.n	800149e <HAL_CAN_Transmit+0x1b2>
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <HAL_CAN_Transmit+0x208>)
 800147a:	4393      	bics	r3, r2
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b1a3      	cbz	r3, 80014ae <HAL_CAN_Transmit+0x1c2>
      if(Timeout != HAL_MAX_DELAY)
 8001484:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8001488:	d1d0      	bne.n	800142c <HAL_CAN_Transmit+0x140>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800148a:	2d00      	cmp	r5, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_CAN_Transmit+0x184>
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_CAN_Transmit+0x20c>)
 8001494:	4393      	bics	r3, r2
 8001496:	bf14      	ite	ne
 8001498:	2301      	movne	r3, #1
 800149a:	2300      	moveq	r3, #0
 800149c:	e7f1      	b.n	8001482 <HAL_CAN_Transmit+0x196>
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_CAN_Transmit+0x210>)
 80014a4:	4393      	bics	r3, r2
 80014a6:	bf14      	ite	ne
 80014a8:	2301      	movne	r3, #1
 80014aa:	2300      	moveq	r3, #0
 80014ac:	e7e9      	b.n	8001482 <HAL_CAN_Transmit+0x196>
        }
      }
    }

    /* Change CAN state */
    switch(hcan->State)
 80014ae:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b52      	cmp	r3, #82	; 0x52
 80014b6:	d00e      	beq.n	80014d6 <HAL_CAN_Transmit+0x1ea>
 80014b8:	2b72      	cmp	r3, #114	; 0x72
 80014ba:	d010      	beq.n	80014de <HAL_CAN_Transmit+0x1f2>
 80014bc:	2b42      	cmp	r3, #66	; 0x42
 80014be:	d003      	beq.n	80014c8 <HAL_CAN_Transmit+0x1dc>
          break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_BUSY_TX */
          hcan->State = HAL_CAN_STATE_READY;
 80014c0:	2301      	movs	r3, #1
 80014c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
          break;
 80014c6:	e002      	b.n	80014ce <HAL_CAN_Transmit+0x1e2>
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 80014c8:	2322      	movs	r3, #34	; 0x22
 80014ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hcan->State = HAL_CAN_STATE_ERROR; 

    /* Return function status */
    return HAL_ERROR;
  }
}
 80014d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80014d6:	2332      	movs	r3, #50	; 0x32
 80014d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
          break;
 80014dc:	e7f7      	b.n	80014ce <HAL_CAN_Transmit+0x1e2>
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80014de:	2362      	movs	r3, #98	; 0x62
 80014e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
          break;
 80014e4:	e7f3      	b.n	80014ce <HAL_CAN_Transmit+0x1e2>
    hcan->State = HAL_CAN_STATE_ERROR; 
 80014e6:	2304      	movs	r3, #4
 80014e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_ERROR;
 80014ec:	2001      	movs	r0, #1
 80014ee:	e7f1      	b.n	80014d4 <HAL_CAN_Transmit+0x1e8>
    __HAL_LOCK(hcan);
 80014f0:	2002      	movs	r0, #2
 80014f2:	e7ef      	b.n	80014d4 <HAL_CAN_Transmit+0x1e8>
 80014f4:	10010000 	.word	0x10010000
 80014f8:	04000001 	.word	0x04000001
 80014fc:	08000100 	.word	0x08000100

08001500 <HAL_CAN_Receive>:
  * @param  FIFONumber    FIFO number.
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive(CAN_HandleTypeDef* hcan, uint8_t FIFONumber, uint32_t Timeout)
{
 8001500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  /* Process locked */
  __HAL_LOCK(hcan);
 8001502:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001506:	2b01      	cmp	r3, #1
 8001508:	f000 8138 	beq.w	800177c <HAL_CAN_Receive+0x27c>
 800150c:	2301      	movs	r3, #1
 800150e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Check if CAN state is not busy for RX FIFO0 */
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||         \
 8001512:	b999      	cbnz	r1, 800153c <HAL_CAN_Receive+0x3c>
 8001514:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b22      	cmp	r3, #34	; 0x22
 800151c:	d01f      	beq.n	800155e <HAL_CAN_Receive+0x5e>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 800151e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001522:	b2db      	uxtb	r3, r3
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||         \
 8001524:	2b42      	cmp	r3, #66	; 0x42
 8001526:	d01a      	beq.n	800155e <HAL_CAN_Receive+0x5e>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8001528:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800152c:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 800152e:	2b62      	cmp	r3, #98	; 0x62
 8001530:	d015      	beq.n	800155e <HAL_CAN_Receive+0x5e>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 8001532:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001536:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8001538:	2b72      	cmp	r3, #114	; 0x72
 800153a:	d010      	beq.n	800155e <HAL_CAN_Receive+0x5e>

    return HAL_BUSY;
  }

  /* Check if CAN state is not busy for RX FIFO1 */
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 800153c:	2901      	cmp	r1, #1
 800153e:	d013      	beq.n	8001568 <HAL_CAN_Receive+0x68>

    return HAL_BUSY;
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 8001540:	2900      	cmp	r1, #0
 8001542:	d13c      	bne.n	80015be <HAL_CAN_Receive+0xbe>
  {
    switch(hcan->State)
 8001544:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b32      	cmp	r3, #50	; 0x32
 800154c:	d02f      	beq.n	80015ae <HAL_CAN_Receive+0xae>
 800154e:	2b52      	cmp	r3, #82	; 0x52
 8001550:	d031      	beq.n	80015b6 <HAL_CAN_Receive+0xb6>
 8001552:	2b12      	cmp	r3, #18
 8001554:	d021      	beq.n	800159a <HAL_CAN_Receive+0x9a>
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
        break;
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8001556:	2322      	movs	r3, #34	; 0x22
 8001558:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        break;
 800155c:	e020      	b.n	80015a0 <HAL_CAN_Receive+0xa0>
    __HAL_UNLOCK(hcan);
 800155e:	2300      	movs	r3, #0
 8001560:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_BUSY;
 8001564:	2002      	movs	r0, #2
 8001566:	e0e7      	b.n	8001738 <HAL_CAN_Receive+0x238>
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 8001568:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b32      	cmp	r3, #50	; 0x32
 8001570:	d00e      	beq.n	8001590 <HAL_CAN_Receive+0x90>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 8001572:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001576:	b2db      	uxtb	r3, r3
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 8001578:	2b52      	cmp	r3, #82	; 0x52
 800157a:	d009      	beq.n	8001590 <HAL_CAN_Receive+0x90>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 800157c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001580:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 8001582:	2b62      	cmp	r3, #98	; 0x62
 8001584:	d004      	beq.n	8001590 <HAL_CAN_Receive+0x90>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 8001586:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800158a:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 800158c:	2b72      	cmp	r3, #114	; 0x72
 800158e:	d1d7      	bne.n	8001540 <HAL_CAN_Receive+0x40>
    __HAL_UNLOCK(hcan);
 8001590:	2300      	movs	r3, #0
 8001592:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_BUSY;
 8001596:	2002      	movs	r0, #2
 8001598:	e0ce      	b.n	8001738 <HAL_CAN_Receive+0x238>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 800159a:	2342      	movs	r3, #66	; 0x42
 800159c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80015a0:	4616      	mov	r6, r2
 80015a2:	460d      	mov	r5, r1
 80015a4:	4604      	mov	r4, r0
        break;
    }
  }

  /* Get tick */
  tickstart = HAL_GetTick();   
 80015a6:	f7ff f903 	bl	80007b0 <HAL_GetTick>
 80015aa:	4607      	mov	r7, r0
  
  /* Check pending message */
  while(__HAL_CAN_MSG_PENDING(hcan, FIFONumber) == 0U)
 80015ac:	e038      	b.n	8001620 <HAL_CAN_Receive+0x120>
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80015ae:	2362      	movs	r3, #98	; 0x62
 80015b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        break;
 80015b4:	e7f4      	b.n	80015a0 <HAL_CAN_Receive+0xa0>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80015b6:	2372      	movs	r3, #114	; 0x72
 80015b8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        break;
 80015bc:	e7f0      	b.n	80015a0 <HAL_CAN_Receive+0xa0>
    switch(hcan->State)
 80015be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b22      	cmp	r3, #34	; 0x22
 80015c6:	d00b      	beq.n	80015e0 <HAL_CAN_Receive+0xe0>
 80015c8:	2b42      	cmp	r3, #66	; 0x42
 80015ca:	d00d      	beq.n	80015e8 <HAL_CAN_Receive+0xe8>
 80015cc:	2b12      	cmp	r3, #18
 80015ce:	d003      	beq.n	80015d8 <HAL_CAN_Receive+0xd8>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80015d0:	2332      	movs	r3, #50	; 0x32
 80015d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        break;
 80015d6:	e7e3      	b.n	80015a0 <HAL_CAN_Receive+0xa0>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80015d8:	2352      	movs	r3, #82	; 0x52
 80015da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        break;
 80015de:	e7df      	b.n	80015a0 <HAL_CAN_Receive+0xa0>
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80015e0:	2362      	movs	r3, #98	; 0x62
 80015e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        break;
 80015e6:	e7db      	b.n	80015a0 <HAL_CAN_Receive+0xa0>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80015e8:	2372      	movs	r3, #114	; 0x72
 80015ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        break;
 80015ee:	e7d7      	b.n	80015a0 <HAL_CAN_Receive+0xa0>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80015f0:	b126      	cbz	r6, 80015fc <HAL_CAN_Receive+0xfc>
 80015f2:	f7ff f8dd 	bl	80007b0 <HAL_GetTick>
 80015f6:	1bc0      	subs	r0, r0, r7
 80015f8:	42b0      	cmp	r0, r6
 80015fa:	d911      	bls.n	8001620 <HAL_CAN_Receive+0x120>
      {
        hcan->State = HAL_CAN_STATE_TIMEOUT;
 80015fc:	2003      	movs	r0, #3
 80015fe:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d

        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 8001602:	2300      	movs	r3, #0
 8001604:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001608:	e096      	b.n	8001738 <HAL_CAN_Receive+0x238>
  while(__HAL_CAN_MSG_PENDING(hcan, FIFONumber) == 0U)
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	f013 0f03 	tst.w	r3, #3
 8001612:	bf0c      	ite	eq
 8001614:	2301      	moveq	r3, #1
 8001616:	2300      	movne	r3, #0
 8001618:	b163      	cbz	r3, 8001634 <HAL_CAN_Receive+0x134>
    if(Timeout != HAL_MAX_DELAY)
 800161a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800161e:	d1e7      	bne.n	80015f0 <HAL_CAN_Receive+0xf0>
  while(__HAL_CAN_MSG_PENDING(hcan, FIFONumber) == 0U)
 8001620:	2d00      	cmp	r5, #0
 8001622:	d1f2      	bne.n	800160a <HAL_CAN_Receive+0x10a>
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f013 0f03 	tst.w	r3, #3
 800162c:	bf0c      	ite	eq
 800162e:	2301      	moveq	r3, #1
 8001630:	2300      	movne	r3, #0
 8001632:	e7f1      	b.n	8001618 <HAL_CAN_Receive+0x118>
      }
    }
  }

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
 8001634:	2d00      	cmp	r5, #0
 8001636:	d169      	bne.n	800170c <HAL_CAN_Receive+0x20c>
  {
    pRxMsg = hcan->pRxMsg;
 8001638:	6b63      	ldr	r3, [r4, #52]	; 0x34
  {
    pRxMsg = hcan->pRx1Msg;
  }

  /* Get the Id */
  pRxMsg->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 800163a:	6821      	ldr	r1, [r4, #0]
 800163c:	f105 021b 	add.w	r2, r5, #27
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	588a      	ldr	r2, [r1, r2]
 8001644:	f002 0204 	and.w	r2, r2, #4
 8001648:	609a      	str	r2, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 800164a:	2a00      	cmp	r2, #0
 800164c:	d160      	bne.n	8001710 <HAL_CAN_Receive+0x210>
  {
    pRxMsg->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_TI0R_STID_Pos;
 800164e:	6821      	ldr	r1, [r4, #0]
 8001650:	f105 021b 	add.w	r2, r5, #27
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	588a      	ldr	r2, [r1, r2]
 8001658:	0d52      	lsrs	r2, r2, #21
 800165a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
  }
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 800165c:	6821      	ldr	r1, [r4, #0]
 800165e:	f105 021b 	add.w	r2, r5, #27
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	5889      	ldr	r1, [r1, r2]
 8001666:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800166a:	60d9      	str	r1, [r3, #12]
  /* Get the DLC */
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 800166c:	6821      	ldr	r1, [r4, #0]
 800166e:	4411      	add	r1, r2
 8001670:	6849      	ldr	r1, [r1, #4]
 8001672:	f001 010f 	and.w	r1, r1, #15
 8001676:	6119      	str	r1, [r3, #16]
  /* Get the FMI */
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001678:	6821      	ldr	r1, [r4, #0]
 800167a:	440a      	add	r2, r1
 800167c:	6852      	ldr	r2, [r2, #4]
 800167e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001682:	61da      	str	r2, [r3, #28]
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
 8001684:	621d      	str	r5, [r3, #32]
  /* Get the data field */
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8001686:	6821      	ldr	r1, [r4, #0]
 8001688:	012a      	lsls	r2, r5, #4
 800168a:	4411      	add	r1, r2
 800168c:	f8d1 11b8 	ldr.w	r1, [r1, #440]	; 0x1b8
 8001690:	7519      	strb	r1, [r3, #20]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 8001692:	6821      	ldr	r1, [r4, #0]
 8001694:	4411      	add	r1, r2
 8001696:	f8d1 11b8 	ldr.w	r1, [r1, #440]	; 0x1b8
 800169a:	0a09      	lsrs	r1, r1, #8
 800169c:	7559      	strb	r1, [r3, #21]
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
 800169e:	6821      	ldr	r1, [r4, #0]
 80016a0:	4411      	add	r1, r2
 80016a2:	f8d1 11b8 	ldr.w	r1, [r1, #440]	; 0x1b8
 80016a6:	0c09      	lsrs	r1, r1, #16
 80016a8:	7599      	strb	r1, [r3, #22]
  pRxMsg->Data[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA3_Pos;
 80016aa:	6821      	ldr	r1, [r4, #0]
 80016ac:	4411      	add	r1, r2
 80016ae:	f8d1 11b8 	ldr.w	r1, [r1, #440]	; 0x1b8
 80016b2:	0e09      	lsrs	r1, r1, #24
 80016b4:	75d9      	strb	r1, [r3, #23]
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 80016b6:	6821      	ldr	r1, [r4, #0]
 80016b8:	4411      	add	r1, r2
 80016ba:	f8d1 11bc 	ldr.w	r1, [r1, #444]	; 0x1bc
 80016be:	7619      	strb	r1, [r3, #24]
  pRxMsg->Data[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA5_Pos;
 80016c0:	6821      	ldr	r1, [r4, #0]
 80016c2:	4411      	add	r1, r2
 80016c4:	f8d1 11bc 	ldr.w	r1, [r1, #444]	; 0x1bc
 80016c8:	0a09      	lsrs	r1, r1, #8
 80016ca:	7659      	strb	r1, [r3, #25]
  pRxMsg->Data[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA6_Pos;
 80016cc:	6821      	ldr	r1, [r4, #0]
 80016ce:	4411      	add	r1, r2
 80016d0:	f8d1 11bc 	ldr.w	r1, [r1, #444]	; 0x1bc
 80016d4:	0c09      	lsrs	r1, r1, #16
 80016d6:	7699      	strb	r1, [r3, #26]
  pRxMsg->Data[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA7_Pos;
 80016d8:	6821      	ldr	r1, [r4, #0]
 80016da:	440a      	add	r2, r1
 80016dc:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80016e0:	0e12      	lsrs	r2, r2, #24
 80016e2:	76da      	strb	r2, [r3, #27]
  
  /* Release the FIFO */
  if(FIFONumber == CAN_FIFO0)
 80016e4:	b9e5      	cbnz	r5, 8001720 <HAL_CAN_Receive+0x220>
  {
    /* Release FIFO0 */
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 80016e6:	6822      	ldr	r2, [r4, #0]
 80016e8:	68d3      	ldr	r3, [r2, #12]
 80016ea:	f043 0320 	orr.w	r3, r3, #32
 80016ee:	60d3      	str	r3, [r2, #12]
    /* Release FIFO1 */
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 80016f0:	bb5d      	cbnz	r5, 800174a <HAL_CAN_Receive+0x24a>
  {
    switch(hcan->State)
 80016f2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b62      	cmp	r3, #98	; 0x62
 80016fa:	d01e      	beq.n	800173a <HAL_CAN_Receive+0x23a>
 80016fc:	2b72      	cmp	r3, #114	; 0x72
 80016fe:	d020      	beq.n	8001742 <HAL_CAN_Receive+0x242>
 8001700:	2b42      	cmp	r3, #66	; 0x42
 8001702:	d013      	beq.n	800172c <HAL_CAN_Receive+0x22c>
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
        break;
      default: /* HAL_CAN_STATE_BUSY_RX0 */
        hcan->State = HAL_CAN_STATE_READY;
 8001704:	2301      	movs	r3, #1
 8001706:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        break;
 800170a:	e012      	b.n	8001732 <HAL_CAN_Receive+0x232>
    pRxMsg = hcan->pRx1Msg;
 800170c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800170e:	e794      	b.n	800163a <HAL_CAN_Receive+0x13a>
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
 8001710:	6821      	ldr	r1, [r4, #0]
 8001712:	f105 021b 	add.w	r2, r5, #27
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	588a      	ldr	r2, [r1, r2]
 800171a:	08d2      	lsrs	r2, r2, #3
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	e79d      	b.n	800165c <HAL_CAN_Receive+0x15c>
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8001720:	6822      	ldr	r2, [r4, #0]
 8001722:	6913      	ldr	r3, [r2, #16]
 8001724:	f043 0320 	orr.w	r3, r3, #32
 8001728:	6113      	str	r3, [r2, #16]
 800172a:	e7e1      	b.n	80016f0 <HAL_CAN_Receive+0x1f0>
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 800172c:	2312      	movs	r3, #18
 800172e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        break;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hcan);
 8001732:	2000      	movs	r0, #0
 8001734:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
}
 8001738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 800173a:	2332      	movs	r3, #50	; 0x32
 800173c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        break;
 8001740:	e7f7      	b.n	8001732 <HAL_CAN_Receive+0x232>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8001742:	2352      	movs	r3, #82	; 0x52
 8001744:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        break;
 8001748:	e7f3      	b.n	8001732 <HAL_CAN_Receive+0x232>
    switch(hcan->State)
 800174a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b62      	cmp	r3, #98	; 0x62
 8001752:	d00b      	beq.n	800176c <HAL_CAN_Receive+0x26c>
 8001754:	2b72      	cmp	r3, #114	; 0x72
 8001756:	d00d      	beq.n	8001774 <HAL_CAN_Receive+0x274>
 8001758:	2b52      	cmp	r3, #82	; 0x52
 800175a:	d003      	beq.n	8001764 <HAL_CAN_Receive+0x264>
        hcan->State = HAL_CAN_STATE_READY;
 800175c:	2301      	movs	r3, #1
 800175e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        break;
 8001762:	e7e6      	b.n	8001732 <HAL_CAN_Receive+0x232>
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8001764:	2312      	movs	r3, #18
 8001766:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        break;
 800176a:	e7e2      	b.n	8001732 <HAL_CAN_Receive+0x232>
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800176c:	2322      	movs	r3, #34	; 0x22
 800176e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        break;
 8001772:	e7de      	b.n	8001732 <HAL_CAN_Receive+0x232>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8001774:	2342      	movs	r3, #66	; 0x42
 8001776:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        break;
 800177a:	e7da      	b.n	8001732 <HAL_CAN_Receive+0x232>
  __HAL_LOCK(hcan);
 800177c:	2002      	movs	r0, #2
 800177e:	e7db      	b.n	8001738 <HAL_CAN_Receive+0x238>

08001780 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001782:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001784:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800178c:	0200      	lsls	r0, r0, #8
 800178e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001792:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001794:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001798:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800179c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_NVIC_SetPriority+0x60>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ae:	f1c3 0407 	rsb	r4, r3, #7
 80017b2:	2c04      	cmp	r4, #4
 80017b4:	bf28      	it	cs
 80017b6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b8:	1d1d      	adds	r5, r3, #4
 80017ba:	2d06      	cmp	r5, #6
 80017bc:	d918      	bls.n	80017f0 <HAL_NVIC_SetPriority+0x4c>
 80017be:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80017c4:	fa05 f404 	lsl.w	r4, r5, r4
 80017c8:	ea21 0104 	bic.w	r1, r1, r4
 80017cc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ce:	fa05 f303 	lsl.w	r3, r5, r3
 80017d2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80017d8:	2800      	cmp	r0, #0
 80017da:	db0b      	blt.n	80017f4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	0109      	lsls	r1, r1, #4
 80017de:	b2c9      	uxtb	r1, r1
 80017e0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80017e4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80017e8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017ec:	bc30      	pop	{r4, r5}
 80017ee:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f0:	2300      	movs	r3, #0
 80017f2:	e7e5      	b.n	80017c0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	f000 000f 	and.w	r0, r0, #15
 80017f8:	0109      	lsls	r1, r1, #4
 80017fa:	b2c9      	uxtb	r1, r1
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <HAL_NVIC_SetPriority+0x64>)
 80017fe:	5419      	strb	r1, [r3, r0]
 8001800:	e7f4      	b.n	80017ec <HAL_NVIC_SetPriority+0x48>
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00
 8001808:	e000ed14 	.word	0xe000ed14

0800180c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	3801      	subs	r0, #1
 800180e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001812:	d20a      	bcs.n	800182a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_SYSTICK_Config+0x24>)
 8001816:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <HAL_SYSTICK_Config+0x28>)
 800181a:	21f0      	movs	r1, #240	; 0xf0
 800181c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	2000      	movs	r0, #0
 8001822:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800182a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <FLASH_Program_HalfWord+0x14>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <FLASH_Program_HalfWord+0x18>)
 8001840:	6913      	ldr	r3, [r2, #16]
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001848:	8001      	strh	r1, [r0, #0]
}
 800184a:	4770      	bx	lr
 800184c:	20000558 	.word	0x20000558
 8001850:	40022000 	.word	0x40022000

08001854 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <FLASH_SetErrorCode+0x38>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f013 0f10 	tst.w	r3, #16
 800185c:	d014      	beq.n	8001888 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800185e:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <FLASH_SetErrorCode+0x3c>)
 8001860:	69d3      	ldr	r3, [r2, #28]
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001868:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <FLASH_SetErrorCode+0x38>)
 800186c:	68d2      	ldr	r2, [r2, #12]
 800186e:	f012 0f04 	tst.w	r2, #4
 8001872:	d006      	beq.n	8001882 <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001874:	4906      	ldr	r1, [pc, #24]	; (8001890 <FLASH_SetErrorCode+0x3c>)
 8001876:	69ca      	ldr	r2, [r1, #28]
 8001878:	f042 0201 	orr.w	r2, r2, #1
 800187c:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 800187e:	f043 0304 	orr.w	r3, r3, #4
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001882:	4a02      	ldr	r2, [pc, #8]	; (800188c <FLASH_SetErrorCode+0x38>)
 8001884:	60d3      	str	r3, [r2, #12]
}  
 8001886:	4770      	bx	lr
  uint32_t flags = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	e7ee      	b.n	800186a <FLASH_SetErrorCode+0x16>
 800188c:	40022000 	.word	0x40022000
 8001890:	20000558 	.word	0x20000558

08001894 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_FLASH_Unlock+0x20>)
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	f013 0f80 	tst.w	r3, #128	; 0x80
 800189c:	d007      	beq.n	80018ae <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_FLASH_Unlock+0x20>)
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <HAL_FLASH_Unlock+0x24>)
 80018a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80018a4:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80018a8:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 80018aa:	2000      	movs	r0, #0
 80018ac:	4770      	bx	lr
    return HAL_ERROR;
 80018ae:	2001      	movs	r0, #1
}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40022000 	.word	0x40022000
 80018b8:	45670123 	.word	0x45670123

080018bc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80018bc:	4a03      	ldr	r2, [pc, #12]	; (80018cc <HAL_FLASH_Lock+0x10>)
 80018be:	6913      	ldr	r3, [r2, #16]
 80018c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c4:	6113      	str	r3, [r2, #16]
}
 80018c6:	2000      	movs	r0, #0
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40022000 	.word	0x40022000

080018d0 <FLASH_WaitForLastOperation>:
{
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7fe ff6c 	bl	80007b0 <HAL_GetTick>
 80018d8:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <FLASH_WaitForLastOperation+0x60>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f013 0f01 	tst.w	r3, #1
 80018e2:	d00a      	beq.n	80018fa <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 80018e4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80018e8:	d0f7      	beq.n	80018da <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80018ea:	b1e4      	cbz	r4, 8001926 <FLASH_WaitForLastOperation+0x56>
 80018ec:	f7fe ff60 	bl	80007b0 <HAL_GetTick>
 80018f0:	1b40      	subs	r0, r0, r5
 80018f2:	42a0      	cmp	r0, r4
 80018f4:	d9f1      	bls.n	80018da <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 80018f6:	2003      	movs	r0, #3
 80018f8:	e014      	b.n	8001924 <FLASH_WaitForLastOperation+0x54>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <FLASH_WaitForLastOperation+0x60>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	f013 0f20 	tst.w	r3, #32
 8001902:	d002      	beq.n	800190a <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <FLASH_WaitForLastOperation+0x60>)
 8001906:	2220      	movs	r2, #32
 8001908:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <FLASH_WaitForLastOperation+0x60>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f013 0f10 	tst.w	r3, #16
 8001912:	d104      	bne.n	800191e <FLASH_WaitForLastOperation+0x4e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <FLASH_WaitForLastOperation+0x60>)
 8001916:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001918:	f013 0f04 	tst.w	r3, #4
 800191c:	d005      	beq.n	800192a <FLASH_WaitForLastOperation+0x5a>
    FLASH_SetErrorCode();
 800191e:	f7ff ff99 	bl	8001854 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001922:	2001      	movs	r0, #1
}
 8001924:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 8001926:	2003      	movs	r0, #3
 8001928:	e7fc      	b.n	8001924 <FLASH_WaitForLastOperation+0x54>
  return HAL_OK;
 800192a:	2000      	movs	r0, #0
 800192c:	e7fa      	b.n	8001924 <FLASH_WaitForLastOperation+0x54>
 800192e:	bf00      	nop
 8001930:	40022000 	.word	0x40022000

08001934 <HAL_FLASH_Program>:
{
 8001934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8001938:	4c23      	ldr	r4, [pc, #140]	; (80019c8 <HAL_FLASH_Program+0x94>)
 800193a:	7e24      	ldrb	r4, [r4, #24]
 800193c:	2c01      	cmp	r4, #1
 800193e:	d041      	beq.n	80019c4 <HAL_FLASH_Program+0x90>
 8001940:	461e      	mov	r6, r3
 8001942:	4690      	mov	r8, r2
 8001944:	460f      	mov	r7, r1
 8001946:	4604      	mov	r4, r0
 8001948:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <HAL_FLASH_Program+0x94>)
 800194a:	2201      	movs	r2, #1
 800194c:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800194e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001952:	f7ff ffbd 	bl	80018d0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001956:	4603      	mov	r3, r0
 8001958:	bb70      	cbnz	r0, 80019b8 <HAL_FLASH_Program+0x84>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800195a:	2c01      	cmp	r4, #1
 800195c:	d029      	beq.n	80019b2 <HAL_FLASH_Program+0x7e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800195e:	2c02      	cmp	r4, #2
 8001960:	d024      	beq.n	80019ac <HAL_FLASH_Program+0x78>
      nbiterations = 4U;
 8001962:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8001966:	2400      	movs	r4, #0
 8001968:	454c      	cmp	r4, r9
 800196a:	d225      	bcs.n	80019b8 <HAL_FLASH_Program+0x84>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800196c:	0121      	lsls	r1, r4, #4
 800196e:	f1c1 0220 	rsb	r2, r1, #32
 8001972:	f1a1 0320 	sub.w	r3, r1, #32
 8001976:	fa28 f101 	lsr.w	r1, r8, r1
 800197a:	fa06 f202 	lsl.w	r2, r6, r2
 800197e:	4311      	orrs	r1, r2
 8001980:	fa26 f303 	lsr.w	r3, r6, r3
 8001984:	4319      	orrs	r1, r3
 8001986:	b289      	uxth	r1, r1
 8001988:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 800198c:	f7ff ff54 	bl	8001838 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001990:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001994:	f7ff ff9c 	bl	80018d0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_FLASH_Program+0x98>)
 800199a:	691d      	ldr	r5, [r3, #16]
 800199c:	f025 0501 	bic.w	r5, r5, #1
 80019a0:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 80019a2:	4603      	mov	r3, r0
 80019a4:	b940      	cbnz	r0, 80019b8 <HAL_FLASH_Program+0x84>
    for (index = 0U; index < nbiterations; index++)
 80019a6:	3401      	adds	r4, #1
 80019a8:	b2e4      	uxtb	r4, r4
 80019aa:	e7dd      	b.n	8001968 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 80019ac:	f04f 0902 	mov.w	r9, #2
 80019b0:	e7d9      	b.n	8001966 <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 80019b2:	f04f 0901 	mov.w	r9, #1
 80019b6:	e7d6      	b.n	8001966 <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 80019b8:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <HAL_FLASH_Program+0x94>)
 80019ba:	2100      	movs	r1, #0
 80019bc:	7611      	strb	r1, [r2, #24]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 80019c4:	2302      	movs	r3, #2
 80019c6:	e7fa      	b.n	80019be <HAL_FLASH_Program+0x8a>
 80019c8:	20000558 	.word	0x20000558
 80019cc:	40022000 	.word	0x40022000

080019d0 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <FLASH_MassErase+0x1c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <FLASH_MassErase+0x20>)
 80019d8:	691a      	ldr	r2, [r3, #16]
 80019da:	f042 0204 	orr.w	r2, r2, #4
 80019de:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019e6:	611a      	str	r2, [r3, #16]
}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000558 	.word	0x20000558
 80019f0:	40022000 	.word	0x40022000

080019f4 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <FLASH_PageErase+0x1c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <FLASH_PageErase+0x20>)
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	f042 0202 	orr.w	r2, r2, #2
 8001a02:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001a04:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a0c:	611a      	str	r2, [r3, #16]
}
 8001a0e:	4770      	bx	lr
 8001a10:	20000558 	.word	0x20000558
 8001a14:	40022000 	.word	0x40022000

08001a18 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8001a18:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <HAL_FLASHEx_Erase+0x9c>)
 8001a1a:	7e1b      	ldrb	r3, [r3, #24]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d045      	beq.n	8001aac <HAL_FLASHEx_Erase+0x94>
{
 8001a20:	b570      	push	{r4, r5, r6, lr}
 8001a22:	460e      	mov	r6, r1
 8001a24:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8001a26:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_FLASHEx_Erase+0x9c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001a2c:	6803      	ldr	r3, [r0, #0]
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d020      	beq.n	8001a74 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001a32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a36:	f7ff ff4b 	bl	80018d0 <FLASH_WaitForLastOperation>
 8001a3a:	bb88      	cbnz	r0, 8001aa0 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a40:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8001a42:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a44:	2201      	movs	r2, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001a46:	68a1      	ldr	r1, [r4, #8]
 8001a48:	6863      	ldr	r3, [r4, #4]
 8001a4a:	eb03 23c1 	add.w	r3, r3, r1, lsl #11
        for(address = pEraseInit->PageAddress;
 8001a4e:	42ab      	cmp	r3, r5
 8001a50:	d927      	bls.n	8001aa2 <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8001a52:	4628      	mov	r0, r5
 8001a54:	f7ff ffce 	bl	80019f4 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a5c:	f7ff ff38 	bl	80018d0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001a60:	4a15      	ldr	r2, [pc, #84]	; (8001ab8 <HAL_FLASHEx_Erase+0xa0>)
 8001a62:	6913      	ldr	r3, [r2, #16]
 8001a64:	f023 0302 	bic.w	r3, r3, #2
 8001a68:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	b9b0      	cbnz	r0, 8001a9c <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8001a6e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001a72:	e7e8      	b.n	8001a46 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001a74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a78:	f7ff ff2a 	bl	80018d0 <FLASH_WaitForLastOperation>
 8001a7c:	b108      	cbz	r0, 8001a82 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a7e:	2201      	movs	r2, #1
 8001a80:	e00f      	b.n	8001aa2 <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 8001a82:	f7ff ffa5 	bl	80019d0 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a8a:	f7ff ff21 	bl	80018d0 <FLASH_WaitForLastOperation>
 8001a8e:	4602      	mov	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001a90:	4909      	ldr	r1, [pc, #36]	; (8001ab8 <HAL_FLASHEx_Erase+0xa0>)
 8001a92:	690b      	ldr	r3, [r1, #16]
 8001a94:	f023 0304 	bic.w	r3, r3, #4
 8001a98:	610b      	str	r3, [r1, #16]
 8001a9a:	e002      	b.n	8001aa2 <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8001a9c:	6035      	str	r5, [r6, #0]
            break;
 8001a9e:	e000      	b.n	8001aa2 <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001aa0:	2201      	movs	r2, #1
  __HAL_UNLOCK(&pFlash);
 8001aa2:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <HAL_FLASHEx_Erase+0x9c>)
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	7619      	strb	r1, [r3, #24]
}
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8001aac:	2202      	movs	r2, #2
}
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000558 	.word	0x20000558
 8001ab8:	40022000 	.word	0x40022000

08001abc <LL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Force and Release reset on clock of GPIOx Port */
  if (GPIOx == GPIOA)
 8001abc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001ac0:	d010      	beq.n	8001ae4 <LL_GPIO_DeInit+0x28>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOA);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOA);
  }
  else if (GPIOx == GPIOB)
 8001ac2:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <LL_GPIO_DeInit+0xcc>)
 8001ac4:	4298      	cmp	r0, r3
 8001ac6:	d018      	beq.n	8001afa <LL_GPIO_DeInit+0x3e>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOB);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOB);
  }
  else if (GPIOx == GPIOC)
 8001ac8:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <LL_GPIO_DeInit+0xd0>)
 8001aca:	4298      	cmp	r0, r3
 8001acc:	d023      	beq.n	8001b16 <LL_GPIO_DeInit+0x5a>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOC);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOC);
  }
#if defined(GPIOD)
  else if (GPIOx == GPIOD)
 8001ace:	4b30      	ldr	r3, [pc, #192]	; (8001b90 <LL_GPIO_DeInit+0xd4>)
 8001ad0:	4298      	cmp	r0, r3
 8001ad2:	d02e      	beq.n	8001b32 <LL_GPIO_DeInit+0x76>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOD);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOD);
  }
#endif /* GPIOD */
#if defined(GPIOE)
  else if (GPIOx == GPIOE)
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <LL_GPIO_DeInit+0xd8>)
 8001ad6:	4298      	cmp	r0, r3
 8001ad8:	d039      	beq.n	8001b4e <LL_GPIO_DeInit+0x92>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOE);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOE);
  }
#endif /* GPIOE */
#if defined(GPIOF)
  else if (GPIOx == GPIOF)
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <LL_GPIO_DeInit+0xdc>)
 8001adc:	4298      	cmp	r0, r3
 8001ade:	d044      	beq.n	8001b6a <LL_GPIO_DeInit+0xae>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOH);
  }
#endif /* GPIOH */
  else
  {
    status = ERROR;
 8001ae0:	2000      	movs	r0, #0
  }

  return (status);
}
 8001ae2:	4770      	bx	lr
  SET_BIT(RCC->AHBRSTR, Periphs);
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <LL_GPIO_DeInit+0xe0>)
 8001ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(RCC->AHBRSTR, Periphs);
 8001aee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001af0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001af4:	629a      	str	r2, [r3, #40]	; 0x28
  ErrorStatus status = SUCCESS;
 8001af6:	2001      	movs	r0, #1
 8001af8:	4770      	bx	lr
  SET_BIT(RCC->AHBRSTR, Periphs);
 8001afa:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001afe:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(RCC->AHBRSTR, Periphs);
 8001b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
 8001b12:	2001      	movs	r0, #1
 8001b14:	4770      	bx	lr
  SET_BIT(RCC->AHBRSTR, Periphs);
 8001b16:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001b1a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b20:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(RCC->AHBRSTR, Periphs);
 8001b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b28:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b2e:	2001      	movs	r0, #1
 8001b30:	4770      	bx	lr
  SET_BIT(RCC->AHBRSTR, Periphs);
 8001b32:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001b36:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8001b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b3c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(RCC->AHBRSTR, Periphs);
 8001b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b44:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	4770      	bx	lr
  SET_BIT(RCC->AHBRSTR, Periphs);
 8001b4e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001b52:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b58:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(RCC->AHBRSTR, Periphs);
 8001b5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b60:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
 8001b66:	2001      	movs	r0, #1
 8001b68:	4770      	bx	lr
  SET_BIT(RCC->AHBRSTR, Periphs);
 8001b6a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001b6e:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001b72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b74:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(RCC->AHBRSTR, Periphs);
 8001b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b7c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001b80:	629a      	str	r2, [r3, #40]	; 0x28
 8001b82:	2001      	movs	r0, #1
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	48000400 	.word	0x48000400
 8001b8c:	48000800 	.word	0x48000800
 8001b90:	48000c00 	.word	0x48000c00
 8001b94:	48001000 	.word	0x48001000
 8001b98:	48001400 	.word	0x48001400
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001ba0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001ba2:	680a      	ldr	r2, [r1, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	fa92 f2a2 	rbit	r2, r2
 8001ba8:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001bac:	e018      	b.n	8001be0 <LL_GPIO_Init+0x40>
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001bae:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001bb0:	68c4      	ldr	r4, [r0, #12]
 8001bb2:	fa93 f5a3 	rbit	r5, r3
 8001bb6:	fab5 f585 	clz	r5, r5
 8001bba:	006d      	lsls	r5, r5, #1
 8001bbc:	2703      	movs	r7, #3
 8001bbe:	fa07 f505 	lsl.w	r5, r7, r5
 8001bc2:	ea24 0405 	bic.w	r4, r4, r5
 8001bc6:	fa93 f5a3 	rbit	r5, r3
 8001bca:	fab5 f585 	clz	r5, r5
 8001bce:	006d      	lsls	r5, r5, #1
 8001bd0:	fa06 f505 	lsl.w	r5, r6, r5
 8001bd4:	432c      	orrs	r4, r5
 8001bd6:	60c4      	str	r4, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001bd8:	684c      	ldr	r4, [r1, #4]
 8001bda:	2c02      	cmp	r4, #2
 8001bdc:	d036      	beq.n	8001c4c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 8001bde:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001be0:	680b      	ldr	r3, [r1, #0]
 8001be2:	fa33 f402 	lsrs.w	r4, r3, r2
 8001be6:	d064      	beq.n	8001cb2 <LL_GPIO_Init+0x112>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001be8:	2401      	movs	r4, #1
 8001bea:	4094      	lsls	r4, r2
    if (currentpin)
 8001bec:	4023      	ands	r3, r4
 8001bee:	d0f6      	beq.n	8001bde <LL_GPIO_Init+0x3e>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001bf0:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001bf2:	6804      	ldr	r4, [r0, #0]
 8001bf4:	fa93 f5a3 	rbit	r5, r3
 8001bf8:	fab5 f585 	clz	r5, r5
 8001bfc:	006d      	lsls	r5, r5, #1
 8001bfe:	2703      	movs	r7, #3
 8001c00:	fa07 f505 	lsl.w	r5, r7, r5
 8001c04:	ea24 0405 	bic.w	r4, r4, r5
 8001c08:	fa93 f5a3 	rbit	r5, r3
 8001c0c:	fab5 f585 	clz	r5, r5
 8001c10:	006d      	lsls	r5, r5, #1
 8001c12:	fa06 f505 	lsl.w	r5, r6, r5
 8001c16:	432c      	orrs	r4, r5
 8001c18:	6004      	str	r4, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001c1a:	684c      	ldr	r4, [r1, #4]
 8001c1c:	3c01      	subs	r4, #1
 8001c1e:	2c01      	cmp	r4, #1
 8001c20:	d8c5      	bhi.n	8001bae <LL_GPIO_Init+0xe>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001c22:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001c24:	6884      	ldr	r4, [r0, #8]
 8001c26:	fa93 f5a3 	rbit	r5, r3
 8001c2a:	fab5 f585 	clz	r5, r5
 8001c2e:	006d      	lsls	r5, r5, #1
 8001c30:	fa07 f505 	lsl.w	r5, r7, r5
 8001c34:	ea24 0405 	bic.w	r4, r4, r5
 8001c38:	fa93 f5a3 	rbit	r5, r3
 8001c3c:	fab5 f585 	clz	r5, r5
 8001c40:	006d      	lsls	r5, r5, #1
 8001c42:	fa06 f505 	lsl.w	r5, r6, r5
 8001c46:	432c      	orrs	r4, r5
 8001c48:	6084      	str	r4, [r0, #8]
 8001c4a:	e7b0      	b.n	8001bae <LL_GPIO_Init+0xe>
 8001c4c:	fa93 f4a3 	rbit	r4, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001c50:	fab4 f484 	clz	r4, r4
 8001c54:	2c07      	cmp	r4, #7
 8001c56:	d815      	bhi.n	8001c84 <LL_GPIO_Init+0xe4>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c58:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001c5a:	6a04      	ldr	r4, [r0, #32]
 8001c5c:	fa93 f6a3 	rbit	r6, r3
 8001c60:	fab6 f686 	clz	r6, r6
 8001c64:	00b6      	lsls	r6, r6, #2
 8001c66:	270f      	movs	r7, #15
 8001c68:	fa07 f606 	lsl.w	r6, r7, r6
 8001c6c:	ea24 0406 	bic.w	r4, r4, r6
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	fa05 f303 	lsl.w	r3, r5, r3
 8001c7e:	4323      	orrs	r3, r4
 8001c80:	6203      	str	r3, [r0, #32]
 8001c82:	e7ac      	b.n	8001bde <LL_GPIO_Init+0x3e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c84:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001c86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	fa93 f6a3 	rbit	r6, r3
 8001c8e:	fab6 f686 	clz	r6, r6
 8001c92:	00b6      	lsls	r6, r6, #2
 8001c94:	270f      	movs	r7, #15
 8001c96:	fa07 f606 	lsl.w	r6, r7, r6
 8001c9a:	ea25 0506 	bic.w	r5, r5, r6
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	fa04 f303 	lsl.w	r3, r4, r3
 8001cac:	432b      	orrs	r3, r5
 8001cae:	6243      	str	r3, [r0, #36]	; 0x24
 8001cb0:	e795      	b.n	8001bde <LL_GPIO_Init+0x3e>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001cb2:	684a      	ldr	r2, [r1, #4]
 8001cb4:	3a01      	subs	r2, #1
 8001cb6:	2a01      	cmp	r2, #1
 8001cb8:	d902      	bls.n	8001cc0 <LL_GPIO_Init+0x120>
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8001cba:	2001      	movs	r0, #1
 8001cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8001cbe:	4770      	bx	lr
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001cc0:	68c9      	ldr	r1, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001cc2:	6842      	ldr	r2, [r0, #4]
 8001cc4:	ea22 0203 	bic.w	r2, r2, r3
 8001cc8:	fb01 f303 	mul.w	r3, r1, r3
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	6043      	str	r3, [r0, #4]
 8001cd0:	e7f3      	b.n	8001cba <LL_GPIO_Init+0x11a>
	...

08001cd4 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <RCC_GetHCLKClockFreq+0x10>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001cd8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cdc:	4a02      	ldr	r2, [pc, #8]	; (8001ce8 <RCC_GetHCLKClockFreq+0x14>)
 8001cde:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ce0:	40d8      	lsrs	r0, r3
 8001ce2:	4770      	bx	lr
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	08001f20 	.word	0x08001f20

08001cec <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <RCC_GetPCLK1ClockFreq+0x10>)
 8001cee:	685b      	ldr	r3, [r3, #4]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001cf0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001cf4:	4a02      	ldr	r2, [pc, #8]	; (8001d00 <RCC_GetPCLK1ClockFreq+0x14>)
 8001cf6:	5cd3      	ldrb	r3, [r2, r3]
}
 8001cf8:	40d8      	lsrs	r0, r3
 8001cfa:	4770      	bx	lr
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	08001f30 	.word	0x08001f30

08001d04 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <RCC_GetPCLK2ClockFreq+0x10>)
 8001d06:	685b      	ldr	r3, [r3, #4]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001d08:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001d0c:	4a02      	ldr	r2, [pc, #8]	; (8001d18 <RCC_GetPCLK2ClockFreq+0x14>)
 8001d0e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001d10:	40d8      	lsrs	r0, r3
 8001d12:	4770      	bx	lr
 8001d14:	40021000 	.word	0x40021000
 8001d18:	08001f30 	.word	0x08001f30

08001d1c <RCC_PLL_GetFreqDomain_SYS>:
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8001d24:	b90b      	cbnz	r3, 8001d2a <RCC_PLL_GetFreqDomain_SYS+0xe>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8001d28:	e000      	b.n	8001d2c <RCC_PLL_GetFreqDomain_SYS+0x10>
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <RCC_PLL_GetFreqDomain_SYS+0x44>)
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8001d2e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8001d30:	f000 000f 	and.w	r0, r0, #15
      break;
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001d34:	3001      	adds	r0, #1
 8001d36:	fbb3 f0f0 	udiv	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001d3a:	6853      	ldr	r3, [r2, #4]
 8001d3c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d40:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d44:	fa92 f2a2 	rbit	r2, r2
 8001d48:	fab2 f282 	clz	r2, r2
 8001d4c:	40d3      	lsrs	r3, r2
 8001d4e:	3302      	adds	r3, #2
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001d50:	fb03 f000 	mul.w	r0, r3, r0
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	003d0900 	.word	0x003d0900
 8001d60:	007a1200 	.word	0x007a1200

08001d64 <RCC_GetSystemClockFreq>:
{
 8001d64:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <RCC_GetSystemClockFreq+0x18>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d102      	bne.n	8001d78 <RCC_GetSystemClockFreq+0x14>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001d72:	f7ff ffd3 	bl	8001d1c <RCC_PLL_GetFreqDomain_SYS>
}
 8001d76:	bd08      	pop	{r3, pc}
      frequency = HSI_VALUE;
 8001d78:	4801      	ldr	r0, [pc, #4]	; (8001d80 <RCC_GetSystemClockFreq+0x1c>)
  return frequency;
 8001d7a:	e7fc      	b.n	8001d76 <RCC_GetSystemClockFreq+0x12>
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	007a1200 	.word	0x007a1200

08001d84 <LL_RCC_GetSystemClocksFreq>:
{
 8001d84:	b510      	push	{r4, lr}
 8001d86:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001d88:	f7ff ffec 	bl	8001d64 <RCC_GetSystemClockFreq>
 8001d8c:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001d8e:	f7ff ffa1 	bl	8001cd4 <RCC_GetHCLKClockFreq>
 8001d92:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001d94:	f7ff ffaa 	bl	8001cec <RCC_GetPCLK1ClockFreq>
 8001d98:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001d9a:	6860      	ldr	r0, [r4, #4]
 8001d9c:	f7ff ffb2 	bl	8001d04 <RCC_GetPCLK2ClockFreq>
 8001da0:	60e0      	str	r0, [r4, #12]
}
 8001da2:	bd10      	pop	{r4, pc}

08001da4 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001da4:	4b01      	ldr	r3, [pc, #4]	; (8001dac <LL_SetSystemCoreClock+0x8>)
 8001da6:	6018      	str	r0, [r3, #0]
}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000004 	.word	0x20000004

08001db0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db0:	4915      	ldr	r1, [pc, #84]	; (8001e08 <SystemInit+0x58>)
 8001db2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001db6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <SystemInit+0x5c>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001dc8:	6858      	ldr	r0, [r3, #4]
 8001dca:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <SystemInit+0x60>)
 8001dcc:	4002      	ands	r2, r0
 8001dce:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001dd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dda:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001de2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001dea:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dee:	f022 020f 	bic.w	r2, r2, #15
 8001df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001df4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001df6:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <SystemInit+0x64>)
 8001df8:	4002      	ands	r2, r0
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e04:	608b      	str	r3, [r1, #8]
#endif
}
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	f87fc00c 	.word	0xf87fc00c
 8001e14:	ff00fccc 	.word	0xff00fccc

08001e18 <__libc_init_array>:
 8001e18:	b570      	push	{r4, r5, r6, lr}
 8001e1a:	4e0d      	ldr	r6, [pc, #52]	; (8001e50 <__libc_init_array+0x38>)
 8001e1c:	4c0d      	ldr	r4, [pc, #52]	; (8001e54 <__libc_init_array+0x3c>)
 8001e1e:	1ba4      	subs	r4, r4, r6
 8001e20:	10a4      	asrs	r4, r4, #2
 8001e22:	2500      	movs	r5, #0
 8001e24:	42a5      	cmp	r5, r4
 8001e26:	d109      	bne.n	8001e3c <__libc_init_array+0x24>
 8001e28:	4e0b      	ldr	r6, [pc, #44]	; (8001e58 <__libc_init_array+0x40>)
 8001e2a:	4c0c      	ldr	r4, [pc, #48]	; (8001e5c <__libc_init_array+0x44>)
 8001e2c:	f000 f818 	bl	8001e60 <_init>
 8001e30:	1ba4      	subs	r4, r4, r6
 8001e32:	10a4      	asrs	r4, r4, #2
 8001e34:	2500      	movs	r5, #0
 8001e36:	42a5      	cmp	r5, r4
 8001e38:	d105      	bne.n	8001e46 <__libc_init_array+0x2e>
 8001e3a:	bd70      	pop	{r4, r5, r6, pc}
 8001e3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e40:	4798      	blx	r3
 8001e42:	3501      	adds	r5, #1
 8001e44:	e7ee      	b.n	8001e24 <__libc_init_array+0xc>
 8001e46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e4a:	4798      	blx	r3
 8001e4c:	3501      	adds	r5, #1
 8001e4e:	e7f2      	b.n	8001e36 <__libc_init_array+0x1e>
 8001e50:	08001f38 	.word	0x08001f38
 8001e54:	08001f38 	.word	0x08001f38
 8001e58:	08001f38 	.word	0x08001f38
 8001e5c:	08001f3c 	.word	0x08001f3c

08001e60 <_init>:
 8001e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e62:	bf00      	nop
 8001e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e66:	bc08      	pop	{r3}
 8001e68:	469e      	mov	lr, r3
 8001e6a:	4770      	bx	lr

08001e6c <_fini>:
 8001e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6e:	bf00      	nop
 8001e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e72:	bc08      	pop	{r3}
 8001e74:	469e      	mov	lr, r3
 8001e76:	4770      	bx	lr
