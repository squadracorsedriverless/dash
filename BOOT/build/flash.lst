ARM GAS  /tmp/ccepCjKs.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"flash.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/BLT/flash.c"
  20              		.section	.text.FlashInitBlock,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	FlashInitBlock:
  27              	.LVL0:
  28              	.LFB131:
   1:Core/Src/BLT/flash.c **** /************************************************************************************//**
   2:Core/Src/BLT/flash.c **** * \file         Source/ARMCM4_STM32F3/flash.c
   3:Core/Src/BLT/flash.c **** * \brief        Bootloader flash driver source file.
   4:Core/Src/BLT/flash.c **** * \ingroup      Target_ARMCM4_STM32F3
   5:Core/Src/BLT/flash.c **** * \internal
   6:Core/Src/BLT/flash.c **** *----------------------------------------------------------------------------------------
   7:Core/Src/BLT/flash.c **** *                          C O P Y R I G H T
   8:Core/Src/BLT/flash.c **** *----------------------------------------------------------------------------------------
   9:Core/Src/BLT/flash.c **** *   Copyright (c) 2016  by Feaser    http://www.feaser.com    All rights reserved
  10:Core/Src/BLT/flash.c **** *
  11:Core/Src/BLT/flash.c **** *----------------------------------------------------------------------------------------
  12:Core/Src/BLT/flash.c **** *                            L I C E N S E
  13:Core/Src/BLT/flash.c **** *----------------------------------------------------------------------------------------
  14:Core/Src/BLT/flash.c **** * This file is part of OpenBLT. OpenBLT is free software: you can redistribute it and/or
  15:Core/Src/BLT/flash.c **** * modify it under the terms of the GNU General Public License as published by the Free
  16:Core/Src/BLT/flash.c **** * Software Foundation, either version 3 of the License, or (at your option) any later
  17:Core/Src/BLT/flash.c **** * version.
  18:Core/Src/BLT/flash.c **** *
  19:Core/Src/BLT/flash.c **** * OpenBLT is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  20:Core/Src/BLT/flash.c **** * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  21:Core/Src/BLT/flash.c **** * PURPOSE. See the GNU General Public License for more details.
  22:Core/Src/BLT/flash.c **** *
  23:Core/Src/BLT/flash.c **** * You have received a copy of the GNU General Public License along with OpenBLT. It
  24:Core/Src/BLT/flash.c **** * should be located in ".\Doc\license.html". If not, contact Feaser to obtain a copy.
  25:Core/Src/BLT/flash.c **** *
  26:Core/Src/BLT/flash.c **** * \endinternal
  27:Core/Src/BLT/flash.c **** ****************************************************************************************/
  28:Core/Src/BLT/flash.c **** 
  29:Core/Src/BLT/flash.c **** /****************************************************************************************
  30:Core/Src/BLT/flash.c **** * Include files
ARM GAS  /tmp/ccepCjKs.s 			page 2


  31:Core/Src/BLT/flash.c **** ****************************************************************************************/
  32:Core/Src/BLT/flash.c **** #include "BLT/boot.h"                                /* bootloader generic header          */
  33:Core/Src/BLT/flash.c **** #include "stm32f3xx.h"                           /* STM32 CPU and HAL header           */
  34:Core/Src/BLT/flash.c **** 
  35:Core/Src/BLT/flash.c **** 
  36:Core/Src/BLT/flash.c **** /****************************************************************************************
  37:Core/Src/BLT/flash.c **** * Macro definitions
  38:Core/Src/BLT/flash.c **** ****************************************************************************************/
  39:Core/Src/BLT/flash.c **** /** \brief Value for an invalid flash address. */
  40:Core/Src/BLT/flash.c **** #define FLASH_INVALID_ADDRESS           (0xffffffff)
  41:Core/Src/BLT/flash.c **** /** \brief Standard size of a flash block for writing. */
  42:Core/Src/BLT/flash.c **** #define FLASH_WRITE_BLOCK_SIZE          (512)
  43:Core/Src/BLT/flash.c **** /** \brief Standard size of a flash sector for erasing. */
  44:Core/Src/BLT/flash.c **** #define FLASH_ERASE_SECTOR_SIZE         (2048)
  45:Core/Src/BLT/flash.c **** /** \brief Total numbers of segments in array flashLayout[]. */
  46:Core/Src/BLT/flash.c **** #define FLASH_TOTAL_SEGMENTS            (sizeof(flashLayout)/sizeof(flashLayout[0]))
  47:Core/Src/BLT/flash.c **** /** \brief Index of the last segment in array flashLayout[]. */
  48:Core/Src/BLT/flash.c **** #define FLASH_LAST_SEGMENT_IDX          (FLASH_TOTAL_SEGMENTS-1)
  49:Core/Src/BLT/flash.c **** /** \brief Start address of the bootloader programmable flash. */
  50:Core/Src/BLT/flash.c **** #define FLASH_START_ADDRESS             (flashLayout[0].sector_start)
  51:Core/Src/BLT/flash.c **** /** \brief End address of the bootloader programmable flash. */
  52:Core/Src/BLT/flash.c **** #define FLASH_END_ADDRESS               (flashLayout[FLASH_LAST_SEGMENT_IDX].sector_start + \
  53:Core/Src/BLT/flash.c ****                                          flashLayout[FLASH_LAST_SEGMENT_IDX].sector_size - 1)
  54:Core/Src/BLT/flash.c **** /** \brief Offset into the user program's vector table where the checksum is located.
  55:Core/Src/BLT/flash.c ****  *         For this target it is set to the end of the vector table. Note that the
  56:Core/Src/BLT/flash.c ****  *         value can be overriden in blt_conf.h, because the size of the vector table
  57:Core/Src/BLT/flash.c ****  *         could vary. When changing this value, don't forget to update the location
  58:Core/Src/BLT/flash.c ****  *         of the checksum in the user program accordingly. Otherwise the checksum
  59:Core/Src/BLT/flash.c ****  *         verification will always fail.
  60:Core/Src/BLT/flash.c ****  */
  61:Core/Src/BLT/flash.c **** #ifndef BOOT_FLASH_VECTOR_TABLE_CS_OFFSET
  62:Core/Src/BLT/flash.c **** #define BOOT_FLASH_VECTOR_TABLE_CS_OFFSET    (0x188)
  63:Core/Src/BLT/flash.c **** #endif
  64:Core/Src/BLT/flash.c **** 
  65:Core/Src/BLT/flash.c **** 
  66:Core/Src/BLT/flash.c **** /****************************************************************************************
  67:Core/Src/BLT/flash.c **** * Plausibility checks
  68:Core/Src/BLT/flash.c **** ****************************************************************************************/
  69:Core/Src/BLT/flash.c **** #if (BOOT_FLASH_VECTOR_TABLE_CS_OFFSET >= FLASH_WRITE_BLOCK_SIZE)
  70:Core/Src/BLT/flash.c **** #error "BOOT_FLASH_VECTOR_TABLE_CS_OFFSET is set too high. It must be located in the first writable
  71:Core/Src/BLT/flash.c **** #endif
  72:Core/Src/BLT/flash.c **** 
  73:Core/Src/BLT/flash.c **** #ifndef BOOT_FLASH_CUSTOM_LAYOUT_ENABLE
  74:Core/Src/BLT/flash.c **** #define BOOT_FLASH_CUSTOM_LAYOUT_ENABLE (0u)
  75:Core/Src/BLT/flash.c **** #endif
  76:Core/Src/BLT/flash.c **** 
  77:Core/Src/BLT/flash.c **** 
  78:Core/Src/BLT/flash.c **** /****************************************************************************************
  79:Core/Src/BLT/flash.c **** * Type definitions
  80:Core/Src/BLT/flash.c **** ****************************************************************************************/
  81:Core/Src/BLT/flash.c **** /** \brief Flash sector descriptor type. Note that in this driver the word sector is
  82:Core/Src/BLT/flash.c ****  *         synonym to the word page, which is used in the HAL driver.
  83:Core/Src/BLT/flash.c ****  */
  84:Core/Src/BLT/flash.c **** typedef struct
  85:Core/Src/BLT/flash.c **** {
  86:Core/Src/BLT/flash.c ****   blt_addr   sector_start;                       /**< sector start address             */
  87:Core/Src/BLT/flash.c ****   blt_int32u sector_size;                        /**< sector size in bytes             */
ARM GAS  /tmp/ccepCjKs.s 			page 3


  88:Core/Src/BLT/flash.c **** } tFlashSector;
  89:Core/Src/BLT/flash.c **** 
  90:Core/Src/BLT/flash.c **** /** \brief    Structure type for grouping flash block information.
  91:Core/Src/BLT/flash.c ****  *  \details  Programming is done per block of max FLASH_WRITE_BLOCK_SIZE. for this a
  92:Core/Src/BLT/flash.c ****  *            flash block manager is implemented in this driver. this flash block manager
  93:Core/Src/BLT/flash.c ****  *            depends on this flash block info structure. It holds the base address of
  94:Core/Src/BLT/flash.c ****  *            the flash block and the data that should be programmed into the flash
  95:Core/Src/BLT/flash.c ****  *            block. The .base_addr must be a multiple of FLASH_WRITE_BLOCK_SIZE.
  96:Core/Src/BLT/flash.c ****  */
  97:Core/Src/BLT/flash.c **** typedef struct
  98:Core/Src/BLT/flash.c **** {
  99:Core/Src/BLT/flash.c ****   blt_addr  base_addr;
 100:Core/Src/BLT/flash.c ****   blt_int8u data[FLASH_WRITE_BLOCK_SIZE];
 101:Core/Src/BLT/flash.c **** } tFlashBlockInfo;
 102:Core/Src/BLT/flash.c **** 
 103:Core/Src/BLT/flash.c **** 
 104:Core/Src/BLT/flash.c **** /****************************************************************************************
 105:Core/Src/BLT/flash.c **** * Hook functions
 106:Core/Src/BLT/flash.c **** ****************************************************************************************/
 107:Core/Src/BLT/flash.c **** #if (BOOT_FLASH_CRYPTO_HOOKS_ENABLE > 0)
 108:Core/Src/BLT/flash.c **** extern blt_bool FlashCryptoDecryptDataHook(blt_int8u * data, blt_int32u size);
 109:Core/Src/BLT/flash.c **** #endif
 110:Core/Src/BLT/flash.c **** 
 111:Core/Src/BLT/flash.c **** 
 112:Core/Src/BLT/flash.c **** /****************************************************************************************
 113:Core/Src/BLT/flash.c **** * Function prototypes
 114:Core/Src/BLT/flash.c **** ****************************************************************************************/
 115:Core/Src/BLT/flash.c **** static blt_bool  FlashInitBlock(tFlashBlockInfo *block, blt_addr address);
 116:Core/Src/BLT/flash.c **** static tFlashBlockInfo *FlashSwitchBlock(tFlashBlockInfo *block, blt_addr base_addr);
 117:Core/Src/BLT/flash.c **** static blt_bool  FlashAddToBlock(tFlashBlockInfo *block, blt_addr address,
 118:Core/Src/BLT/flash.c ****                                  blt_int8u *data, blt_int32u len);
 119:Core/Src/BLT/flash.c **** static blt_bool  FlashWriteBlock(tFlashBlockInfo *block);
 120:Core/Src/BLT/flash.c **** 
 121:Core/Src/BLT/flash.c **** 
 122:Core/Src/BLT/flash.c **** /****************************************************************************************
 123:Core/Src/BLT/flash.c **** * Local constant declarations
 124:Core/Src/BLT/flash.c **** ****************************************************************************************/
 125:Core/Src/BLT/flash.c **** /** \brief   If desired, it is possible to set BOOT_FLASH_CUSTOM_LAYOUT_ENABLE to > 0
 126:Core/Src/BLT/flash.c ****  *           in blt_conf.h and then implement your own version of the flashLayout[] table
 127:Core/Src/BLT/flash.c ****  *           in a source-file with the name flash_layout.c. This way you customize the
 128:Core/Src/BLT/flash.c ****  *           flash memory size reserved for the bootloader, without having to modify
 129:Core/Src/BLT/flash.c ****  *           the flashLayout[] table in this file directly. This file will then include
 130:Core/Src/BLT/flash.c ****  *           flash_layout.c so there is no need to compile it additionally with your
 131:Core/Src/BLT/flash.c ****  *           project.
 132:Core/Src/BLT/flash.c ****  */
 133:Core/Src/BLT/flash.c **** #if (BOOT_FLASH_CUSTOM_LAYOUT_ENABLE == 0)
 134:Core/Src/BLT/flash.c **** /** \brief   Array wit the layout of the flash memory.
 135:Core/Src/BLT/flash.c ****  *  \details Also controls what part of the flash memory is reserved for the bootloader.
 136:Core/Src/BLT/flash.c ****  *           If the bootloader size changes, the reserved sectors for the bootloader
 137:Core/Src/BLT/flash.c ****  *           might need adjustment to make sure the bootloader doesn't get overwritten.
 138:Core/Src/BLT/flash.c ****  */
 139:Core/Src/BLT/flash.c **** static const tFlashSector flashLayout[] =
 140:Core/Src/BLT/flash.c **** {
 141:Core/Src/BLT/flash.c ****   /* space is reserved for a bootloader configuration with all supported communication
 142:Core/Src/BLT/flash.c ****    * interfaces enabled. when for example only UART is needed, then the space required
 143:Core/Src/BLT/flash.c ****    * for the bootloader can be made a lot smaller here.
 144:Core/Src/BLT/flash.c ****    */
ARM GAS  /tmp/ccepCjKs.s 			page 4


 145:Core/Src/BLT/flash.c ****   /* { 0x08000000, 0x00800 },           flash sector  0 - 2kb (reserved for bootloader)*/
 146:Core/Src/BLT/flash.c ****   /* { 0x08000800, 0x00800 },           flash sector  1 - 2kb (reserved for bootloader)*/
 147:Core/Src/BLT/flash.c ****   /* { 0x08001000, 0x00800 },           flash sector  2 - 2kb (reserved for bootloader)*/
 148:Core/Src/BLT/flash.c ****   /* { 0x08001800, 0x00800 },           flash sector  3 - 2kb (reserved for bootloader)*/
 149:Core/Src/BLT/flash.c ****   { 0x08002000, 0x00800 },              /* flash sector  4 - 2kb                       */
 150:Core/Src/BLT/flash.c ****   { 0x08002800, 0x00800 },              /* flash sector  5 - 2kb                       */
 151:Core/Src/BLT/flash.c ****   { 0x08003000, 0x00800 },              /* flash sector  6 - 2kb                       */
 152:Core/Src/BLT/flash.c ****   { 0x08003800, 0x00800 },              /* flash sector  7 - 2kb                       */
 153:Core/Src/BLT/flash.c ****   { 0x08004000, 0x00800 },              /* flash sector  8 - 2kb                       */
 154:Core/Src/BLT/flash.c ****   { 0x08004800, 0x00800 },              /* flash sector  9 - 2kb                       */
 155:Core/Src/BLT/flash.c ****   { 0x08005000, 0x00800 },              /* flash sector 10 - 2kb                       */
 156:Core/Src/BLT/flash.c ****   { 0x08005800, 0x00800 },              /* flash sector 11 - 2kb                       */
 157:Core/Src/BLT/flash.c ****   { 0x08006000, 0x00800 },              /* flash sector 12 - 2kb                       */
 158:Core/Src/BLT/flash.c ****   { 0x08006800, 0x00800 },              /* flash sector 13 - 2kb                       */
 159:Core/Src/BLT/flash.c ****   { 0x08007000, 0x00800 },              /* flash sector 14 - 2kb                       */
 160:Core/Src/BLT/flash.c ****   { 0x08007800, 0x00800 },              /* flash sector 15 - 2kb                       */
 161:Core/Src/BLT/flash.c **** #if (BOOT_NVM_SIZE_KB > 32)
 162:Core/Src/BLT/flash.c ****   { 0x08008000, 0x08000 },              /* flash sectors 16 to 31 - 32kb               */
 163:Core/Src/BLT/flash.c **** #endif
 164:Core/Src/BLT/flash.c **** #if (BOOT_NVM_SIZE_KB > 64)
 165:Core/Src/BLT/flash.c ****   { 0x08010000, 0x10000 },              /* flash sectors 32 to 63 - 64kb               */
 166:Core/Src/BLT/flash.c **** #endif
 167:Core/Src/BLT/flash.c **** #if (BOOT_NVM_SIZE_KB > 128)
 168:Core/Src/BLT/flash.c ****   { 0x08020000, 0x20000 },              /* flash sectors 64 to 127 - 128kb             */
 169:Core/Src/BLT/flash.c **** #endif
 170:Core/Src/BLT/flash.c **** #if (BOOT_NVM_SIZE_KB > 256)
 171:Core/Src/BLT/flash.c ****   { 0x08040000, 0x40000 },              /* flash sectors 128 to 255 - 256kb            */
 172:Core/Src/BLT/flash.c **** #endif
 173:Core/Src/BLT/flash.c **** #if (BOOT_NVM_SIZE_KB > 512)
 174:Core/Src/BLT/flash.c **** #error "BOOT_NVM_SIZE_KB > 512 is currently not supported."
 175:Core/Src/BLT/flash.c **** #endif
 176:Core/Src/BLT/flash.c **** };
 177:Core/Src/BLT/flash.c **** #else
 178:Core/Src/BLT/flash.c **** static const tFlashSector flashLayout[] =
 179:Core/Src/BLT/flash.c **** {
 180:Core/Src/BLT/flash.c ****   /* space is reserved for a bootloader configuration with all supported communication
 181:Core/Src/BLT/flash.c ****    * interfaces enabled. when for example only UART is needed, then the space required
 182:Core/Src/BLT/flash.c ****    * for the bootloader can be made a lot smaller here.
 183:Core/Src/BLT/flash.c ****    */
 184:Core/Src/BLT/flash.c ****   /* { 0x08000000, 0x00800 },           flash sector  0 - 2kb (reserved for bootloader)*/
 185:Core/Src/BLT/flash.c ****   /* { 0x08000800, 0x00800 },           flash sector  1 - 2kb (reserved for bootloader)*/
 186:Core/Src/BLT/flash.c ****   /* { 0x08001000, 0x00800 },           flash sector  2 - 2kb (reserved for bootloader)*/
 187:Core/Src/BLT/flash.c ****   /* { 0x08001800, 0x00800 },           flash sector  3 - 2kb (reserved for bootloader)*/
 188:Core/Src/BLT/flash.c ****   /*{ 0x08002000, 0x00800 },            flash sector  4 - 2kb (reserved for bootloader)*/
 189:Core/Src/BLT/flash.c ****   /*{ 0x08002800, 0x00800 },            flash sector  5 - 2kb (reserved for bootloader)*/
 190:Core/Src/BLT/flash.c ****   /*{ 0x08003000, 0x00800 },            flash sector  6 - 2kb (reserved for bootloader)*/
 191:Core/Src/BLT/flash.c ****   /*{ 0x08003800, 0x00800 },            flash sector  7 - 2kb (reserved for bootloader)*/
 192:Core/Src/BLT/flash.c ****   { 0x08004000, 0x00800 },              /* flash sector  8 - 2kb                       */
 193:Core/Src/BLT/flash.c ****   { 0x08004800, 0x00800 },              /* flash sector  9 - 2kb                       */
 194:Core/Src/BLT/flash.c ****   { 0x08005000, 0x00800 },              /* flash sector 10 - 2kb                       */
 195:Core/Src/BLT/flash.c ****   { 0x08005800, 0x00800 },              /* flash sector 11 - 2kb                       */
 196:Core/Src/BLT/flash.c ****   { 0x08006000, 0x00800 },              /* flash sector 12 - 2kb                       */
 197:Core/Src/BLT/flash.c ****   { 0x08006800, 0x00800 },              /* flash sector 13 - 2kb                       */
 198:Core/Src/BLT/flash.c ****   { 0x08007000, 0x00800 },              /* flash sector 14 - 2kb                       */
 199:Core/Src/BLT/flash.c ****   { 0x08007800, 0x00800 },              /* flash sector 15 - 2kb                       */
 200:Core/Src/BLT/flash.c ****   { 0x08008000, 0x08000 },              /* flash sectors 16 to 31 - 32kb               */
 201:Core/Src/BLT/flash.c ****   { 0x08010000, 0x10000 },              /* flash sectors 32 to 63 - 64kb               */
ARM GAS  /tmp/ccepCjKs.s 			page 5


 202:Core/Src/BLT/flash.c ****   { 0x08020000, 0x20000 },              /* flash sectors 64 to 127 - 128kb             */
 203:Core/Src/BLT/flash.c **** };
 204:Core/Src/BLT/flash.c **** #endif /* BOOT_FLASH_CUSTOM_LAYOUT_ENABLE == 0 */
 205:Core/Src/BLT/flash.c **** 
 206:Core/Src/BLT/flash.c **** 
 207:Core/Src/BLT/flash.c **** /****************************************************************************************
 208:Core/Src/BLT/flash.c **** * Local data declarations
 209:Core/Src/BLT/flash.c **** ****************************************************************************************/
 210:Core/Src/BLT/flash.c **** /** \brief   Local variable with information about the flash block that is currently
 211:Core/Src/BLT/flash.c ****  *           being operated on.
 212:Core/Src/BLT/flash.c ****  *  \details The smallest amount of flash that can be programmed is
 213:Core/Src/BLT/flash.c ****  *           FLASH_WRITE_BLOCK_SIZE. A flash block manager is implemented in this driver
 214:Core/Src/BLT/flash.c ****  *           and stores info in this variable. Whenever new data should be flashed, it
 215:Core/Src/BLT/flash.c ****  *           is first added to a RAM buffer, which is part of this variable. Whenever
 216:Core/Src/BLT/flash.c ****  *           the RAM buffer, which has the size of a flash block, is full or  data needs
 217:Core/Src/BLT/flash.c ****  *           to be written to a different block, the contents of the RAM buffer are
 218:Core/Src/BLT/flash.c ****  *           programmed to flash. The flash block manager requires some software
 219:Core/Src/BLT/flash.c ****  *           overhead, yet results is faster flash programming because data is first
 220:Core/Src/BLT/flash.c ****  *           harvested, ideally until there is enough to program an entire flash block,
 221:Core/Src/BLT/flash.c ****  *           before the flash device is actually operated on.
 222:Core/Src/BLT/flash.c ****  */
 223:Core/Src/BLT/flash.c **** static tFlashBlockInfo blockInfo;
 224:Core/Src/BLT/flash.c **** 
 225:Core/Src/BLT/flash.c **** /** \brief   Local variable with information about the flash boot block.
 226:Core/Src/BLT/flash.c ****  *  \details The first block of the user program holds the vector table, which on the
 227:Core/Src/BLT/flash.c ****  *           STM32 is also the where the checksum is written to. Is it likely that
 228:Core/Src/BLT/flash.c ****  *           the vector table is first flashed and then, at the end of the programming
 229:Core/Src/BLT/flash.c ****  *           sequence, the checksum. This means that this flash block need to be written
 230:Core/Src/BLT/flash.c ****  *           to twice. Normally this is not a problem with flash memory, as long as you
 231:Core/Src/BLT/flash.c ****  *           write the same values to those bytes that are not supposed to be changed
 232:Core/Src/BLT/flash.c ****  *           and the locations where you do write to are still in the erased 0xFF state.
 233:Core/Src/BLT/flash.c ****  *           Unfortunately, writing twice to flash this way, does not work reliably on
 234:Core/Src/BLT/flash.c ****  *           all micros. This is why we need to have an extra block, the bootblock,
 235:Core/Src/BLT/flash.c ****  *           placed under the management of the block manager. This way is it possible
 236:Core/Src/BLT/flash.c ****  *           to implement functionality so that the bootblock is only written to once
 237:Core/Src/BLT/flash.c ****  *           at the end of the programming sequence.
 238:Core/Src/BLT/flash.c ****  */
 239:Core/Src/BLT/flash.c **** static tFlashBlockInfo bootBlockInfo;
 240:Core/Src/BLT/flash.c **** 
 241:Core/Src/BLT/flash.c **** 
 242:Core/Src/BLT/flash.c **** /************************************************************************************//**
 243:Core/Src/BLT/flash.c **** ** \brief     Initializes the flash driver.
 244:Core/Src/BLT/flash.c **** ** \return    none.
 245:Core/Src/BLT/flash.c **** **
 246:Core/Src/BLT/flash.c **** ****************************************************************************************/
 247:Core/Src/BLT/flash.c **** void FlashInit(void)
 248:Core/Src/BLT/flash.c **** {
 249:Core/Src/BLT/flash.c ****   /* init the flash block info structs by setting the address to an invalid address */
 250:Core/Src/BLT/flash.c ****   blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 251:Core/Src/BLT/flash.c ****   bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 252:Core/Src/BLT/flash.c **** } /*** end of FlashInit ***/
 253:Core/Src/BLT/flash.c **** 
 254:Core/Src/BLT/flash.c **** 
 255:Core/Src/BLT/flash.c **** /************************************************************************************//**
 256:Core/Src/BLT/flash.c **** ** \brief     Reinitializes the flash driver.
 257:Core/Src/BLT/flash.c **** ** \return    none.
 258:Core/Src/BLT/flash.c **** **
ARM GAS  /tmp/ccepCjKs.s 			page 6


 259:Core/Src/BLT/flash.c **** ****************************************************************************************/
 260:Core/Src/BLT/flash.c **** void FlashReinit(void)
 261:Core/Src/BLT/flash.c **** {
 262:Core/Src/BLT/flash.c ****   /* init the flash block info structs by setting the address to an invalid address */
 263:Core/Src/BLT/flash.c ****   blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 264:Core/Src/BLT/flash.c ****   bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 265:Core/Src/BLT/flash.c **** } /*** end of FlashReinit ***/
 266:Core/Src/BLT/flash.c **** 
 267:Core/Src/BLT/flash.c **** 
 268:Core/Src/BLT/flash.c **** /************************************************************************************//**
 269:Core/Src/BLT/flash.c **** ** \brief     Writes the data to flash through a flash block manager. Note that this
 270:Core/Src/BLT/flash.c **** **            function also checks that no data is programmed outside the flash
 271:Core/Src/BLT/flash.c **** **            memory region, so the bootloader can never be overwritten.
 272:Core/Src/BLT/flash.c **** ** \param     addr Start address.
 273:Core/Src/BLT/flash.c **** ** \param     len  Length in bytes.
 274:Core/Src/BLT/flash.c **** ** \param     data Pointer to the data buffer.
 275:Core/Src/BLT/flash.c **** ** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
 276:Core/Src/BLT/flash.c **** **
 277:Core/Src/BLT/flash.c **** ****************************************************************************************/
 278:Core/Src/BLT/flash.c **** blt_bool FlashWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
 279:Core/Src/BLT/flash.c **** {
 280:Core/Src/BLT/flash.c ****   blt_addr base_addr;
 281:Core/Src/BLT/flash.c **** 
 282:Core/Src/BLT/flash.c ****   /* validate the len parameter */
 283:Core/Src/BLT/flash.c ****   if ((len - 1) > (FLASH_END_ADDRESS - addr))
 284:Core/Src/BLT/flash.c ****   {
 285:Core/Src/BLT/flash.c ****     return BLT_FALSE;
 286:Core/Src/BLT/flash.c ****   }
 287:Core/Src/BLT/flash.c **** 
 288:Core/Src/BLT/flash.c ****   /* make sure the addresses are within the flash device */
 289:Core/Src/BLT/flash.c ****   if ((addr < FLASH_START_ADDRESS) || ((addr+len-1) > FLASH_END_ADDRESS))
 290:Core/Src/BLT/flash.c ****   {
 291:Core/Src/BLT/flash.c ****     return BLT_FALSE;
 292:Core/Src/BLT/flash.c ****   }
 293:Core/Src/BLT/flash.c **** 
 294:Core/Src/BLT/flash.c ****   /* if this is the bootblock, then let the boot block manager handle it */
 295:Core/Src/BLT/flash.c ****   base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 296:Core/Src/BLT/flash.c ****   if (base_addr == flashLayout[0].sector_start)
 297:Core/Src/BLT/flash.c ****   {
 298:Core/Src/BLT/flash.c ****     /* let the boot block manager handle it */
 299:Core/Src/BLT/flash.c ****     return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 300:Core/Src/BLT/flash.c ****   }
 301:Core/Src/BLT/flash.c ****   /* let the block manager handle it */
 302:Core/Src/BLT/flash.c ****   return FlashAddToBlock(&blockInfo, addr, data, len);
 303:Core/Src/BLT/flash.c **** } /*** end of FlashWrite ***/
 304:Core/Src/BLT/flash.c **** 
 305:Core/Src/BLT/flash.c **** 
 306:Core/Src/BLT/flash.c **** /************************************************************************************//**
 307:Core/Src/BLT/flash.c **** ** \brief     Erases the flash memory. Note that this function also checks that no
 308:Core/Src/BLT/flash.c **** **            data is erased outside the flash memory region, so the bootloader can
 309:Core/Src/BLT/flash.c **** **            never be erased.
 310:Core/Src/BLT/flash.c **** ** \param     addr Start address.
 311:Core/Src/BLT/flash.c **** ** \param     len  Length in bytes.
 312:Core/Src/BLT/flash.c **** ** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
 313:Core/Src/BLT/flash.c **** **
 314:Core/Src/BLT/flash.c **** ****************************************************************************************/
 315:Core/Src/BLT/flash.c **** blt_bool FlashErase(blt_addr addr, blt_int32u len)
ARM GAS  /tmp/ccepCjKs.s 			page 7


 316:Core/Src/BLT/flash.c **** {
 317:Core/Src/BLT/flash.c ****   blt_addr erase_base_addr;
 318:Core/Src/BLT/flash.c ****   blt_int32u total_erase_len;
 319:Core/Src/BLT/flash.c ****   blt_int16u nr_of_erase_sectors;
 320:Core/Src/BLT/flash.c ****   blt_int32u pageError = 0;
 321:Core/Src/BLT/flash.c ****   blt_int16u sector_idx;
 322:Core/Src/BLT/flash.c ****   FLASH_EraseInitTypeDef eraseInitStruct;
 323:Core/Src/BLT/flash.c ****   blt_bool result = BLT_TRUE;
 324:Core/Src/BLT/flash.c **** 
 325:Core/Src/BLT/flash.c ****   /* validate the len parameter */
 326:Core/Src/BLT/flash.c ****   if ((len - 1) > (FLASH_END_ADDRESS - addr))
 327:Core/Src/BLT/flash.c ****   {
 328:Core/Src/BLT/flash.c ****     return BLT_FALSE;
 329:Core/Src/BLT/flash.c ****   }
 330:Core/Src/BLT/flash.c **** 
 331:Core/Src/BLT/flash.c ****   /* determine the base address for the erase operation, by aligning to
 332:Core/Src/BLT/flash.c ****    * FLASH_ERASE_SECTOR_SIZE.
 333:Core/Src/BLT/flash.c ****    */
 334:Core/Src/BLT/flash.c ****   erase_base_addr = (addr/FLASH_ERASE_SECTOR_SIZE)*FLASH_ERASE_SECTOR_SIZE;
 335:Core/Src/BLT/flash.c ****   
 336:Core/Src/BLT/flash.c ****   /* make sure the addresses are within the flash device */
 337:Core/Src/BLT/flash.c ****   if ((erase_base_addr < FLASH_START_ADDRESS) || ((addr+len-1) > FLASH_END_ADDRESS))
 338:Core/Src/BLT/flash.c ****   {
 339:Core/Src/BLT/flash.c ****     return BLT_FALSE;
 340:Core/Src/BLT/flash.c ****   }
 341:Core/Src/BLT/flash.c **** 
 342:Core/Src/BLT/flash.c ****   /* determine number of bytes to erase from base address */
 343:Core/Src/BLT/flash.c ****   total_erase_len = len + (addr - erase_base_addr);
 344:Core/Src/BLT/flash.c **** 
 345:Core/Src/BLT/flash.c ****   /* determine the number of sectors to erase */
 346:Core/Src/BLT/flash.c ****   nr_of_erase_sectors = (blt_int16u)(total_erase_len / FLASH_ERASE_SECTOR_SIZE);
 347:Core/Src/BLT/flash.c ****   if ((total_erase_len % FLASH_ERASE_SECTOR_SIZE) > 0)
 348:Core/Src/BLT/flash.c ****   {
 349:Core/Src/BLT/flash.c ****     nr_of_erase_sectors++;
 350:Core/Src/BLT/flash.c ****   }
 351:Core/Src/BLT/flash.c **** 
 352:Core/Src/BLT/flash.c ****   /* prepare the erase initialization structure. */
 353:Core/Src/BLT/flash.c ****   eraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 354:Core/Src/BLT/flash.c ****   eraseInitStruct.PageAddress = erase_base_addr;
 355:Core/Src/BLT/flash.c ****   eraseInitStruct.NbPages     = 1;
 356:Core/Src/BLT/flash.c **** 
 357:Core/Src/BLT/flash.c ****   /* unlock the flash peripheral to enable the flash control register access. */
 358:Core/Src/BLT/flash.c ****   HAL_FLASH_Unlock();
 359:Core/Src/BLT/flash.c **** 
 360:Core/Src/BLT/flash.c ****   /* loop through all sectors to erase them one by one. the HAL supports erasing multiple
 361:Core/Src/BLT/flash.c ****    * pages with one function call, but then the watchdog can't be updated in between.
 362:Core/Src/BLT/flash.c ****    */
 363:Core/Src/BLT/flash.c ****   for (sector_idx = 0; sector_idx < nr_of_erase_sectors; sector_idx++)
 364:Core/Src/BLT/flash.c ****   {
 365:Core/Src/BLT/flash.c ****     /* keep the watchdog happy */
 366:Core/Src/BLT/flash.c ****     CopService();
 367:Core/Src/BLT/flash.c ****     /* erase the sector. */
 368:Core/Src/BLT/flash.c ****     if (HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&pageError) != HAL_OK)
 369:Core/Src/BLT/flash.c ****     {
 370:Core/Src/BLT/flash.c ****       /* flag error and stop erase operation */
 371:Core/Src/BLT/flash.c ****       result = BLT_FALSE;
 372:Core/Src/BLT/flash.c ****       break;
ARM GAS  /tmp/ccepCjKs.s 			page 8


 373:Core/Src/BLT/flash.c ****     }
 374:Core/Src/BLT/flash.c ****     /* update the page base address for the next sector. */
 375:Core/Src/BLT/flash.c ****     eraseInitStruct.PageAddress += FLASH_ERASE_SECTOR_SIZE;
 376:Core/Src/BLT/flash.c ****   }
 377:Core/Src/BLT/flash.c **** 
 378:Core/Src/BLT/flash.c ****   /* lock the flash peripheral to disable the flash control register access. */
 379:Core/Src/BLT/flash.c ****   HAL_FLASH_Lock();
 380:Core/Src/BLT/flash.c **** 
 381:Core/Src/BLT/flash.c ****   /* Give the result back to the caller. */
 382:Core/Src/BLT/flash.c ****   return result;
 383:Core/Src/BLT/flash.c **** } /*** end of FlashErase ***/
 384:Core/Src/BLT/flash.c **** 
 385:Core/Src/BLT/flash.c **** 
 386:Core/Src/BLT/flash.c **** /************************************************************************************//**
 387:Core/Src/BLT/flash.c **** ** \brief     Writes a checksum of the user program to non-volatile memory. This is
 388:Core/Src/BLT/flash.c **** **            performed once the entire user program has been programmed. Through
 389:Core/Src/BLT/flash.c **** **            the checksum, the bootloader can check if the programming session
 390:Core/Src/BLT/flash.c **** **            was completed, which indicates that a valid user programming is
 391:Core/Src/BLT/flash.c **** **            present and can be started.
 392:Core/Src/BLT/flash.c **** ** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
 393:Core/Src/BLT/flash.c **** **
 394:Core/Src/BLT/flash.c **** ****************************************************************************************/
 395:Core/Src/BLT/flash.c **** blt_bool FlashWriteChecksum(void)
 396:Core/Src/BLT/flash.c **** {
 397:Core/Src/BLT/flash.c ****   blt_int32u signature_checksum = 0;
 398:Core/Src/BLT/flash.c **** 
 399:Core/Src/BLT/flash.c ****   /* for the STM32 target we defined the checksum as the Two's complement value of the
 400:Core/Src/BLT/flash.c ****    * sum of the first 7 exception addresses.
 401:Core/Src/BLT/flash.c ****    *
 402:Core/Src/BLT/flash.c ****    * Layout of the vector table:
 403:Core/Src/BLT/flash.c ****    *    0x08000000 Initial stack pointer
 404:Core/Src/BLT/flash.c ****    *    0x08000004 Reset Handler
 405:Core/Src/BLT/flash.c ****    *    0x08000008 NMI Handler
 406:Core/Src/BLT/flash.c ****    *    0x0800000C Hard Fault Handler
 407:Core/Src/BLT/flash.c ****    *    0x08000010 MPU Fault Handler
 408:Core/Src/BLT/flash.c ****    *    0x08000014 Bus Fault Handler
 409:Core/Src/BLT/flash.c ****    *    0x08000018 Usage Fault Handler
 410:Core/Src/BLT/flash.c ****    *
 411:Core/Src/BLT/flash.c ****    *    signature_checksum = Two's complement of (SUM(exception address values))
 412:Core/Src/BLT/flash.c ****    *
 413:Core/Src/BLT/flash.c ****    *    the bootloader writes this 32-bit checksum value right after the vector table
 414:Core/Src/BLT/flash.c ****    *    of the user program. note that this means one extra dummy entry must be added
 415:Core/Src/BLT/flash.c ****    *    at the end of the user program's vector table to reserve storage space for the
 416:Core/Src/BLT/flash.c ****    *    checksum.
 417:Core/Src/BLT/flash.c ****    */
 418:Core/Src/BLT/flash.c **** 
 419:Core/Src/BLT/flash.c ****   /* first check that the bootblock contains valid data. if not, this means the
 420:Core/Src/BLT/flash.c ****    * bootblock is not part of the reprogramming this time and therefore no
 421:Core/Src/BLT/flash.c ****    * new checksum needs to be written
 422:Core/Src/BLT/flash.c ****    */
 423:Core/Src/BLT/flash.c ****   if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 424:Core/Src/BLT/flash.c ****   {
 425:Core/Src/BLT/flash.c ****     return BLT_TRUE;
 426:Core/Src/BLT/flash.c ****   }
 427:Core/Src/BLT/flash.c **** 
 428:Core/Src/BLT/flash.c **** #if (BOOT_FLASH_CRYPTO_HOOKS_ENABLE > 0)
 429:Core/Src/BLT/flash.c ****   /* perform decryption of the bootblock, before calculating the checksum and writing it
ARM GAS  /tmp/ccepCjKs.s 			page 9


 430:Core/Src/BLT/flash.c ****    * to flash memory.
 431:Core/Src/BLT/flash.c ****    */
 432:Core/Src/BLT/flash.c ****   if (FlashCryptoDecryptDataHook(bootBlockInfo.data, FLASH_WRITE_BLOCK_SIZE) == BLT_FALSE)
 433:Core/Src/BLT/flash.c ****   {
 434:Core/Src/BLT/flash.c ****     return BLT_FALSE;
 435:Core/Src/BLT/flash.c ****   }
 436:Core/Src/BLT/flash.c **** #endif
 437:Core/Src/BLT/flash.c **** 
 438:Core/Src/BLT/flash.c ****   /* compute the checksum. note that the user program's vectors are not yet written
 439:Core/Src/BLT/flash.c ****    * to flash but are present in the bootblock data structure at this point.
 440:Core/Src/BLT/flash.c ****    */
 441:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 442:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 443:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 444:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 445:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 446:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 447:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 448:Core/Src/BLT/flash.c ****   signature_checksum  = ~signature_checksum; /* one's complement */
 449:Core/Src/BLT/flash.c ****   signature_checksum += 1; /* two's complement */
 450:Core/Src/BLT/flash.c **** 
 451:Core/Src/BLT/flash.c ****   /* write the checksum */
 452:Core/Src/BLT/flash.c ****   return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 453:Core/Src/BLT/flash.c ****                     sizeof(blt_addr), (blt_int8u *)&signature_checksum);
 454:Core/Src/BLT/flash.c **** } /*** end of FlashWriteChecksum ***/
 455:Core/Src/BLT/flash.c **** 
 456:Core/Src/BLT/flash.c **** 
 457:Core/Src/BLT/flash.c **** /************************************************************************************//**
 458:Core/Src/BLT/flash.c **** ** \brief     Verifies the checksum, which indicates that a valid user program is
 459:Core/Src/BLT/flash.c **** **            present and can be started.
 460:Core/Src/BLT/flash.c **** ** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
 461:Core/Src/BLT/flash.c **** **
 462:Core/Src/BLT/flash.c **** ****************************************************************************************/
 463:Core/Src/BLT/flash.c **** blt_bool FlashVerifyChecksum(void)
 464:Core/Src/BLT/flash.c **** {
 465:Core/Src/BLT/flash.c ****   blt_int32u signature_checksum = 0;
 466:Core/Src/BLT/flash.c **** 
 467:Core/Src/BLT/flash.c ****   /* verify the checksum based on how it was written by CpuWriteChecksum() */
 468:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 469:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 470:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 471:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 472:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 473:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 474:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 475:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFF
 476:Core/Src/BLT/flash.c ****   /* sum should add up to an unsigned 32-bit value of 0 */
 477:Core/Src/BLT/flash.c ****   if (signature_checksum == 0)
 478:Core/Src/BLT/flash.c ****   {
 479:Core/Src/BLT/flash.c ****     /* checksum okay */
 480:Core/Src/BLT/flash.c ****     return BLT_TRUE;
 481:Core/Src/BLT/flash.c ****   }
 482:Core/Src/BLT/flash.c ****   /* checksum incorrect */
 483:Core/Src/BLT/flash.c ****   return BLT_FALSE;
 484:Core/Src/BLT/flash.c **** } /*** end of FlashVerifyChecksum ***/
 485:Core/Src/BLT/flash.c **** 
 486:Core/Src/BLT/flash.c **** 
ARM GAS  /tmp/ccepCjKs.s 			page 10


 487:Core/Src/BLT/flash.c **** /************************************************************************************//**
 488:Core/Src/BLT/flash.c **** ** \brief     Finalizes the flash driver operations. There could still be data in
 489:Core/Src/BLT/flash.c **** **            the currently active block that needs to be flashed.
 490:Core/Src/BLT/flash.c **** ** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
 491:Core/Src/BLT/flash.c **** **
 492:Core/Src/BLT/flash.c **** ****************************************************************************************/
 493:Core/Src/BLT/flash.c **** blt_bool FlashDone(void)
 494:Core/Src/BLT/flash.c **** {
 495:Core/Src/BLT/flash.c ****   /* check if there is still data waiting to be programmed in the boot block */
 496:Core/Src/BLT/flash.c ****   if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 497:Core/Src/BLT/flash.c ****   {
 498:Core/Src/BLT/flash.c ****     if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 499:Core/Src/BLT/flash.c ****     {
 500:Core/Src/BLT/flash.c ****       return BLT_FALSE;
 501:Core/Src/BLT/flash.c ****     }
 502:Core/Src/BLT/flash.c ****   }
 503:Core/Src/BLT/flash.c **** 
 504:Core/Src/BLT/flash.c ****   /* check if there is still data waiting to be programmed */
 505:Core/Src/BLT/flash.c ****   if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 506:Core/Src/BLT/flash.c ****   {
 507:Core/Src/BLT/flash.c ****     if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 508:Core/Src/BLT/flash.c ****     {
 509:Core/Src/BLT/flash.c ****       return BLT_FALSE;
 510:Core/Src/BLT/flash.c ****     }
 511:Core/Src/BLT/flash.c ****   }
 512:Core/Src/BLT/flash.c ****   /* still here so all is okay */
 513:Core/Src/BLT/flash.c ****   return BLT_TRUE;
 514:Core/Src/BLT/flash.c **** } /*** end of FlashDone ***/
 515:Core/Src/BLT/flash.c **** 
 516:Core/Src/BLT/flash.c **** 
 517:Core/Src/BLT/flash.c **** /************************************************************************************//**
 518:Core/Src/BLT/flash.c **** ** \brief     Obtains the base address of the flash memory available to the user program.
 519:Core/Src/BLT/flash.c **** **            This is basically the first address in the flashLayout table.
 520:Core/Src/BLT/flash.c **** ** \return    Base address.
 521:Core/Src/BLT/flash.c **** **
 522:Core/Src/BLT/flash.c **** ****************************************************************************************/
 523:Core/Src/BLT/flash.c **** blt_addr FlashGetUserProgBaseAddress(void)
 524:Core/Src/BLT/flash.c **** {
 525:Core/Src/BLT/flash.c ****   return flashLayout[0].sector_start;
 526:Core/Src/BLT/flash.c **** } /*** end of FlashGetUserProgBaseAddress ***/
 527:Core/Src/BLT/flash.c **** 
 528:Core/Src/BLT/flash.c **** 
 529:Core/Src/BLT/flash.c **** /************************************************************************************//**
 530:Core/Src/BLT/flash.c **** ** \brief     Copies data currently in flash to the block->data and sets the
 531:Core/Src/BLT/flash.c **** **            base address.
 532:Core/Src/BLT/flash.c **** ** \param     block   Pointer to flash block info structure to operate on.
 533:Core/Src/BLT/flash.c **** ** \param     address Base address of the block data.
 534:Core/Src/BLT/flash.c **** ** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
 535:Core/Src/BLT/flash.c **** **
 536:Core/Src/BLT/flash.c **** ****************************************************************************************/
 537:Core/Src/BLT/flash.c **** static blt_bool FlashInitBlock(tFlashBlockInfo *block, blt_addr address)
 538:Core/Src/BLT/flash.c **** {
  29              		.loc 1 538 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 538 1 is_stmt 0 view .LVU1
ARM GAS  /tmp/ccepCjKs.s 			page 11


  34 0000 08B5     		push	{r3, lr}
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 539:Core/Src/BLT/flash.c ****   /* check address alignment */
 540:Core/Src/BLT/flash.c ****   if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
  38              		.loc 1 540 3 is_stmt 1 view .LVU2
  39              		.loc 1 540 16 is_stmt 0 view .LVU3
  40 0002 C1F30803 		ubfx	r3, r1, #0, #9
  41              		.loc 1 540 6 view .LVU4
  42 0006 53B9     		cbnz	r3, .L3
 541:Core/Src/BLT/flash.c ****   {
 542:Core/Src/BLT/flash.c ****     return BLT_FALSE;
 543:Core/Src/BLT/flash.c ****   }
 544:Core/Src/BLT/flash.c ****   /* make sure that we are initializing a new block and not the same one */
 545:Core/Src/BLT/flash.c ****   if (block->base_addr == address)
  43              		.loc 1 545 3 is_stmt 1 view .LVU5
  44              		.loc 1 545 12 is_stmt 0 view .LVU6
  45 0008 0368     		ldr	r3, [r0]
  46              		.loc 1 545 6 view .LVU7
  47 000a 8B42     		cmp	r3, r1
  48 000c 09D0     		beq	.L4
 546:Core/Src/BLT/flash.c ****   {
 547:Core/Src/BLT/flash.c ****     /* block already initialized, so nothing to do */
 548:Core/Src/BLT/flash.c ****     return BLT_TRUE;
 549:Core/Src/BLT/flash.c ****   }
 550:Core/Src/BLT/flash.c ****   /* set the base address and copies the current data from flash */
 551:Core/Src/BLT/flash.c ****   block->base_addr = address;
  49              		.loc 1 551 3 is_stmt 1 view .LVU8
  50              		.loc 1 551 20 is_stmt 0 view .LVU9
  51 000e 40F8041B 		str	r1, [r0], #4
  52              	.LVL1:
 552:Core/Src/BLT/flash.c ****   CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
  53              		.loc 1 552 3 is_stmt 1 view .LVU10
  54 0012 4FF40072 		mov	r2, #512
  55 0016 FFF7FEFF 		bl	CpuMemCopy
  56              	.LVL2:
 553:Core/Src/BLT/flash.c ****   return BLT_TRUE;
  57              		.loc 1 553 3 view .LVU11
  58              		.loc 1 553 10 is_stmt 0 view .LVU12
  59 001a 0120     		movs	r0, #1
  60              	.L2:
 554:Core/Src/BLT/flash.c **** } /*** end of FlashInitBlock ***/
  61              		.loc 1 554 1 view .LVU13
  62 001c 08BD     		pop	{r3, pc}
  63              	.LVL3:
  64              	.L3:
 542:Core/Src/BLT/flash.c ****   }
  65              		.loc 1 542 12 view .LVU14
  66 001e 0020     		movs	r0, #0
  67              	.LVL4:
 542:Core/Src/BLT/flash.c ****   }
  68              		.loc 1 542 12 view .LVU15
  69 0020 FCE7     		b	.L2
  70              	.LVL5:
  71              	.L4:
 548:Core/Src/BLT/flash.c ****   }
ARM GAS  /tmp/ccepCjKs.s 			page 12


  72              		.loc 1 548 12 view .LVU16
  73 0022 0120     		movs	r0, #1
  74              	.LVL6:
 548:Core/Src/BLT/flash.c ****   }
  75              		.loc 1 548 12 view .LVU17
  76 0024 FAE7     		b	.L2
  77              		.cfi_endproc
  78              	.LFE131:
  80              		.section	.text.FlashWriteBlock,"ax",%progbits
  81              		.align	1
  82              		.syntax unified
  83              		.thumb
  84              		.thumb_func
  86              	FlashWriteBlock:
  87              	.LVL7:
  88              	.LFB134:
 555:Core/Src/BLT/flash.c **** 
 556:Core/Src/BLT/flash.c **** 
 557:Core/Src/BLT/flash.c **** /************************************************************************************//**
 558:Core/Src/BLT/flash.c **** ** \brief     Switches blocks by programming the current one and initializing the
 559:Core/Src/BLT/flash.c **** **            next.
 560:Core/Src/BLT/flash.c **** ** \param     block   Pointer to flash block info structure to operate on.
 561:Core/Src/BLT/flash.c **** ** \param     base_addr Base address of the next block.
 562:Core/Src/BLT/flash.c **** ** \return    The pointer of the block info struct that is no being used, or a NULL
 563:Core/Src/BLT/flash.c **** **            pointer in case of error.
 564:Core/Src/BLT/flash.c **** **
 565:Core/Src/BLT/flash.c **** ****************************************************************************************/
 566:Core/Src/BLT/flash.c **** static tFlashBlockInfo *FlashSwitchBlock(tFlashBlockInfo *block, blt_addr base_addr)
 567:Core/Src/BLT/flash.c **** {
 568:Core/Src/BLT/flash.c ****   /* check if a switch needs to be made away from the boot block. in this case the boot
 569:Core/Src/BLT/flash.c ****    * block shouldn't be written yet, because this is done at the end of the programming
 570:Core/Src/BLT/flash.c ****    * session by FlashDone(), this is right after the checksum was written.
 571:Core/Src/BLT/flash.c ****    */
 572:Core/Src/BLT/flash.c ****   if (block == &bootBlockInfo)
 573:Core/Src/BLT/flash.c ****   {
 574:Core/Src/BLT/flash.c ****     /* switch from the boot block to the generic block info structure */
 575:Core/Src/BLT/flash.c ****     block = &blockInfo;
 576:Core/Src/BLT/flash.c ****   }
 577:Core/Src/BLT/flash.c ****   /* check if a switch back into the bootblock is needed. in this case the generic block
 578:Core/Src/BLT/flash.c ****    * doesn't need to be written here yet.
 579:Core/Src/BLT/flash.c ****    */
 580:Core/Src/BLT/flash.c ****   else if (base_addr == flashLayout[0].sector_start)
 581:Core/Src/BLT/flash.c ****   {
 582:Core/Src/BLT/flash.c ****     /* switch from the generic block to the boot block info structure */
 583:Core/Src/BLT/flash.c ****     block = &bootBlockInfo;
 584:Core/Src/BLT/flash.c ****     base_addr = flashLayout[0].sector_start;
 585:Core/Src/BLT/flash.c ****   }
 586:Core/Src/BLT/flash.c ****   else
 587:Core/Src/BLT/flash.c ****   {
 588:Core/Src/BLT/flash.c ****     /* need to switch to a new block, so program the current one and init the next */
 589:Core/Src/BLT/flash.c ****     if (FlashWriteBlock(block) == BLT_FALSE)
 590:Core/Src/BLT/flash.c ****     {
 591:Core/Src/BLT/flash.c ****       return BLT_NULL;
 592:Core/Src/BLT/flash.c ****     }
 593:Core/Src/BLT/flash.c ****   }
 594:Core/Src/BLT/flash.c **** 
 595:Core/Src/BLT/flash.c ****   /* initialize tne new block when necessary */
ARM GAS  /tmp/ccepCjKs.s 			page 13


 596:Core/Src/BLT/flash.c ****   if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 597:Core/Src/BLT/flash.c ****   {
 598:Core/Src/BLT/flash.c ****     return BLT_NULL;
 599:Core/Src/BLT/flash.c ****   }
 600:Core/Src/BLT/flash.c **** 
 601:Core/Src/BLT/flash.c ****   /* still here to all is okay  */
 602:Core/Src/BLT/flash.c ****   return block;
 603:Core/Src/BLT/flash.c **** } /*** end of FlashSwitchBlock ***/
 604:Core/Src/BLT/flash.c **** 
 605:Core/Src/BLT/flash.c **** 
 606:Core/Src/BLT/flash.c **** /************************************************************************************//**
 607:Core/Src/BLT/flash.c **** ** \brief     Programming is done per block. This function adds data to the block
 608:Core/Src/BLT/flash.c **** **            that is currently collecting data to be written to flash. If the
 609:Core/Src/BLT/flash.c **** **            address is outside of the current block, the current block is written
 610:Core/Src/BLT/flash.c **** **            to flash an a new block is initialized.
 611:Core/Src/BLT/flash.c **** ** \param     block   Pointer to flash block info structure to operate on.
 612:Core/Src/BLT/flash.c **** ** \param     address Flash destination address.
 613:Core/Src/BLT/flash.c **** ** \param     data    Pointer to the byte array with data.
 614:Core/Src/BLT/flash.c **** ** \param     len     Number of bytes to add to the block.
 615:Core/Src/BLT/flash.c **** ** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
 616:Core/Src/BLT/flash.c **** **
 617:Core/Src/BLT/flash.c **** ****************************************************************************************/
 618:Core/Src/BLT/flash.c **** static blt_bool FlashAddToBlock(tFlashBlockInfo *block, blt_addr address,
 619:Core/Src/BLT/flash.c ****                                 blt_int8u *data, blt_int32u len)
 620:Core/Src/BLT/flash.c **** {
 621:Core/Src/BLT/flash.c ****   blt_addr   current_base_addr;
 622:Core/Src/BLT/flash.c ****   blt_int8u  *dst;
 623:Core/Src/BLT/flash.c ****   blt_int8u  *src;
 624:Core/Src/BLT/flash.c **** 
 625:Core/Src/BLT/flash.c ****   /* determine the current base address */
 626:Core/Src/BLT/flash.c ****   current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 627:Core/Src/BLT/flash.c **** 
 628:Core/Src/BLT/flash.c ****   /* make sure the blockInfo is not uninitialized */
 629:Core/Src/BLT/flash.c ****   if (block->base_addr == FLASH_INVALID_ADDRESS)
 630:Core/Src/BLT/flash.c ****   {
 631:Core/Src/BLT/flash.c ****     /* initialize the blockInfo struct for the current block */
 632:Core/Src/BLT/flash.c ****     if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 633:Core/Src/BLT/flash.c ****     {
 634:Core/Src/BLT/flash.c ****       return BLT_FALSE;
 635:Core/Src/BLT/flash.c ****     }
 636:Core/Src/BLT/flash.c ****   }
 637:Core/Src/BLT/flash.c **** 
 638:Core/Src/BLT/flash.c ****   /* check if the new data fits in the current block */
 639:Core/Src/BLT/flash.c ****   if (block->base_addr != current_base_addr)
 640:Core/Src/BLT/flash.c ****   {
 641:Core/Src/BLT/flash.c ****     /* need to switch to a new block, so program the current one and init the next */
 642:Core/Src/BLT/flash.c ****     block = FlashSwitchBlock(block, current_base_addr);
 643:Core/Src/BLT/flash.c ****     if (block == BLT_NULL)
 644:Core/Src/BLT/flash.c ****     {
 645:Core/Src/BLT/flash.c ****       return BLT_FALSE;
 646:Core/Src/BLT/flash.c ****     }
 647:Core/Src/BLT/flash.c ****   }
 648:Core/Src/BLT/flash.c **** 
 649:Core/Src/BLT/flash.c ****   /* add the data to the current block, but check for block overflow */
 650:Core/Src/BLT/flash.c ****   dst = &(block->data[address - block->base_addr]);
 651:Core/Src/BLT/flash.c ****   src = data;
 652:Core/Src/BLT/flash.c ****   do
ARM GAS  /tmp/ccepCjKs.s 			page 14


 653:Core/Src/BLT/flash.c ****   {
 654:Core/Src/BLT/flash.c ****     /* keep the watchdog happy */
 655:Core/Src/BLT/flash.c ****     CopService();
 656:Core/Src/BLT/flash.c ****     /* buffer overflow? */
 657:Core/Src/BLT/flash.c ****     if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 658:Core/Src/BLT/flash.c ****     {
 659:Core/Src/BLT/flash.c ****       /* need to switch to a new block, so program the current one and init the next */
 660:Core/Src/BLT/flash.c ****       block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 661:Core/Src/BLT/flash.c ****       if (block == BLT_NULL)
 662:Core/Src/BLT/flash.c ****       {
 663:Core/Src/BLT/flash.c ****         return BLT_FALSE;
 664:Core/Src/BLT/flash.c ****       }
 665:Core/Src/BLT/flash.c ****       /* reset destination pointer */
 666:Core/Src/BLT/flash.c ****       dst = &(block->data[0]);
 667:Core/Src/BLT/flash.c ****     }
 668:Core/Src/BLT/flash.c ****     /* write the data to the buffer */
 669:Core/Src/BLT/flash.c ****     *dst = *src;
 670:Core/Src/BLT/flash.c ****     /* update pointers */
 671:Core/Src/BLT/flash.c ****     dst++;
 672:Core/Src/BLT/flash.c ****     src++;
 673:Core/Src/BLT/flash.c ****     /* decrement byte counter */
 674:Core/Src/BLT/flash.c ****     len--;
 675:Core/Src/BLT/flash.c ****   }
 676:Core/Src/BLT/flash.c ****   while (len > 0);
 677:Core/Src/BLT/flash.c ****   /* still here so all is good */
 678:Core/Src/BLT/flash.c ****   return BLT_TRUE;
 679:Core/Src/BLT/flash.c **** } /*** end of FlashAddToBlock ***/
 680:Core/Src/BLT/flash.c **** 
 681:Core/Src/BLT/flash.c **** 
 682:Core/Src/BLT/flash.c **** /************************************************************************************//**
 683:Core/Src/BLT/flash.c **** ** \brief     Programs FLASH_WRITE_BLOCK_SIZE bytes to flash from the block->data
 684:Core/Src/BLT/flash.c **** **            array.
 685:Core/Src/BLT/flash.c **** ** \param     block   Pointer to flash block info structure to operate on.
 686:Core/Src/BLT/flash.c **** ** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
 687:Core/Src/BLT/flash.c **** **
 688:Core/Src/BLT/flash.c **** ****************************************************************************************/
 689:Core/Src/BLT/flash.c **** static blt_bool FlashWriteBlock(tFlashBlockInfo *block)
 690:Core/Src/BLT/flash.c **** {
  89              		.loc 1 690 1 is_stmt 1 view -0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		.loc 1 690 1 is_stmt 0 view .LVU19
  94 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  95              		.cfi_def_cfa_offset 24
  96              		.cfi_offset 4, -24
  97              		.cfi_offset 5, -20
  98              		.cfi_offset 6, -16
  99              		.cfi_offset 7, -12
 100              		.cfi_offset 8, -8
 101              		.cfi_offset 14, -4
 102 0004 0746     		mov	r7, r0
 691:Core/Src/BLT/flash.c ****   blt_addr   prog_addr;
 103              		.loc 1 691 3 is_stmt 1 view .LVU20
 692:Core/Src/BLT/flash.c ****   blt_int32u prog_data;
 104              		.loc 1 692 3 view .LVU21
 693:Core/Src/BLT/flash.c ****   blt_int32u word_cnt;
ARM GAS  /tmp/ccepCjKs.s 			page 15


 105              		.loc 1 693 3 view .LVU22
 694:Core/Src/BLT/flash.c ****   blt_bool   result = BLT_TRUE;
 106              		.loc 1 694 3 view .LVU23
 107              	.LVL8:
 695:Core/Src/BLT/flash.c **** 
 696:Core/Src/BLT/flash.c **** #if (BOOT_FLASH_CRYPTO_HOOKS_ENABLE > 0)
 697:Core/Src/BLT/flash.c ****   #if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE == 0)
 698:Core/Src/BLT/flash.c ****   /* note that the bootblock is already decrypted in FlashWriteChecksum(), if the
 699:Core/Src/BLT/flash.c ****    * internal checksum mechanism is used. Therefore don't decrypt it again.
 700:Core/Src/BLT/flash.c ****    */
 701:Core/Src/BLT/flash.c ****   if (block != &bootBlockInfo)
 702:Core/Src/BLT/flash.c ****   #endif
 703:Core/Src/BLT/flash.c ****   {
 704:Core/Src/BLT/flash.c ****     /* perform decryption of the program data before writing it to flash memory. */
 705:Core/Src/BLT/flash.c ****     if (FlashCryptoDecryptDataHook(block->data, FLASH_WRITE_BLOCK_SIZE) == BLT_FALSE)
 706:Core/Src/BLT/flash.c ****     {
 707:Core/Src/BLT/flash.c ****       return BLT_FALSE;
 708:Core/Src/BLT/flash.c ****     }
 709:Core/Src/BLT/flash.c ****   }
 710:Core/Src/BLT/flash.c **** #endif
 711:Core/Src/BLT/flash.c **** 
 712:Core/Src/BLT/flash.c ****   /* unlock the flash peripheral to enable the flash control register access. */
 713:Core/Src/BLT/flash.c ****   HAL_FLASH_Unlock();
 108              		.loc 1 713 3 view .LVU24
 109 0006 FFF7FEFF 		bl	HAL_FLASH_Unlock
 110              	.LVL9:
 714:Core/Src/BLT/flash.c **** 
 715:Core/Src/BLT/flash.c ****   /* program all words in the block one by one */
 716:Core/Src/BLT/flash.c ****   for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 111              		.loc 1 716 3 view .LVU25
 112              		.loc 1 716 16 is_stmt 0 view .LVU26
 113 000a 0024     		movs	r4, #0
 114              	.LVL10:
 115              	.L7:
 116              		.loc 1 716 28 is_stmt 1 discriminator 1 view .LVU27
 117 000c 7F2C     		cmp	r4, #127
 118 000e 15D8     		bhi	.L12
 717:Core/Src/BLT/flash.c ****   {
 718:Core/Src/BLT/flash.c ****     prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 119              		.loc 1 718 5 view .LVU28
 120              		.loc 1 718 22 is_stmt 0 view .LVU29
 121 0010 3E68     		ldr	r6, [r7]
 122              		.loc 1 718 15 view .LVU30
 123 0012 06EB8408 		add	r8, r6, r4, lsl #2
 124              	.LVL11:
 719:Core/Src/BLT/flash.c ****     prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 125              		.loc 1 719 5 is_stmt 1 view .LVU31
 126              		.loc 1 719 42 is_stmt 0 view .LVU32
 127 0016 07EB8403 		add	r3, r7, r4, lsl #2
 128              		.loc 1 719 15 view .LVU33
 129 001a 5D68     		ldr	r5, [r3, #4]
 130              	.LVL12:
 720:Core/Src/BLT/flash.c ****     /* keep the watchdog happy */
 721:Core/Src/BLT/flash.c ****     CopService();
 131              		.loc 1 721 5 is_stmt 1 view .LVU34
 132 001c FFF7FEFF 		bl	CopService
 133              	.LVL13:
ARM GAS  /tmp/ccepCjKs.s 			page 16


 722:Core/Src/BLT/flash.c ****     /* program the word */
 723:Core/Src/BLT/flash.c ****     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 134              		.loc 1 723 5 view .LVU35
 135              		.loc 1 723 9 is_stmt 0 view .LVU36
 136 0020 2A46     		mov	r2, r5
 137 0022 0023     		movs	r3, #0
 138 0024 4146     		mov	r1, r8
 139 0026 0220     		movs	r0, #2
 140 0028 FFF7FEFF 		bl	HAL_FLASH_Program
 141              	.LVL14:
 142              		.loc 1 723 8 view .LVU37
 143 002c 8046     		mov	r8, r0
 144              	.LVL15:
 145              		.loc 1 723 8 view .LVU38
 146 002e 40B9     		cbnz	r0, .L10
 724:Core/Src/BLT/flash.c ****     {
 725:Core/Src/BLT/flash.c ****       result = BLT_FALSE;
 726:Core/Src/BLT/flash.c ****       break;
 727:Core/Src/BLT/flash.c ****     }
 728:Core/Src/BLT/flash.c ****     /* verify that the written data is actually there */
 729:Core/Src/BLT/flash.c ****     if (*(volatile blt_int32u *)prog_addr != prog_data)
 147              		.loc 1 729 5 is_stmt 1 view .LVU39
 148              		.loc 1 729 9 is_stmt 0 view .LVU40
 149 0030 56F82430 		ldr	r3, [r6, r4, lsl #2]
 150              		.loc 1 729 8 view .LVU41
 151 0034 AB42     		cmp	r3, r5
 152 0036 06D1     		bne	.L8
 716:Core/Src/BLT/flash.c ****   {
 153              		.loc 1 716 82 is_stmt 1 discriminator 2 view .LVU42
 154 0038 0134     		adds	r4, r4, #1
 155              	.LVL16:
 716:Core/Src/BLT/flash.c ****   {
 156              		.loc 1 716 82 is_stmt 0 discriminator 2 view .LVU43
 157 003a E7E7     		b	.L7
 158              	.LVL17:
 159              	.L12:
 694:Core/Src/BLT/flash.c **** 
 160              		.loc 1 694 14 view .LVU44
 161 003c 4FF00108 		mov	r8, #1
 162 0040 01E0     		b	.L8
 163              	.LVL18:
 164              	.L10:
 725:Core/Src/BLT/flash.c ****       break;
 165              		.loc 1 725 14 view .LVU45
 166 0042 4FF00008 		mov	r8, #0
 167              	.LVL19:
 168              	.L8:
 730:Core/Src/BLT/flash.c ****     {
 731:Core/Src/BLT/flash.c ****       result = BLT_FALSE;
 732:Core/Src/BLT/flash.c ****       break;
 733:Core/Src/BLT/flash.c ****     }
 734:Core/Src/BLT/flash.c ****   }
 735:Core/Src/BLT/flash.c **** 
 736:Core/Src/BLT/flash.c ****   /* lock the flash peripheral to disable the flash control register access. */
 737:Core/Src/BLT/flash.c ****   HAL_FLASH_Lock();
 169              		.loc 1 737 3 is_stmt 1 view .LVU46
 170 0046 FFF7FEFF 		bl	HAL_FLASH_Lock
ARM GAS  /tmp/ccepCjKs.s 			page 17


 171              	.LVL20:
 738:Core/Src/BLT/flash.c **** 
 739:Core/Src/BLT/flash.c ****   /* Give the result back to the caller. */
 740:Core/Src/BLT/flash.c ****   return result;
 172              		.loc 1 740 3 view .LVU47
 741:Core/Src/BLT/flash.c **** } /*** end of FlashWriteBlock ***/
 173              		.loc 1 741 1 is_stmt 0 view .LVU48
 174 004a 4046     		mov	r0, r8
 175 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 176              		.loc 1 741 1 view .LVU49
 177              		.cfi_endproc
 178              	.LFE134:
 180              		.section	.text.FlashSwitchBlock,"ax",%progbits
 181              		.align	1
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 186              	FlashSwitchBlock:
 187              	.LVL21:
 188              	.LFB132:
 567:Core/Src/BLT/flash.c ****   /* check if a switch needs to be made away from the boot block. in this case the boot
 189              		.loc 1 567 1 is_stmt 1 view -0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 567:Core/Src/BLT/flash.c ****   /* check if a switch needs to be made away from the boot block. in this case the boot
 193              		.loc 1 567 1 is_stmt 0 view .LVU51
 194 0000 38B5     		push	{r3, r4, r5, lr}
 195              		.cfi_def_cfa_offset 16
 196              		.cfi_offset 3, -16
 197              		.cfi_offset 4, -12
 198              		.cfi_offset 5, -8
 199              		.cfi_offset 14, -4
 200 0002 0D46     		mov	r5, r1
 572:Core/Src/BLT/flash.c ****   {
 201              		.loc 1 572 3 is_stmt 1 view .LVU52
 572:Core/Src/BLT/flash.c ****   {
 202              		.loc 1 572 6 is_stmt 0 view .LVU53
 203 0004 0C4B     		ldr	r3, .L23
 204 0006 9842     		cmp	r0, r3
 205 0008 11D0     		beq	.L16
 206 000a 0446     		mov	r4, r0
 580:Core/Src/BLT/flash.c ****   {
 207              		.loc 1 580 8 is_stmt 1 view .LVU54
 580:Core/Src/BLT/flash.c ****   {
 208              		.loc 1 580 11 is_stmt 0 view .LVU55
 209 000c 0B4B     		ldr	r3, .L23+4
 210 000e 9942     		cmp	r1, r3
 211 0010 07D1     		bne	.L21
 583:Core/Src/BLT/flash.c ****     base_addr = flashLayout[0].sector_start;
 212              		.loc 1 583 11 view .LVU56
 213 0012 094C     		ldr	r4, .L23
 214              	.LVL22:
 215              	.L14:
 596:Core/Src/BLT/flash.c ****   {
 216              		.loc 1 596 3 is_stmt 1 view .LVU57
 596:Core/Src/BLT/flash.c ****   {
ARM GAS  /tmp/ccepCjKs.s 			page 18


 217              		.loc 1 596 7 is_stmt 0 view .LVU58
 218 0014 2946     		mov	r1, r5
 219 0016 2046     		mov	r0, r4
 220 0018 FFF7FEFF 		bl	FlashInitBlock
 221              	.LVL23:
 596:Core/Src/BLT/flash.c ****   {
 222              		.loc 1 596 6 view .LVU59
 223 001c 48B1     		cbz	r0, .L22
 224              	.LVL24:
 225              	.L13:
 603:Core/Src/BLT/flash.c **** 
 226              		.loc 1 603 1 view .LVU60
 227 001e 2046     		mov	r0, r4
 228 0020 38BD     		pop	{r3, r4, r5, pc}
 229              	.LVL25:
 230              	.L21:
 589:Core/Src/BLT/flash.c ****     {
 231              		.loc 1 589 5 is_stmt 1 view .LVU61
 589:Core/Src/BLT/flash.c ****     {
 232              		.loc 1 589 9 is_stmt 0 view .LVU62
 233 0022 FFF7FEFF 		bl	FlashWriteBlock
 234              	.LVL26:
 589:Core/Src/BLT/flash.c ****     {
 235              		.loc 1 589 8 view .LVU63
 236 0026 0028     		cmp	r0, #0
 237 0028 F4D1     		bne	.L14
 591:Core/Src/BLT/flash.c ****     }
 238              		.loc 1 591 14 view .LVU64
 239 002a 0024     		movs	r4, #0
 240              	.LVL27:
 591:Core/Src/BLT/flash.c ****     }
 241              		.loc 1 591 14 view .LVU65
 242 002c F7E7     		b	.L13
 243              	.LVL28:
 244              	.L16:
 575:Core/Src/BLT/flash.c ****   }
 245              		.loc 1 575 11 view .LVU66
 246 002e 044C     		ldr	r4, .L23+8
 247 0030 F0E7     		b	.L14
 248              	.LVL29:
 249              	.L22:
 598:Core/Src/BLT/flash.c ****   }
 250              		.loc 1 598 12 view .LVU67
 251 0032 0024     		movs	r4, #0
 252              	.LVL30:
 598:Core/Src/BLT/flash.c ****   }
 253              		.loc 1 598 12 view .LVU68
 254 0034 F3E7     		b	.L13
 255              	.L24:
 256 0036 00BF     		.align	2
 257              	.L23:
 258 0038 00000000 		.word	bootBlockInfo
 259 003c 00400008 		.word	134234112
 260 0040 00000000 		.word	blockInfo
 261              		.cfi_endproc
 262              	.LFE132:
 264              		.section	.text.FlashAddToBlock,"ax",%progbits
ARM GAS  /tmp/ccepCjKs.s 			page 19


 265              		.align	1
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 270              	FlashAddToBlock:
 271              	.LVL31:
 272              	.LFB133:
 620:Core/Src/BLT/flash.c ****   blt_addr   current_base_addr;
 273              		.loc 1 620 1 is_stmt 1 view -0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 620:Core/Src/BLT/flash.c ****   blt_addr   current_base_addr;
 277              		.loc 1 620 1 is_stmt 0 view .LVU70
 278 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 279              		.cfi_def_cfa_offset 24
 280              		.cfi_offset 4, -24
 281              		.cfi_offset 5, -20
 282              		.cfi_offset 6, -16
 283              		.cfi_offset 7, -12
 284              		.cfi_offset 8, -8
 285              		.cfi_offset 14, -4
 286 0004 0646     		mov	r6, r0
 287 0006 0C46     		mov	r4, r1
 288 0008 1746     		mov	r7, r2
 289 000a 1D46     		mov	r5, r3
 621:Core/Src/BLT/flash.c ****   blt_int8u  *dst;
 290              		.loc 1 621 3 is_stmt 1 view .LVU71
 622:Core/Src/BLT/flash.c ****   blt_int8u  *src;
 291              		.loc 1 622 3 view .LVU72
 623:Core/Src/BLT/flash.c **** 
 292              		.loc 1 623 3 view .LVU73
 626:Core/Src/BLT/flash.c **** 
 293              		.loc 1 626 3 view .LVU74
 626:Core/Src/BLT/flash.c **** 
 294              		.loc 1 626 21 is_stmt 0 view .LVU75
 295 000c 21F4FF78 		bic	r8, r1, #510
 296 0010 28F00108 		bic	r8, r8, #1
 297              	.LVL32:
 629:Core/Src/BLT/flash.c ****   {
 298              		.loc 1 629 3 is_stmt 1 view .LVU76
 629:Core/Src/BLT/flash.c ****   {
 299              		.loc 1 629 12 is_stmt 0 view .LVU77
 300 0014 0368     		ldr	r3, [r0]
 301              	.LVL33:
 629:Core/Src/BLT/flash.c ****   {
 302              		.loc 1 629 6 view .LVU78
 303 0016 B3F1FF3F 		cmp	r3, #-1
 304 001a 07D0     		beq	.L34
 305              	.LVL34:
 306              	.L26:
 639:Core/Src/BLT/flash.c ****   {
 307              		.loc 1 639 3 is_stmt 1 view .LVU79
 639:Core/Src/BLT/flash.c ****   {
 308              		.loc 1 639 12 is_stmt 0 view .LVU80
 309 001c 3368     		ldr	r3, [r6]
 639:Core/Src/BLT/flash.c ****   {
ARM GAS  /tmp/ccepCjKs.s 			page 20


 310              		.loc 1 639 6 view .LVU81
 311 001e 4345     		cmp	r3, r8
 312 0020 0AD1     		bne	.L35
 313              	.L28:
 650:Core/Src/BLT/flash.c ****   src = data;
 314              		.loc 1 650 3 is_stmt 1 view .LVU82
 650:Core/Src/BLT/flash.c ****   src = data;
 315              		.loc 1 650 38 is_stmt 0 view .LVU83
 316 0022 3368     		ldr	r3, [r6]
 650:Core/Src/BLT/flash.c ****   src = data;
 317              		.loc 1 650 31 view .LVU84
 318 0024 E41A     		subs	r4, r4, r3
 319              	.LVL35:
 650:Core/Src/BLT/flash.c ****   src = data;
 320              		.loc 1 650 7 view .LVU85
 321 0026 3444     		add	r4, r4, r6
 322 0028 0434     		adds	r4, r4, #4
 323              	.LVL36:
 651:Core/Src/BLT/flash.c ****   do
 324              		.loc 1 651 3 is_stmt 1 view .LVU86
 651:Core/Src/BLT/flash.c ****   do
 325              		.loc 1 651 3 is_stmt 0 view .LVU87
 326 002a 14E0     		b	.L30
 327              	.LVL37:
 328              	.L34:
 632:Core/Src/BLT/flash.c ****     {
 329              		.loc 1 632 5 is_stmt 1 view .LVU88
 632:Core/Src/BLT/flash.c ****     {
 330              		.loc 1 632 9 is_stmt 0 view .LVU89
 331 002c 4146     		mov	r1, r8
 332              	.LVL38:
 632:Core/Src/BLT/flash.c ****     {
 333              		.loc 1 632 9 view .LVU90
 334 002e FFF7FEFF 		bl	FlashInitBlock
 335              	.LVL39:
 632:Core/Src/BLT/flash.c ****     {
 336              		.loc 1 632 8 view .LVU91
 337 0032 0028     		cmp	r0, #0
 338 0034 F2D1     		bne	.L26
 339 0036 1FE0     		b	.L27
 340              	.L35:
 642:Core/Src/BLT/flash.c ****     if (block == BLT_NULL)
 341              		.loc 1 642 5 is_stmt 1 view .LVU92
 642:Core/Src/BLT/flash.c ****     if (block == BLT_NULL)
 342              		.loc 1 642 13 is_stmt 0 view .LVU93
 343 0038 4146     		mov	r1, r8
 344 003a 3046     		mov	r0, r6
 345 003c FFF7FEFF 		bl	FlashSwitchBlock
 346              	.LVL40:
 643:Core/Src/BLT/flash.c ****     {
 347              		.loc 1 643 5 is_stmt 1 view .LVU94
 643:Core/Src/BLT/flash.c ****     {
 348              		.loc 1 643 8 is_stmt 0 view .LVU95
 349 0040 0646     		mov	r6, r0
 350 0042 0028     		cmp	r0, #0
 351 0044 EDD1     		bne	.L28
 645:Core/Src/BLT/flash.c ****     }
ARM GAS  /tmp/ccepCjKs.s 			page 21


 352              		.loc 1 645 14 view .LVU96
 353 0046 0020     		movs	r0, #0
 354              	.LVL41:
 645:Core/Src/BLT/flash.c ****     }
 355              		.loc 1 645 14 view .LVU97
 356 0048 16E0     		b	.L27
 357              	.LVL42:
 358              	.L29:
 669:Core/Src/BLT/flash.c ****     /* update pointers */
 359              		.loc 1 669 5 is_stmt 1 view .LVU98
 669:Core/Src/BLT/flash.c ****     /* update pointers */
 360              		.loc 1 669 12 is_stmt 0 view .LVU99
 361 004a 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 362              	.LVL43:
 669:Core/Src/BLT/flash.c ****     /* update pointers */
 363              		.loc 1 669 10 view .LVU100
 364 004e 04F8013B 		strb	r3, [r4], #1
 365              	.LVL44:
 671:Core/Src/BLT/flash.c ****     src++;
 366              		.loc 1 671 5 is_stmt 1 view .LVU101
 672:Core/Src/BLT/flash.c ****     /* decrement byte counter */
 367              		.loc 1 672 5 view .LVU102
 674:Core/Src/BLT/flash.c ****   }
 368              		.loc 1 674 5 view .LVU103
 676:Core/Src/BLT/flash.c ****   /* still here so all is good */
 369              		.loc 1 676 14 view .LVU104
 370 0052 013D     		subs	r5, r5, #1
 371              	.LVL45:
 676:Core/Src/BLT/flash.c ****   /* still here so all is good */
 372              		.loc 1 676 14 is_stmt 0 view .LVU105
 373 0054 0FD0     		beq	.L36
 374              	.L30:
 652:Core/Src/BLT/flash.c ****   {
 375              		.loc 1 652 3 is_stmt 1 view .LVU106
 655:Core/Src/BLT/flash.c ****     /* buffer overflow? */
 376              		.loc 1 655 5 view .LVU107
 377 0056 FFF7FEFF 		bl	CopService
 378              	.LVL46:
 657:Core/Src/BLT/flash.c ****     {
 379              		.loc 1 657 5 view .LVU108
 657:Core/Src/BLT/flash.c ****     {
 380              		.loc 1 657 24 is_stmt 0 view .LVU109
 381 005a 311D     		adds	r1, r6, #4
 657:Core/Src/BLT/flash.c ****     {
 382              		.loc 1 657 23 view .LVU110
 383 005c 611A     		subs	r1, r4, r1
 657:Core/Src/BLT/flash.c ****     {
 384              		.loc 1 657 8 view .LVU111
 385 005e B1F5007F 		cmp	r1, #512
 386 0062 F2D3     		bcc	.L29
 660:Core/Src/BLT/flash.c ****       if (block == BLT_NULL)
 387              		.loc 1 660 7 is_stmt 1 view .LVU112
 660:Core/Src/BLT/flash.c ****       if (block == BLT_NULL)
 388              		.loc 1 660 15 is_stmt 0 view .LVU113
 389 0064 08F50071 		add	r1, r8, #512
 390 0068 3046     		mov	r0, r6
 391 006a FFF7FEFF 		bl	FlashSwitchBlock
ARM GAS  /tmp/ccepCjKs.s 			page 22


 392              	.LVL47:
 661:Core/Src/BLT/flash.c ****       {
 393              		.loc 1 661 7 is_stmt 1 view .LVU114
 661:Core/Src/BLT/flash.c ****       {
 394              		.loc 1 661 10 is_stmt 0 view .LVU115
 395 006e 0646     		mov	r6, r0
 396 0070 20B1     		cbz	r0, .L32
 666:Core/Src/BLT/flash.c ****     }
 397              		.loc 1 666 7 is_stmt 1 view .LVU116
 666:Core/Src/BLT/flash.c ****     }
 398              		.loc 1 666 11 is_stmt 0 view .LVU117
 399 0072 041D     		adds	r4, r0, #4
 400              	.LVL48:
 666:Core/Src/BLT/flash.c ****     }
 401              		.loc 1 666 11 view .LVU118
 402 0074 E9E7     		b	.L29
 403              	.LVL49:
 404              	.L36:
 678:Core/Src/BLT/flash.c **** } /*** end of FlashAddToBlock ***/
 405              		.loc 1 678 10 view .LVU119
 406 0076 0120     		movs	r0, #1
 407              	.LVL50:
 408              	.L27:
 679:Core/Src/BLT/flash.c **** 
 409              		.loc 1 679 1 view .LVU120
 410 0078 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 411              	.LVL51:
 412              	.L32:
 663:Core/Src/BLT/flash.c ****       }
 413              		.loc 1 663 16 view .LVU121
 414 007c 0020     		movs	r0, #0
 415              	.LVL52:
 663:Core/Src/BLT/flash.c ****       }
 416              		.loc 1 663 16 view .LVU122
 417 007e FBE7     		b	.L27
 418              		.cfi_endproc
 419              	.LFE133:
 421              		.section	.text.FlashInit,"ax",%progbits
 422              		.align	1
 423              		.global	FlashInit
 424              		.syntax unified
 425              		.thumb
 426              		.thumb_func
 428              	FlashInit:
 429              	.LFB123:
 248:Core/Src/BLT/flash.c ****   /* init the flash block info structs by setting the address to an invalid address */
 430              		.loc 1 248 1 is_stmt 1 view -0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 434              		@ link register save eliminated.
 250:Core/Src/BLT/flash.c ****   bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 435              		.loc 1 250 3 view .LVU124
 250:Core/Src/BLT/flash.c ****   bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 436              		.loc 1 250 23 is_stmt 0 view .LVU125
 437 0000 4FF0FF33 		mov	r3, #-1
 438 0004 024A     		ldr	r2, .L38
ARM GAS  /tmp/ccepCjKs.s 			page 23


 439 0006 1360     		str	r3, [r2]
 251:Core/Src/BLT/flash.c **** } /*** end of FlashInit ***/
 440              		.loc 1 251 3 is_stmt 1 view .LVU126
 251:Core/Src/BLT/flash.c **** } /*** end of FlashInit ***/
 441              		.loc 1 251 27 is_stmt 0 view .LVU127
 442 0008 024A     		ldr	r2, .L38+4
 443 000a 1360     		str	r3, [r2]
 252:Core/Src/BLT/flash.c **** 
 444              		.loc 1 252 1 view .LVU128
 445 000c 7047     		bx	lr
 446              	.L39:
 447 000e 00BF     		.align	2
 448              	.L38:
 449 0010 00000000 		.word	blockInfo
 450 0014 00000000 		.word	bootBlockInfo
 451              		.cfi_endproc
 452              	.LFE123:
 454              		.section	.text.FlashReinit,"ax",%progbits
 455              		.align	1
 456              		.global	FlashReinit
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 461              	FlashReinit:
 462              	.LFB124:
 261:Core/Src/BLT/flash.c ****   /* init the flash block info structs by setting the address to an invalid address */
 463              		.loc 1 261 1 is_stmt 1 view -0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467              		@ link register save eliminated.
 263:Core/Src/BLT/flash.c ****   bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 468              		.loc 1 263 3 view .LVU130
 263:Core/Src/BLT/flash.c ****   bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 469              		.loc 1 263 23 is_stmt 0 view .LVU131
 470 0000 4FF0FF33 		mov	r3, #-1
 471 0004 024A     		ldr	r2, .L41
 472 0006 1360     		str	r3, [r2]
 264:Core/Src/BLT/flash.c **** } /*** end of FlashReinit ***/
 473              		.loc 1 264 3 is_stmt 1 view .LVU132
 264:Core/Src/BLT/flash.c **** } /*** end of FlashReinit ***/
 474              		.loc 1 264 27 is_stmt 0 view .LVU133
 475 0008 024A     		ldr	r2, .L41+4
 476 000a 1360     		str	r3, [r2]
 265:Core/Src/BLT/flash.c **** 
 477              		.loc 1 265 1 view .LVU134
 478 000c 7047     		bx	lr
 479              	.L42:
 480 000e 00BF     		.align	2
 481              	.L41:
 482 0010 00000000 		.word	blockInfo
 483 0014 00000000 		.word	bootBlockInfo
 484              		.cfi_endproc
 485              	.LFE124:
 487              		.section	.text.FlashWrite,"ax",%progbits
 488              		.align	1
 489              		.global	FlashWrite
ARM GAS  /tmp/ccepCjKs.s 			page 24


 490              		.syntax unified
 491              		.thumb
 492              		.thumb_func
 494              	FlashWrite:
 495              	.LVL53:
 496              	.LFB125:
 279:Core/Src/BLT/flash.c ****   blt_addr base_addr;
 497              		.loc 1 279 1 is_stmt 1 view -0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 0
 500              		@ frame_needed = 0, uses_anonymous_args = 0
 279:Core/Src/BLT/flash.c ****   blt_addr base_addr;
 501              		.loc 1 279 1 is_stmt 0 view .LVU136
 502 0000 0B46     		mov	r3, r1
 280:Core/Src/BLT/flash.c **** 
 503              		.loc 1 280 3 is_stmt 1 view .LVU137
 283:Core/Src/BLT/flash.c ****   {
 504              		.loc 1 283 3 view .LVU138
 283:Core/Src/BLT/flash.c ****   {
 505              		.loc 1 283 12 is_stmt 0 view .LVU139
 506 0002 01F1FF3C 		add	ip, r1, #-1
 283:Core/Src/BLT/flash.c ****   {
 507              		.loc 1 283 38 view .LVU140
 508 0006 1249     		ldr	r1, .L54
 509              	.LVL54:
 283:Core/Src/BLT/flash.c ****   {
 510              		.loc 1 283 38 view .LVU141
 511 0008 091A     		subs	r1, r1, r0
 283:Core/Src/BLT/flash.c ****   {
 512              		.loc 1 283 6 view .LVU142
 513 000a 8C45     		cmp	ip, r1
 514 000c 19D8     		bhi	.L46
 289:Core/Src/BLT/flash.c ****   {
 515              		.loc 1 289 3 is_stmt 1 view .LVU143
 289:Core/Src/BLT/flash.c ****   {
 516              		.loc 1 289 6 is_stmt 0 view .LVU144
 517 000e 1149     		ldr	r1, .L54+4
 518 0010 8842     		cmp	r0, r1
 519 0012 18D3     		bcc	.L47
 279:Core/Src/BLT/flash.c ****   blt_addr base_addr;
 520              		.loc 1 279 1 discriminator 1 view .LVU145
 521 0014 10B5     		push	{r4, lr}
 522              		.cfi_def_cfa_offset 8
 523              		.cfi_offset 4, -8
 524              		.cfi_offset 14, -4
 289:Core/Src/BLT/flash.c ****   {
 525              		.loc 1 289 45 discriminator 1 view .LVU146
 526 0016 1918     		adds	r1, r3, r0
 289:Core/Src/BLT/flash.c ****   {
 527              		.loc 1 289 49 discriminator 1 view .LVU147
 528 0018 0139     		subs	r1, r1, #1
 289:Core/Src/BLT/flash.c ****   {
 529              		.loc 1 289 36 discriminator 1 view .LVU148
 530 001a 0D4C     		ldr	r4, .L54
 531 001c A142     		cmp	r1, r4
 532 001e 14D8     		bhi	.L48
 295:Core/Src/BLT/flash.c ****   if (base_addr == flashLayout[0].sector_start)
ARM GAS  /tmp/ccepCjKs.s 			page 25


 533              		.loc 1 295 3 is_stmt 1 view .LVU149
 295:Core/Src/BLT/flash.c ****   if (base_addr == flashLayout[0].sector_start)
 534              		.loc 1 295 13 is_stmt 0 view .LVU150
 535 0020 20F4FF71 		bic	r1, r0, #510
 536 0024 21F00101 		bic	r1, r1, #1
 537              	.LVL55:
 296:Core/Src/BLT/flash.c ****   {
 538              		.loc 1 296 3 is_stmt 1 view .LVU151
 296:Core/Src/BLT/flash.c ****   {
 539              		.loc 1 296 6 is_stmt 0 view .LVU152
 540 0028 0A4C     		ldr	r4, .L54+4
 541 002a A142     		cmp	r1, r4
 542 002c 04D0     		beq	.L53
 302:Core/Src/BLT/flash.c **** } /*** end of FlashWrite ***/
 543              		.loc 1 302 3 is_stmt 1 view .LVU153
 302:Core/Src/BLT/flash.c **** } /*** end of FlashWrite ***/
 544              		.loc 1 302 10 is_stmt 0 view .LVU154
 545 002e 0146     		mov	r1, r0
 546              	.LVL56:
 302:Core/Src/BLT/flash.c **** } /*** end of FlashWrite ***/
 547              		.loc 1 302 10 view .LVU155
 548 0030 0948     		ldr	r0, .L54+8
 549              	.LVL57:
 302:Core/Src/BLT/flash.c **** } /*** end of FlashWrite ***/
 550              		.loc 1 302 10 view .LVU156
 551 0032 FFF7FEFF 		bl	FlashAddToBlock
 552              	.LVL58:
 553              	.L44:
 303:Core/Src/BLT/flash.c **** 
 554              		.loc 1 303 1 view .LVU157
 555 0036 10BD     		pop	{r4, pc}
 556              	.LVL59:
 557              	.L53:
 299:Core/Src/BLT/flash.c ****   }
 558              		.loc 1 299 5 is_stmt 1 view .LVU158
 299:Core/Src/BLT/flash.c ****   }
 559              		.loc 1 299 12 is_stmt 0 view .LVU159
 560 0038 0146     		mov	r1, r0
 561              	.LVL60:
 299:Core/Src/BLT/flash.c ****   }
 562              		.loc 1 299 12 view .LVU160
 563 003a 0848     		ldr	r0, .L54+12
 564              	.LVL61:
 299:Core/Src/BLT/flash.c ****   }
 565              		.loc 1 299 12 view .LVU161
 566 003c FFF7FEFF 		bl	FlashAddToBlock
 567              	.LVL62:
 299:Core/Src/BLT/flash.c ****   }
 568              		.loc 1 299 12 view .LVU162
 569 0040 F9E7     		b	.L44
 570              	.LVL63:
 571              	.L46:
 572              		.cfi_def_cfa_offset 0
 573              		.cfi_restore 4
 574              		.cfi_restore 14
 285:Core/Src/BLT/flash.c ****   }
 575              		.loc 1 285 12 view .LVU163
ARM GAS  /tmp/ccepCjKs.s 			page 26


 576 0042 0020     		movs	r0, #0
 577              	.LVL64:
 285:Core/Src/BLT/flash.c ****   }
 578              		.loc 1 285 12 view .LVU164
 579 0044 7047     		bx	lr
 580              	.LVL65:
 581              	.L47:
 291:Core/Src/BLT/flash.c ****   }
 582              		.loc 1 291 12 view .LVU165
 583 0046 0020     		movs	r0, #0
 584              	.LVL66:
 303:Core/Src/BLT/flash.c **** 
 585              		.loc 1 303 1 view .LVU166
 586 0048 7047     		bx	lr
 587              	.LVL67:
 588              	.L48:
 589              		.cfi_def_cfa_offset 8
 590              		.cfi_offset 4, -8
 591              		.cfi_offset 14, -4
 291:Core/Src/BLT/flash.c ****   }
 592              		.loc 1 291 12 view .LVU167
 593 004a 0020     		movs	r0, #0
 594              	.LVL68:
 291:Core/Src/BLT/flash.c ****   }
 595              		.loc 1 291 12 view .LVU168
 596 004c F3E7     		b	.L44
 597              	.L55:
 598 004e 00BF     		.align	2
 599              	.L54:
 600 0050 FFFF0308 		.word	134479871
 601 0054 00400008 		.word	134234112
 602 0058 00000000 		.word	blockInfo
 603 005c 00000000 		.word	bootBlockInfo
 604              		.cfi_endproc
 605              	.LFE125:
 607              		.section	.text.FlashErase,"ax",%progbits
 608              		.align	1
 609              		.global	FlashErase
 610              		.syntax unified
 611              		.thumb
 612              		.thumb_func
 614              	FlashErase:
 615              	.LVL69:
 616              	.LFB126:
 316:Core/Src/BLT/flash.c ****   blt_addr erase_base_addr;
 617              		.loc 1 316 1 is_stmt 1 view -0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 16
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 316:Core/Src/BLT/flash.c ****   blt_addr erase_base_addr;
 621              		.loc 1 316 1 is_stmt 0 view .LVU170
 622 0000 30B5     		push	{r4, r5, lr}
 623              		.cfi_def_cfa_offset 12
 624              		.cfi_offset 4, -12
 625              		.cfi_offset 5, -8
 626              		.cfi_offset 14, -4
 627 0002 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccepCjKs.s 			page 27


 628              		.cfi_def_cfa_offset 32
 317:Core/Src/BLT/flash.c ****   blt_int32u total_erase_len;
 629              		.loc 1 317 3 is_stmt 1 view .LVU171
 318:Core/Src/BLT/flash.c ****   blt_int16u nr_of_erase_sectors;
 630              		.loc 1 318 3 view .LVU172
 319:Core/Src/BLT/flash.c ****   blt_int32u pageError = 0;
 631              		.loc 1 319 3 view .LVU173
 320:Core/Src/BLT/flash.c ****   blt_int16u sector_idx;
 632              		.loc 1 320 3 view .LVU174
 320:Core/Src/BLT/flash.c ****   blt_int16u sector_idx;
 633              		.loc 1 320 14 is_stmt 0 view .LVU175
 634 0004 0023     		movs	r3, #0
 635 0006 0393     		str	r3, [sp, #12]
 321:Core/Src/BLT/flash.c ****   FLASH_EraseInitTypeDef eraseInitStruct;
 636              		.loc 1 321 3 is_stmt 1 view .LVU176
 322:Core/Src/BLT/flash.c ****   blt_bool result = BLT_TRUE;
 637              		.loc 1 322 3 view .LVU177
 323:Core/Src/BLT/flash.c **** 
 638              		.loc 1 323 3 view .LVU178
 639              	.LVL70:
 326:Core/Src/BLT/flash.c ****   {
 640              		.loc 1 326 3 view .LVU179
 326:Core/Src/BLT/flash.c ****   {
 641              		.loc 1 326 12 is_stmt 0 view .LVU180
 642 0008 4A1E     		subs	r2, r1, #1
 326:Core/Src/BLT/flash.c ****   {
 643              		.loc 1 326 38 view .LVU181
 644 000a 1F4B     		ldr	r3, .L68
 645 000c 1B1A     		subs	r3, r3, r0
 326:Core/Src/BLT/flash.c ****   {
 646              		.loc 1 326 6 view .LVU182
 647 000e 9A42     		cmp	r2, r3
 648 0010 31D8     		bhi	.L62
 334:Core/Src/BLT/flash.c ****   
 649              		.loc 1 334 3 is_stmt 1 view .LVU183
 334:Core/Src/BLT/flash.c ****   
 650              		.loc 1 334 19 is_stmt 0 view .LVU184
 651 0012 20F4FF63 		bic	r3, r0, #2040
 652 0016 23F00703 		bic	r3, r3, #7
 653              	.LVL71:
 337:Core/Src/BLT/flash.c ****   {
 654              		.loc 1 337 3 is_stmt 1 view .LVU185
 337:Core/Src/BLT/flash.c ****   {
 655              		.loc 1 337 6 is_stmt 0 view .LVU186
 656 001a 1C4A     		ldr	r2, .L68+4
 657 001c 9342     		cmp	r3, r2
 658 001e 2ED3     		bcc	.L63
 337:Core/Src/BLT/flash.c ****   {
 659              		.loc 1 337 56 discriminator 1 view .LVU187
 660 0020 0A18     		adds	r2, r1, r0
 337:Core/Src/BLT/flash.c ****   {
 661              		.loc 1 337 60 discriminator 1 view .LVU188
 662 0022 013A     		subs	r2, r2, #1
 337:Core/Src/BLT/flash.c ****   {
 663              		.loc 1 337 47 discriminator 1 view .LVU189
 664 0024 184C     		ldr	r4, .L68
 665 0026 A242     		cmp	r2, r4
ARM GAS  /tmp/ccepCjKs.s 			page 28


 666 0028 2BD8     		bhi	.L64
 343:Core/Src/BLT/flash.c **** 
 667              		.loc 1 343 3 is_stmt 1 view .LVU190
 343:Core/Src/BLT/flash.c **** 
 668              		.loc 1 343 33 is_stmt 0 view .LVU191
 669 002a C01A     		subs	r0, r0, r3
 670              	.LVL72:
 343:Core/Src/BLT/flash.c **** 
 671              		.loc 1 343 19 view .LVU192
 672 002c 0844     		add	r0, r0, r1
 673              	.LVL73:
 346:Core/Src/BLT/flash.c ****   if ((total_erase_len % FLASH_ERASE_SECTOR_SIZE) > 0)
 674              		.loc 1 346 3 is_stmt 1 view .LVU193
 346:Core/Src/BLT/flash.c ****   if ((total_erase_len % FLASH_ERASE_SECTOR_SIZE) > 0)
 675              		.loc 1 346 23 is_stmt 0 view .LVU194
 676 002e C0F3CF25 		ubfx	r5, r0, #11, #16
 677              	.LVL74:
 347:Core/Src/BLT/flash.c ****   {
 678              		.loc 1 347 3 is_stmt 1 view .LVU195
 347:Core/Src/BLT/flash.c ****   {
 679              		.loc 1 347 24 is_stmt 0 view .LVU196
 680 0032 C0F30A00 		ubfx	r0, r0, #0, #11
 681              	.LVL75:
 347:Core/Src/BLT/flash.c ****   {
 682              		.loc 1 347 6 view .LVU197
 683 0036 08B1     		cbz	r0, .L58
 349:Core/Src/BLT/flash.c ****   }
 684              		.loc 1 349 5 is_stmt 1 view .LVU198
 349:Core/Src/BLT/flash.c ****   }
 685              		.loc 1 349 24 is_stmt 0 view .LVU199
 686 0038 0135     		adds	r5, r5, #1
 687              	.LVL76:
 349:Core/Src/BLT/flash.c ****   }
 688              		.loc 1 349 24 view .LVU200
 689 003a ADB2     		uxth	r5, r5
 690              	.LVL77:
 691              	.L58:
 353:Core/Src/BLT/flash.c ****   eraseInitStruct.PageAddress = erase_base_addr;
 692              		.loc 1 353 3 is_stmt 1 view .LVU201
 353:Core/Src/BLT/flash.c ****   eraseInitStruct.PageAddress = erase_base_addr;
 693              		.loc 1 353 31 is_stmt 0 view .LVU202
 694 003c 0024     		movs	r4, #0
 695 003e 0094     		str	r4, [sp]
 354:Core/Src/BLT/flash.c ****   eraseInitStruct.NbPages     = 1;
 696              		.loc 1 354 3 is_stmt 1 view .LVU203
 354:Core/Src/BLT/flash.c ****   eraseInitStruct.NbPages     = 1;
 697              		.loc 1 354 31 is_stmt 0 view .LVU204
 698 0040 0193     		str	r3, [sp, #4]
 355:Core/Src/BLT/flash.c **** 
 699              		.loc 1 355 3 is_stmt 1 view .LVU205
 355:Core/Src/BLT/flash.c **** 
 700              		.loc 1 355 31 is_stmt 0 view .LVU206
 701 0042 0123     		movs	r3, #1
 702              	.LVL78:
 355:Core/Src/BLT/flash.c **** 
 703              		.loc 1 355 31 view .LVU207
 704 0044 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccepCjKs.s 			page 29


 358:Core/Src/BLT/flash.c **** 
 705              		.loc 1 358 3 is_stmt 1 view .LVU208
 706 0046 FFF7FEFF 		bl	HAL_FLASH_Unlock
 707              	.LVL79:
 363:Core/Src/BLT/flash.c ****   {
 708              		.loc 1 363 3 view .LVU209
 709              	.L59:
 363:Core/Src/BLT/flash.c ****   {
 710              		.loc 1 363 35 discriminator 1 view .LVU210
 711 004a A542     		cmp	r5, r4
 712 004c 0DD9     		bls	.L67
 366:Core/Src/BLT/flash.c ****     /* erase the sector. */
 713              		.loc 1 366 5 view .LVU211
 714 004e FFF7FEFF 		bl	CopService
 715              	.LVL80:
 368:Core/Src/BLT/flash.c ****     {
 716              		.loc 1 368 5 view .LVU212
 368:Core/Src/BLT/flash.c ****     {
 717              		.loc 1 368 9 is_stmt 0 view .LVU213
 718 0052 03A9     		add	r1, sp, #12
 719 0054 6846     		mov	r0, sp
 720 0056 FFF7FEFF 		bl	HAL_FLASHEx_Erase
 721              	.LVL81:
 368:Core/Src/BLT/flash.c ****     {
 722              		.loc 1 368 8 view .LVU214
 723 005a 50B9     		cbnz	r0, .L65
 375:Core/Src/BLT/flash.c ****   }
 724              		.loc 1 375 5 is_stmt 1 discriminator 2 view .LVU215
 375:Core/Src/BLT/flash.c ****   }
 725              		.loc 1 375 20 is_stmt 0 discriminator 2 view .LVU216
 726 005c 019B     		ldr	r3, [sp, #4]
 375:Core/Src/BLT/flash.c ****   }
 727              		.loc 1 375 33 discriminator 2 view .LVU217
 728 005e 03F50063 		add	r3, r3, #2048
 729 0062 0193     		str	r3, [sp, #4]
 363:Core/Src/BLT/flash.c ****   {
 730              		.loc 1 363 68 is_stmt 1 discriminator 2 view .LVU218
 731 0064 0134     		adds	r4, r4, #1
 732              	.LVL82:
 363:Core/Src/BLT/flash.c ****   {
 733              		.loc 1 363 68 is_stmt 0 discriminator 2 view .LVU219
 734 0066 A4B2     		uxth	r4, r4
 735              	.LVL83:
 363:Core/Src/BLT/flash.c ****   {
 736              		.loc 1 363 68 discriminator 2 view .LVU220
 737 0068 EFE7     		b	.L59
 738              	.L67:
 323:Core/Src/BLT/flash.c **** 
 739              		.loc 1 323 12 view .LVU221
 740 006a 0124     		movs	r4, #1
 741              	.LVL84:
 742              	.L60:
 379:Core/Src/BLT/flash.c **** 
 743              		.loc 1 379 3 is_stmt 1 view .LVU222
 744 006c FFF7FEFF 		bl	HAL_FLASH_Lock
 745              	.LVL85:
 382:Core/Src/BLT/flash.c **** } /*** end of FlashErase ***/
ARM GAS  /tmp/ccepCjKs.s 			page 30


 746              		.loc 1 382 3 view .LVU223
 382:Core/Src/BLT/flash.c **** } /*** end of FlashErase ***/
 747              		.loc 1 382 10 is_stmt 0 view .LVU224
 748 0070 02E0     		b	.L57
 749              	.LVL86:
 750              	.L65:
 371:Core/Src/BLT/flash.c ****       break;
 751              		.loc 1 371 14 view .LVU225
 752 0072 0024     		movs	r4, #0
 753              	.LVL87:
 371:Core/Src/BLT/flash.c ****       break;
 754              		.loc 1 371 14 view .LVU226
 755 0074 FAE7     		b	.L60
 756              	.LVL88:
 757              	.L62:
 328:Core/Src/BLT/flash.c ****   }
 758              		.loc 1 328 12 view .LVU227
 759 0076 0024     		movs	r4, #0
 760              	.LVL89:
 761              	.L57:
 383:Core/Src/BLT/flash.c **** 
 762              		.loc 1 383 1 view .LVU228
 763 0078 2046     		mov	r0, r4
 764 007a 05B0     		add	sp, sp, #20
 765              		.cfi_remember_state
 766              		.cfi_def_cfa_offset 12
 767              		@ sp needed
 768 007c 30BD     		pop	{r4, r5, pc}
 769              	.LVL90:
 770              	.L63:
 771              		.cfi_restore_state
 339:Core/Src/BLT/flash.c ****   }
 772              		.loc 1 339 12 view .LVU229
 773 007e 0024     		movs	r4, #0
 774 0080 FAE7     		b	.L57
 775              	.L64:
 776 0082 0024     		movs	r4, #0
 777 0084 F8E7     		b	.L57
 778              	.L69:
 779 0086 00BF     		.align	2
 780              	.L68:
 781 0088 FFFF0308 		.word	134479871
 782 008c 00400008 		.word	134234112
 783              		.cfi_endproc
 784              	.LFE126:
 786              		.section	.text.FlashWriteChecksum,"ax",%progbits
 787              		.align	1
 788              		.global	FlashWriteChecksum
 789              		.syntax unified
 790              		.thumb
 791              		.thumb_func
 793              	FlashWriteChecksum:
 794              	.LFB127:
 396:Core/Src/BLT/flash.c ****   blt_int32u signature_checksum = 0;
 795              		.loc 1 396 1 is_stmt 1 view -0
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccepCjKs.s 			page 31


 798              		@ frame_needed = 0, uses_anonymous_args = 0
 799 0000 00B5     		push	{lr}
 800              		.cfi_def_cfa_offset 4
 801              		.cfi_offset 14, -4
 802 0002 83B0     		sub	sp, sp, #12
 803              		.cfi_def_cfa_offset 16
 397:Core/Src/BLT/flash.c **** 
 804              		.loc 1 397 3 view .LVU231
 397:Core/Src/BLT/flash.c **** 
 805              		.loc 1 397 14 is_stmt 0 view .LVU232
 806 0004 0023     		movs	r3, #0
 807 0006 0193     		str	r3, [sp, #4]
 423:Core/Src/BLT/flash.c ****   {
 808              		.loc 1 423 3 is_stmt 1 view .LVU233
 423:Core/Src/BLT/flash.c ****   {
 809              		.loc 1 423 20 is_stmt 0 view .LVU234
 810 0008 134B     		ldr	r3, .L74
 811 000a 1B68     		ldr	r3, [r3]
 423:Core/Src/BLT/flash.c ****   {
 812              		.loc 1 423 6 view .LVU235
 813 000c B3F1FF3F 		cmp	r3, #-1
 814 0010 20D0     		beq	.L72
 441:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 815              		.loc 1 441 3 is_stmt 1 view .LVU236
 441:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 816              		.loc 1 441 25 is_stmt 0 view .LVU237
 817 0012 114A     		ldr	r2, .L74
 818 0014 5368     		ldr	r3, [r2, #4]
 441:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 819              		.loc 1 441 22 view .LVU238
 820 0016 0193     		str	r3, [sp, #4]
 442:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 821              		.loc 1 442 3 is_stmt 1 view .LVU239
 442:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 822              		.loc 1 442 25 is_stmt 0 view .LVU240
 823 0018 9168     		ldr	r1, [r2, #8]
 442:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 824              		.loc 1 442 22 view .LVU241
 825 001a 0B44     		add	r3, r3, r1
 826 001c 0193     		str	r3, [sp, #4]
 443:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 827              		.loc 1 443 3 is_stmt 1 view .LVU242
 443:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 828              		.loc 1 443 25 is_stmt 0 view .LVU243
 829 001e D168     		ldr	r1, [r2, #12]
 443:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 830              		.loc 1 443 22 view .LVU244
 831 0020 0B44     		add	r3, r3, r1
 832 0022 0193     		str	r3, [sp, #4]
 444:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 833              		.loc 1 444 3 is_stmt 1 view .LVU245
 444:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 834              		.loc 1 444 25 is_stmt 0 view .LVU246
 835 0024 1169     		ldr	r1, [r2, #16]
 444:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 836              		.loc 1 444 22 view .LVU247
 837 0026 0B44     		add	r3, r3, r1
ARM GAS  /tmp/ccepCjKs.s 			page 32


 838 0028 0193     		str	r3, [sp, #4]
 445:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 839              		.loc 1 445 3 is_stmt 1 view .LVU248
 445:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 840              		.loc 1 445 25 is_stmt 0 view .LVU249
 841 002a 5169     		ldr	r1, [r2, #20]
 445:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 842              		.loc 1 445 22 view .LVU250
 843 002c 0B44     		add	r3, r3, r1
 844 002e 0193     		str	r3, [sp, #4]
 446:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 845              		.loc 1 446 3 is_stmt 1 view .LVU251
 446:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 846              		.loc 1 446 25 is_stmt 0 view .LVU252
 847 0030 9169     		ldr	r1, [r2, #24]
 446:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 848              		.loc 1 446 22 view .LVU253
 849 0032 0B44     		add	r3, r3, r1
 850 0034 0193     		str	r3, [sp, #4]
 447:Core/Src/BLT/flash.c ****   signature_checksum  = ~signature_checksum; /* one's complement */
 851              		.loc 1 447 3 is_stmt 1 view .LVU254
 447:Core/Src/BLT/flash.c ****   signature_checksum  = ~signature_checksum; /* one's complement */
 852              		.loc 1 447 25 is_stmt 0 view .LVU255
 853 0036 D269     		ldr	r2, [r2, #28]
 447:Core/Src/BLT/flash.c ****   signature_checksum  = ~signature_checksum; /* one's complement */
 854              		.loc 1 447 22 view .LVU256
 855 0038 1344     		add	r3, r3, r2
 856 003a 0193     		str	r3, [sp, #4]
 448:Core/Src/BLT/flash.c ****   signature_checksum += 1; /* two's complement */
 857              		.loc 1 448 3 is_stmt 1 view .LVU257
 448:Core/Src/BLT/flash.c ****   signature_checksum += 1; /* two's complement */
 858              		.loc 1 448 25 is_stmt 0 view .LVU258
 859 003c DA43     		mvns	r2, r3
 448:Core/Src/BLT/flash.c ****   signature_checksum += 1; /* two's complement */
 860              		.loc 1 448 23 view .LVU259
 861 003e 0192     		str	r2, [sp, #4]
 449:Core/Src/BLT/flash.c **** 
 862              		.loc 1 449 3 is_stmt 1 view .LVU260
 449:Core/Src/BLT/flash.c **** 
 863              		.loc 1 449 22 is_stmt 0 view .LVU261
 864 0040 5B42     		rsbs	r3, r3, #0
 865 0042 0193     		str	r3, [sp, #4]
 452:Core/Src/BLT/flash.c ****                     sizeof(blt_addr), (blt_int8u *)&signature_checksum);
 866              		.loc 1 452 3 is_stmt 1 view .LVU262
 452:Core/Src/BLT/flash.c ****                     sizeof(blt_addr), (blt_int8u *)&signature_checksum);
 867              		.loc 1 452 10 is_stmt 0 view .LVU263
 868 0044 01AA     		add	r2, sp, #4
 869 0046 0421     		movs	r1, #4
 870 0048 0448     		ldr	r0, .L74+4
 871 004a FFF7FEFF 		bl	FlashWrite
 872              	.LVL91:
 873              	.L71:
 454:Core/Src/BLT/flash.c **** 
 874              		.loc 1 454 1 view .LVU264
 875 004e 03B0     		add	sp, sp, #12
 876              		.cfi_remember_state
 877              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccepCjKs.s 			page 33


 878              		@ sp needed
 879 0050 5DF804FB 		ldr	pc, [sp], #4
 880              	.L72:
 881              		.cfi_restore_state
 425:Core/Src/BLT/flash.c ****   }
 882              		.loc 1 425 12 view .LVU265
 883 0054 0120     		movs	r0, #1
 884 0056 FAE7     		b	.L71
 885              	.L75:
 886              		.align	2
 887              	.L74:
 888 0058 00000000 		.word	bootBlockInfo
 889 005c 88410008 		.word	134234504
 890              		.cfi_endproc
 891              	.LFE127:
 893              		.section	.text.FlashVerifyChecksum,"ax",%progbits
 894              		.align	1
 895              		.global	FlashVerifyChecksum
 896              		.syntax unified
 897              		.thumb
 898              		.thumb_func
 900              	FlashVerifyChecksum:
 901              	.LFB128:
 464:Core/Src/BLT/flash.c ****   blt_int32u signature_checksum = 0;
 902              		.loc 1 464 1 is_stmt 1 view -0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 0
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 906              		@ link register save eliminated.
 465:Core/Src/BLT/flash.c **** 
 907              		.loc 1 465 3 view .LVU267
 908              	.LVL92:
 468:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 909              		.loc 1 468 3 view .LVU268
 468:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 910              		.loc 1 468 25 is_stmt 0 view .LVU269
 911 0000 0A4B     		ldr	r3, .L79
 912 0002 1A68     		ldr	r2, [r3]
 913              	.LVL93:
 469:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 914              		.loc 1 469 3 is_stmt 1 view .LVU270
 469:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 915              		.loc 1 469 25 is_stmt 0 view .LVU271
 916 0004 5968     		ldr	r1, [r3, #4]
 469:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 917              		.loc 1 469 22 view .LVU272
 918 0006 1144     		add	r1, r1, r2
 919              	.LVL94:
 470:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 920              		.loc 1 470 3 is_stmt 1 view .LVU273
 470:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 921              		.loc 1 470 25 is_stmt 0 view .LVU274
 922 0008 9A68     		ldr	r2, [r3, #8]
 470:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 923              		.loc 1 470 22 view .LVU275
 924 000a 1144     		add	r1, r1, r2
 925              	.LVL95:
ARM GAS  /tmp/ccepCjKs.s 			page 34


 471:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 926              		.loc 1 471 3 is_stmt 1 view .LVU276
 471:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 927              		.loc 1 471 25 is_stmt 0 view .LVU277
 928 000c DA68     		ldr	r2, [r3, #12]
 471:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 929              		.loc 1 471 22 view .LVU278
 930 000e 1144     		add	r1, r1, r2
 931              	.LVL96:
 472:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 932              		.loc 1 472 3 is_stmt 1 view .LVU279
 472:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 933              		.loc 1 472 25 is_stmt 0 view .LVU280
 934 0010 1A69     		ldr	r2, [r3, #16]
 472:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 935              		.loc 1 472 22 view .LVU281
 936 0012 1144     		add	r1, r1, r2
 937              	.LVL97:
 473:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 938              		.loc 1 473 3 is_stmt 1 view .LVU282
 473:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 939              		.loc 1 473 25 is_stmt 0 view .LVU283
 940 0014 5A69     		ldr	r2, [r3, #20]
 473:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 941              		.loc 1 473 22 view .LVU284
 942 0016 1144     		add	r1, r1, r2
 943              	.LVL98:
 474:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFF
 944              		.loc 1 474 3 is_stmt 1 view .LVU285
 474:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFF
 945              		.loc 1 474 25 is_stmt 0 view .LVU286
 946 0018 9A69     		ldr	r2, [r3, #24]
 474:Core/Src/BLT/flash.c ****   signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFF
 947              		.loc 1 474 22 view .LVU287
 948 001a 0A44     		add	r2, r2, r1
 949              	.LVL99:
 475:Core/Src/BLT/flash.c ****   /* sum should add up to an unsigned 32-bit value of 0 */
 950              		.loc 1 475 3 is_stmt 1 view .LVU288
 475:Core/Src/BLT/flash.c ****   /* sum should add up to an unsigned 32-bit value of 0 */
 951              		.loc 1 475 25 is_stmt 0 view .LVU289
 952 001c D3F88831 		ldr	r3, [r3, #392]
 953              	.LVL100:
 477:Core/Src/BLT/flash.c ****   {
 954              		.loc 1 477 3 is_stmt 1 view .LVU290
 477:Core/Src/BLT/flash.c ****   {
 955              		.loc 1 477 6 is_stmt 0 view .LVU291
 956 0020 D342     		cmn	r3, r2
 957 0022 01D0     		beq	.L78
 483:Core/Src/BLT/flash.c **** } /*** end of FlashVerifyChecksum ***/
 958              		.loc 1 483 10 view .LVU292
 959 0024 0020     		movs	r0, #0
 960 0026 7047     		bx	lr
 961              	.L78:
 480:Core/Src/BLT/flash.c ****   }
 962              		.loc 1 480 12 view .LVU293
 963 0028 0120     		movs	r0, #1
 484:Core/Src/BLT/flash.c **** 
ARM GAS  /tmp/ccepCjKs.s 			page 35


 964              		.loc 1 484 1 view .LVU294
 965 002a 7047     		bx	lr
 966              	.L80:
 967              		.align	2
 968              	.L79:
 969 002c 00400008 		.word	134234112
 970              		.cfi_endproc
 971              	.LFE128:
 973              		.section	.text.FlashDone,"ax",%progbits
 974              		.align	1
 975              		.global	FlashDone
 976              		.syntax unified
 977              		.thumb
 978              		.thumb_func
 980              	FlashDone:
 981              	.LFB129:
 494:Core/Src/BLT/flash.c ****   /* check if there is still data waiting to be programmed in the boot block */
 982              		.loc 1 494 1 is_stmt 1 view -0
 983              		.cfi_startproc
 984              		@ args = 0, pretend = 0, frame = 0
 985              		@ frame_needed = 0, uses_anonymous_args = 0
 986 0000 08B5     		push	{r3, lr}
 987              		.cfi_def_cfa_offset 8
 988              		.cfi_offset 3, -8
 989              		.cfi_offset 14, -4
 496:Core/Src/BLT/flash.c ****   {
 990              		.loc 1 496 3 view .LVU296
 496:Core/Src/BLT/flash.c ****   {
 991              		.loc 1 496 20 is_stmt 0 view .LVU297
 992 0002 0C4B     		ldr	r3, .L88
 993 0004 1B68     		ldr	r3, [r3]
 496:Core/Src/BLT/flash.c ****   {
 994              		.loc 1 496 6 view .LVU298
 995 0006 B3F1FF3F 		cmp	r3, #-1
 996 000a 06D1     		bne	.L86
 997              	.L82:
 505:Core/Src/BLT/flash.c ****   {
 998              		.loc 1 505 3 is_stmt 1 view .LVU299
 505:Core/Src/BLT/flash.c ****   {
 999              		.loc 1 505 16 is_stmt 0 view .LVU300
 1000 000c 0A4B     		ldr	r3, .L88+4
 1001 000e 1B68     		ldr	r3, [r3]
 505:Core/Src/BLT/flash.c ****   {
 1002              		.loc 1 505 6 view .LVU301
 1003 0010 B3F1FF3F 		cmp	r3, #-1
 1004 0014 07D1     		bne	.L87
 513:Core/Src/BLT/flash.c **** } /*** end of FlashDone ***/
 1005              		.loc 1 513 10 view .LVU302
 1006 0016 0120     		movs	r0, #1
 1007              	.L83:
 514:Core/Src/BLT/flash.c **** 
 1008              		.loc 1 514 1 view .LVU303
 1009 0018 08BD     		pop	{r3, pc}
 1010              	.L86:
 498:Core/Src/BLT/flash.c ****     {
 1011              		.loc 1 498 5 is_stmt 1 view .LVU304
 498:Core/Src/BLT/flash.c ****     {
ARM GAS  /tmp/ccepCjKs.s 			page 36


 1012              		.loc 1 498 9 is_stmt 0 view .LVU305
 1013 001a 0648     		ldr	r0, .L88
 1014 001c FFF7FEFF 		bl	FlashWriteBlock
 1015              	.LVL101:
 498:Core/Src/BLT/flash.c ****     {
 1016              		.loc 1 498 8 view .LVU306
 1017 0020 0028     		cmp	r0, #0
 1018 0022 F3D1     		bne	.L82
 1019 0024 F8E7     		b	.L83
 1020              	.L87:
 507:Core/Src/BLT/flash.c ****     {
 1021              		.loc 1 507 5 is_stmt 1 view .LVU307
 507:Core/Src/BLT/flash.c ****     {
 1022              		.loc 1 507 9 is_stmt 0 view .LVU308
 1023 0026 0448     		ldr	r0, .L88+4
 1024 0028 FFF7FEFF 		bl	FlashWriteBlock
 1025              	.LVL102:
 507:Core/Src/BLT/flash.c ****     {
 1026              		.loc 1 507 8 view .LVU309
 1027 002c 0028     		cmp	r0, #0
 1028 002e F3D0     		beq	.L83
 513:Core/Src/BLT/flash.c **** } /*** end of FlashDone ***/
 1029              		.loc 1 513 10 view .LVU310
 1030 0030 0120     		movs	r0, #1
 1031 0032 F1E7     		b	.L83
 1032              	.L89:
 1033              		.align	2
 1034              	.L88:
 1035 0034 00000000 		.word	bootBlockInfo
 1036 0038 00000000 		.word	blockInfo
 1037              		.cfi_endproc
 1038              	.LFE129:
 1040              		.section	.text.FlashGetUserProgBaseAddress,"ax",%progbits
 1041              		.align	1
 1042              		.global	FlashGetUserProgBaseAddress
 1043              		.syntax unified
 1044              		.thumb
 1045              		.thumb_func
 1047              	FlashGetUserProgBaseAddress:
 1048              	.LFB130:
 524:Core/Src/BLT/flash.c ****   return flashLayout[0].sector_start;
 1049              		.loc 1 524 1 is_stmt 1 view -0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 0
 1052              		@ frame_needed = 0, uses_anonymous_args = 0
 1053              		@ link register save eliminated.
 525:Core/Src/BLT/flash.c **** } /*** end of FlashGetUserProgBaseAddress ***/
 1054              		.loc 1 525 3 view .LVU312
 526:Core/Src/BLT/flash.c **** 
 1055              		.loc 1 526 1 is_stmt 0 view .LVU313
 1056 0000 0048     		ldr	r0, .L91
 1057 0002 7047     		bx	lr
 1058              	.L92:
 1059              		.align	2
 1060              	.L91:
 1061 0004 00400008 		.word	134234112
 1062              		.cfi_endproc
ARM GAS  /tmp/ccepCjKs.s 			page 37


 1063              	.LFE130:
 1065              		.section	.bss.bootBlockInfo,"aw",%nobits
 1066              		.align	2
 1069              	bootBlockInfo:
 1070 0000 00000000 		.space	516
 1070      00000000 
 1070      00000000 
 1070      00000000 
 1070      00000000 
 1071              		.section	.bss.blockInfo,"aw",%nobits
 1072              		.align	2
 1075              	blockInfo:
 1076 0000 00000000 		.space	516
 1076      00000000 
 1076      00000000 
 1076      00000000 
 1076      00000000 
 1077              		.text
 1078              	.Letext0:
 1079              		.file 2 "Core/Inc/BLT/types.h"
 1080              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1081              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1082              		.file 5 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 1083              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
 1084              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
 1085              		.file 8 "Core/Inc/BLT/cpu.h"
 1086              		.file 9 "Core/Inc/BLT/cop.h"
ARM GAS  /tmp/ccepCjKs.s 			page 38


DEFINED SYMBOLS
                            *ABS*:0000000000000000 flash.c
     /tmp/ccepCjKs.s:21     .text.FlashInitBlock:0000000000000000 $t
     /tmp/ccepCjKs.s:26     .text.FlashInitBlock:0000000000000000 FlashInitBlock
     /tmp/ccepCjKs.s:81     .text.FlashWriteBlock:0000000000000000 $t
     /tmp/ccepCjKs.s:86     .text.FlashWriteBlock:0000000000000000 FlashWriteBlock
     /tmp/ccepCjKs.s:181    .text.FlashSwitchBlock:0000000000000000 $t
     /tmp/ccepCjKs.s:186    .text.FlashSwitchBlock:0000000000000000 FlashSwitchBlock
     /tmp/ccepCjKs.s:258    .text.FlashSwitchBlock:0000000000000038 $d
     /tmp/ccepCjKs.s:1069   .bss.bootBlockInfo:0000000000000000 bootBlockInfo
     /tmp/ccepCjKs.s:1075   .bss.blockInfo:0000000000000000 blockInfo
     /tmp/ccepCjKs.s:265    .text.FlashAddToBlock:0000000000000000 $t
     /tmp/ccepCjKs.s:270    .text.FlashAddToBlock:0000000000000000 FlashAddToBlock
     /tmp/ccepCjKs.s:422    .text.FlashInit:0000000000000000 $t
     /tmp/ccepCjKs.s:428    .text.FlashInit:0000000000000000 FlashInit
     /tmp/ccepCjKs.s:449    .text.FlashInit:0000000000000010 $d
     /tmp/ccepCjKs.s:455    .text.FlashReinit:0000000000000000 $t
     /tmp/ccepCjKs.s:461    .text.FlashReinit:0000000000000000 FlashReinit
     /tmp/ccepCjKs.s:482    .text.FlashReinit:0000000000000010 $d
     /tmp/ccepCjKs.s:488    .text.FlashWrite:0000000000000000 $t
     /tmp/ccepCjKs.s:494    .text.FlashWrite:0000000000000000 FlashWrite
     /tmp/ccepCjKs.s:600    .text.FlashWrite:0000000000000050 $d
     /tmp/ccepCjKs.s:608    .text.FlashErase:0000000000000000 $t
     /tmp/ccepCjKs.s:614    .text.FlashErase:0000000000000000 FlashErase
     /tmp/ccepCjKs.s:781    .text.FlashErase:0000000000000088 $d
     /tmp/ccepCjKs.s:787    .text.FlashWriteChecksum:0000000000000000 $t
     /tmp/ccepCjKs.s:793    .text.FlashWriteChecksum:0000000000000000 FlashWriteChecksum
     /tmp/ccepCjKs.s:888    .text.FlashWriteChecksum:0000000000000058 $d
     /tmp/ccepCjKs.s:894    .text.FlashVerifyChecksum:0000000000000000 $t
     /tmp/ccepCjKs.s:900    .text.FlashVerifyChecksum:0000000000000000 FlashVerifyChecksum
     /tmp/ccepCjKs.s:969    .text.FlashVerifyChecksum:000000000000002c $d
     /tmp/ccepCjKs.s:974    .text.FlashDone:0000000000000000 $t
     /tmp/ccepCjKs.s:980    .text.FlashDone:0000000000000000 FlashDone
     /tmp/ccepCjKs.s:1035   .text.FlashDone:0000000000000034 $d
     /tmp/ccepCjKs.s:1041   .text.FlashGetUserProgBaseAddress:0000000000000000 $t
     /tmp/ccepCjKs.s:1047   .text.FlashGetUserProgBaseAddress:0000000000000000 FlashGetUserProgBaseAddress
     /tmp/ccepCjKs.s:1061   .text.FlashGetUserProgBaseAddress:0000000000000004 $d
     /tmp/ccepCjKs.s:1066   .bss.bootBlockInfo:0000000000000000 $d
     /tmp/ccepCjKs.s:1072   .bss.blockInfo:0000000000000000 $d

UNDEFINED SYMBOLS
CpuMemCopy
HAL_FLASH_Unlock
CopService
HAL_FLASH_Program
HAL_FLASH_Lock
HAL_FLASHEx_Erase
