ARM GAS  /tmp/ccfH8Yoc.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"can.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/BLT/can.c"
  20              		.section	.text.CanInit,"ax",%progbits
  21              		.align	1
  22              		.global	CanInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	CanInit:
  28              	.LFB219:
   1:Core/Src/BLT/can.c **** /************************************************************************************//**
   2:Core/Src/BLT/can.c **** * \file         Source/ARMCM4_STM32F3/can.c
   3:Core/Src/BLT/can.c **** * \brief        Bootloader CAN communication interface source file.
   4:Core/Src/BLT/can.c **** * \ingroup      Target_ARMCM4_STM32F3
   5:Core/Src/BLT/can.c **** * \internal
   6:Core/Src/BLT/can.c **** *----------------------------------------------------------------------------------------
   7:Core/Src/BLT/can.c **** *                          C O P Y R I G H T
   8:Core/Src/BLT/can.c **** *----------------------------------------------------------------------------------------
   9:Core/Src/BLT/can.c **** *   Copyright (c) 2016  by Feaser    http://www.feaser.com    All rights reserved
  10:Core/Src/BLT/can.c **** *
  11:Core/Src/BLT/can.c **** *----------------------------------------------------------------------------------------
  12:Core/Src/BLT/can.c **** *                            L I C E N S E
  13:Core/Src/BLT/can.c **** *----------------------------------------------------------------------------------------
  14:Core/Src/BLT/can.c **** * This file is part of OpenBLT. OpenBLT is free software: you can redistribute it and/or
  15:Core/Src/BLT/can.c **** * modify it under the terms of the GNU General Public License as published by the Free
  16:Core/Src/BLT/can.c **** * Software Foundation, either version 3 of the License, or (at your option) any later
  17:Core/Src/BLT/can.c **** * version.
  18:Core/Src/BLT/can.c **** *
  19:Core/Src/BLT/can.c **** * OpenBLT is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  20:Core/Src/BLT/can.c **** * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  21:Core/Src/BLT/can.c **** * PURPOSE. See the GNU General Public License for more details.
  22:Core/Src/BLT/can.c **** *
  23:Core/Src/BLT/can.c **** * You have received a copy of the GNU General Public License along with OpenBLT. It
  24:Core/Src/BLT/can.c **** * should be located in ".\Doc\license.html". If not, contact Feaser to obtain a copy.
  25:Core/Src/BLT/can.c **** *
  26:Core/Src/BLT/can.c **** * \endinternal
  27:Core/Src/BLT/can.c **** ****************************************************************************************/
  28:Core/Src/BLT/can.c **** 
  29:Core/Src/BLT/can.c **** 
  30:Core/Src/BLT/can.c **** /****************************************************************************************
ARM GAS  /tmp/ccfH8Yoc.s 			page 2


  31:Core/Src/BLT/can.c **** * Include files
  32:Core/Src/BLT/can.c **** ****************************************************************************************/
  33:Core/Src/BLT/can.c **** #include "BLT/boot.h"                                /* bootloader generic header          */
  34:Core/Src/BLT/can.c **** #if (BOOT_COM_CAN_ENABLE > 0)
  35:Core/Src/BLT/can.c **** #include "stm32f3xx.h"                           /* STM32 CPU and HAL header           */
  36:Core/Src/BLT/can.c **** #include "stm32f3xx_ll_rcc.h"                    /* STM32 LL RCC header                */
  37:Core/Src/BLT/can.c **** 
  38:Core/Src/BLT/can.c **** 
  39:Core/Src/BLT/can.c **** /****************************************************************************************
  40:Core/Src/BLT/can.c **** * Macro definitions
  41:Core/Src/BLT/can.c **** ****************************************************************************************/
  42:Core/Src/BLT/can.c **** /** \brief Timeout for transmitting a CAN message in milliseconds. */
  43:Core/Src/BLT/can.c **** #define CAN_MSG_TX_TIMEOUT_MS          (50u)
  44:Core/Src/BLT/can.c **** 
  45:Core/Src/BLT/can.c **** /** \brief Set CAN base address to CAN1. */
  46:Core/Src/BLT/can.c **** #define CAN_CHANNEL   CAN
  47:Core/Src/BLT/can.c **** 
  48:Core/Src/BLT/can.c **** 
  49:Core/Src/BLT/can.c **** /****************************************************************************************
  50:Core/Src/BLT/can.c **** * Type definitions
  51:Core/Src/BLT/can.c **** ****************************************************************************************/
  52:Core/Src/BLT/can.c **** /** \brief Structure type for grouping CAN bus timing related information. */
  53:Core/Src/BLT/can.c **** typedef struct t_can_bus_timing
  54:Core/Src/BLT/can.c **** {
  55:Core/Src/BLT/can.c ****   blt_int8u tseg1;                                    /**< CAN time segment 1          */
  56:Core/Src/BLT/can.c ****   blt_int8u tseg2;                                    /**< CAN time segment 2          */
  57:Core/Src/BLT/can.c **** } tCanBusTiming;
  58:Core/Src/BLT/can.c **** 
  59:Core/Src/BLT/can.c **** 
  60:Core/Src/BLT/can.c **** /****************************************************************************************
  61:Core/Src/BLT/can.c **** * Local constant declarations
  62:Core/Src/BLT/can.c **** ****************************************************************************************/
  63:Core/Src/BLT/can.c **** /** \brief CAN bittiming table for dynamically calculating the bittiming settings.
  64:Core/Src/BLT/can.c ****  *  \details According to the CAN protocol 1 bit-time can be made up of between 8..25
  65:Core/Src/BLT/can.c ****  *           time quanta (TQ). The total TQ in a bit is SYNC + TSEG1 + TSEG2 with SYNC
  66:Core/Src/BLT/can.c ****  *           always being 1. The sample point is (SYNC + TSEG1) / (SYNC + TSEG1 + SEG2) *
  67:Core/Src/BLT/can.c ****  *           100%. This array contains possible and valid time quanta configurations with
  68:Core/Src/BLT/can.c ****  *           a sample point between 68..78%.
  69:Core/Src/BLT/can.c ****  */
  70:Core/Src/BLT/can.c **** static const tCanBusTiming canTiming[] =
  71:Core/Src/BLT/can.c **** {
  72:Core/Src/BLT/can.c ****   /*  TQ | TSEG1 | TSEG2 | SP  */
  73:Core/Src/BLT/can.c ****   /* ------------------------- */
  74:Core/Src/BLT/can.c ****   {  5, 2 },          /*   8 |   5   |   2   | 75% */
  75:Core/Src/BLT/can.c ****   {  6, 2 },          /*   9 |   6   |   2   | 78% */
  76:Core/Src/BLT/can.c ****   {  6, 3 },          /*  10 |   6   |   3   | 70% */
  77:Core/Src/BLT/can.c ****   {  7, 3 },          /*  11 |   7   |   3   | 73% */
  78:Core/Src/BLT/can.c ****   {  8, 3 },          /*  12 |   8   |   3   | 75% */
  79:Core/Src/BLT/can.c ****   {  9, 3 },          /*  13 |   9   |   3   | 77% */
  80:Core/Src/BLT/can.c ****   {  9, 4 },          /*  14 |   9   |   4   | 71% */
  81:Core/Src/BLT/can.c ****   { 10, 4 },          /*  15 |  10   |   4   | 73% */
  82:Core/Src/BLT/can.c ****   { 11, 4 },          /*  16 |  11   |   4   | 75% */
  83:Core/Src/BLT/can.c ****   { 12, 4 },          /*  17 |  12   |   4   | 76% */
  84:Core/Src/BLT/can.c ****   { 12, 5 },          /*  18 |  12   |   5   | 72% */
  85:Core/Src/BLT/can.c ****   { 13, 5 },          /*  19 |  13   |   5   | 74% */
  86:Core/Src/BLT/can.c ****   { 14, 5 },          /*  20 |  14   |   5   | 75% */
  87:Core/Src/BLT/can.c ****   { 15, 5 },          /*  21 |  15   |   5   | 76% */
ARM GAS  /tmp/ccfH8Yoc.s 			page 3


  88:Core/Src/BLT/can.c ****   { 15, 6 },          /*  22 |  15   |   6   | 73% */
  89:Core/Src/BLT/can.c ****   { 16, 6 },          /*  23 |  16   |   6   | 74% */
  90:Core/Src/BLT/can.c ****   { 16, 7 },          /*  24 |  16   |   7   | 71% */
  91:Core/Src/BLT/can.c ****   { 16, 8 }           /*  25 |  16   |   8   | 68% */
  92:Core/Src/BLT/can.c **** };
  93:Core/Src/BLT/can.c **** 
  94:Core/Src/BLT/can.c **** 
  95:Core/Src/BLT/can.c **** /****************************************************************************************
  96:Core/Src/BLT/can.c **** * Local data declarations
  97:Core/Src/BLT/can.c **** ****************************************************************************************/
  98:Core/Src/BLT/can.c **** /** \brief CAN handle to be used in API calls. */
  99:Core/Src/BLT/can.c **** static CAN_HandleTypeDef canHandle;
 100:Core/Src/BLT/can.c **** 
 101:Core/Src/BLT/can.c **** 
 102:Core/Src/BLT/can.c **** /************************************************************************************//**
 103:Core/Src/BLT/can.c **** ** \brief     Search algorithm to match the desired baudrate to a possible bus
 104:Core/Src/BLT/can.c **** **            timing configuration.
 105:Core/Src/BLT/can.c **** ** \param     baud The desired baudrate in kbps. Valid values are 10..1000.
 106:Core/Src/BLT/can.c **** ** \param     prescaler Pointer to where the value for the prescaler will be stored.
 107:Core/Src/BLT/can.c **** ** \param     tseg1 Pointer to where the value for TSEG2 will be stored.
 108:Core/Src/BLT/can.c **** ** \param     tseg2 Pointer to where the value for TSEG2 will be stored.
 109:Core/Src/BLT/can.c **** ** \return    BLT_TRUE if the CAN bustiming register values were found, BLT_FALSE
 110:Core/Src/BLT/can.c **** **            otherwise.
 111:Core/Src/BLT/can.c **** **
 112:Core/Src/BLT/can.c **** ****************************************************************************************/
 113:Core/Src/BLT/can.c **** static blt_bool CanGetSpeedConfig(blt_int16u baud, blt_int16u *prescaler,
 114:Core/Src/BLT/can.c ****                                   blt_int8u *tseg1, blt_int8u *tseg2)
 115:Core/Src/BLT/can.c **** {
 116:Core/Src/BLT/can.c ****   blt_int8u  cnt;
 117:Core/Src/BLT/can.c ****   blt_int32u canClockFreqkHz;
 118:Core/Src/BLT/can.c ****   LL_RCC_ClocksTypeDef rccClocks;
 119:Core/Src/BLT/can.c **** 
 120:Core/Src/BLT/can.c ****   /* read clock frequencies */
 121:Core/Src/BLT/can.c ****   LL_RCC_GetSystemClocksFreq(&rccClocks);
 122:Core/Src/BLT/can.c ****   /* store CAN peripheral clock speed in kHz */
 123:Core/Src/BLT/can.c ****   canClockFreqkHz = rccClocks.PCLK1_Frequency / 1000u;
 124:Core/Src/BLT/can.c **** 
 125:Core/Src/BLT/can.c ****   /* loop through all possible time quanta configurations to find a match */
 126:Core/Src/BLT/can.c ****   for (cnt=0; cnt < sizeof(canTiming)/sizeof(canTiming[0]); cnt++)
 127:Core/Src/BLT/can.c ****   {
 128:Core/Src/BLT/can.c ****     if ((canClockFreqkHz % (baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1))) == 0)
 129:Core/Src/BLT/can.c ****     {
 130:Core/Src/BLT/can.c ****       /* compute the prescaler that goes with this TQ configuration */
 131:Core/Src/BLT/can.c ****       *prescaler = canClockFreqkHz/(baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1));
 132:Core/Src/BLT/can.c **** 
 133:Core/Src/BLT/can.c ****       /* make sure the prescaler is valid */
 134:Core/Src/BLT/can.c ****       if ((*prescaler > 0) && (*prescaler <= 1024))
 135:Core/Src/BLT/can.c ****       {
 136:Core/Src/BLT/can.c ****         /* store the bustiming configuration */
 137:Core/Src/BLT/can.c ****         *tseg1 = canTiming[cnt].tseg1;
 138:Core/Src/BLT/can.c ****         *tseg2 = canTiming[cnt].tseg2;
 139:Core/Src/BLT/can.c ****         /* found a good bus timing configuration */
 140:Core/Src/BLT/can.c ****         return BLT_TRUE;
 141:Core/Src/BLT/can.c ****       }
 142:Core/Src/BLT/can.c ****     }
 143:Core/Src/BLT/can.c ****   }
 144:Core/Src/BLT/can.c ****   /* could not find a good bus timing configuration */
ARM GAS  /tmp/ccfH8Yoc.s 			page 4


 145:Core/Src/BLT/can.c ****   return BLT_FALSE;
 146:Core/Src/BLT/can.c **** } /*** end of CanGetSpeedConfig ***/
 147:Core/Src/BLT/can.c **** 
 148:Core/Src/BLT/can.c **** 
 149:Core/Src/BLT/can.c **** /************************************************************************************//**
 150:Core/Src/BLT/can.c **** ** \brief     Initializes the CAN controller and synchronizes it to the CAN bus.
 151:Core/Src/BLT/can.c **** ** \return    none.
 152:Core/Src/BLT/can.c **** **
 153:Core/Src/BLT/can.c **** ****************************************************************************************/
 154:Core/Src/BLT/can.c **** void CanInit(void)
 155:Core/Src/BLT/can.c **** {
  29              		.loc 1 155 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 40
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
  39 0002 8AB0     		sub	sp, sp, #40
  40              		.cfi_def_cfa_offset 56
 156:Core/Src/BLT/can.c ****   blt_int16u prescaler = 0;
  41              		.loc 1 156 3 view .LVU1
  42              	.LVL0:
 157:Core/Src/BLT/can.c ****   blt_int8u  tseg1 = 0, tseg2 = 0;
  43              		.loc 1 157 3 view .LVU2
 158:Core/Src/BLT/can.c ****   CAN_FilterTypeDef filterConfig;
  44              		.loc 1 158 3 view .LVU3
 159:Core/Src/BLT/can.c ****   blt_int32u rxMsgId = BOOT_COM_CAN_RX_MSG_ID;
  45              		.loc 1 159 3 view .LVU4
 160:Core/Src/BLT/can.c ****   blt_int32u rxFilterId, rxFilterMask;
  46              		.loc 1 160 3 view .LVU5
 161:Core/Src/BLT/can.c **** 
 162:Core/Src/BLT/can.c ****   /* the current implementation supports CAN1. throw an assertion error in case a
 163:Core/Src/BLT/can.c ****    * different CAN channel is configured.
 164:Core/Src/BLT/can.c ****    */
 165:Core/Src/BLT/can.c ****   ASSERT_CT(BOOT_COM_CAN_CHANNEL_INDEX == 0);
  47              		.loc 1 165 3 view .LVU6
 166:Core/Src/BLT/can.c ****   /* obtain bittiming configuration information. */
 167:Core/Src/BLT/can.c ****   // if (CanGetSpeedConfig(BOOT_COM_CAN_BAUDRATE/1000, &prescaler, &tseg1, &tseg2) == BLT_FALSE)
 168:Core/Src/BLT/can.c ****   // {
 169:Core/Src/BLT/can.c ****   //   /* Incorrect configuration. The specified baudrate is not supported for the given
 170:Core/Src/BLT/can.c ****   //    * clock configuration. Verify the following settings in blt_conf.h:
 171:Core/Src/BLT/can.c ****   //    *   - BOOT_COM_CAN_BAUDRATE
 172:Core/Src/BLT/can.c ****   //    *   - BOOT_CPU_XTAL_SPEED_KHZ
 173:Core/Src/BLT/can.c ****   //    *   - BOOT_CPU_SYSTEM_SPEED_KHZ
 174:Core/Src/BLT/can.c ****   //    */
 175:Core/Src/BLT/can.c ****   //   ASSERT_RT(BLT_FALSE);
 176:Core/Src/BLT/can.c ****   // }
 177:Core/Src/BLT/can.c **** 
 178:Core/Src/BLT/can.c ****   /* set the CAN controller configuration. */
 179:Core/Src/BLT/can.c ****   canHandle.Instance = CAN_CHANNEL;
  48              		.loc 1 179 3 view .LVU7
  49              		.loc 1 179 22 is_stmt 0 view .LVU8
  50 0004 184C     		ldr	r4, .L3
ARM GAS  /tmp/ccfH8Yoc.s 			page 5


  51 0006 194B     		ldr	r3, .L3+4
  52 0008 2360     		str	r3, [r4]
 180:Core/Src/BLT/can.c ****   canHandle.Init.TimeTriggeredMode = DISABLE;
  53              		.loc 1 180 3 is_stmt 1 view .LVU9
  54              		.loc 1 180 36 is_stmt 0 view .LVU10
  55 000a 0025     		movs	r5, #0
  56 000c 2576     		strb	r5, [r4, #24]
 181:Core/Src/BLT/can.c ****   canHandle.Init.AutoBusOff = DISABLE;
  57              		.loc 1 181 3 is_stmt 1 view .LVU11
  58              		.loc 1 181 29 is_stmt 0 view .LVU12
  59 000e 6576     		strb	r5, [r4, #25]
 182:Core/Src/BLT/can.c ****   canHandle.Init.AutoWakeUp = DISABLE;
  60              		.loc 1 182 3 is_stmt 1 view .LVU13
  61              		.loc 1 182 29 is_stmt 0 view .LVU14
  62 0010 A576     		strb	r5, [r4, #26]
 183:Core/Src/BLT/can.c ****   canHandle.Init.AutoRetransmission = ENABLE;
  63              		.loc 1 183 3 is_stmt 1 view .LVU15
  64              		.loc 1 183 37 is_stmt 0 view .LVU16
  65 0012 0126     		movs	r6, #1
  66 0014 E676     		strb	r6, [r4, #27]
 184:Core/Src/BLT/can.c ****   canHandle.Init.ReceiveFifoLocked = DISABLE;
  67              		.loc 1 184 3 is_stmt 1 view .LVU17
  68              		.loc 1 184 36 is_stmt 0 view .LVU18
  69 0016 2577     		strb	r5, [r4, #28]
 185:Core/Src/BLT/can.c ****   canHandle.Init.TransmitFifoPriority = DISABLE;
  70              		.loc 1 185 3 is_stmt 1 view .LVU19
  71              		.loc 1 185 39 is_stmt 0 view .LVU20
  72 0018 6577     		strb	r5, [r4, #29]
 186:Core/Src/BLT/can.c ****   canHandle.Init.Mode = CAN_MODE_NORMAL;
  73              		.loc 1 186 3 is_stmt 1 view .LVU21
  74              		.loc 1 186 23 is_stmt 0 view .LVU22
  75 001a A560     		str	r5, [r4, #8]
 187:Core/Src/BLT/can.c ****   canHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
  76              		.loc 1 187 3 is_stmt 1 view .LVU23
  77              		.loc 1 187 32 is_stmt 0 view .LVU24
  78 001c E560     		str	r5, [r4, #12]
 188:Core/Src/BLT/can.c ****   canHandle.Init.TimeSeg1 = ((blt_int32u)15 - 1) << CAN_BTR_TS1_Pos;
  79              		.loc 1 188 3 is_stmt 1 view .LVU25
  80              		.loc 1 188 27 is_stmt 0 view .LVU26
  81 001e 4FF46023 		mov	r3, #917504
  82 0022 2361     		str	r3, [r4, #16]
 189:Core/Src/BLT/can.c ****   canHandle.Init.TimeSeg2 = ((blt_int32u)2 - 1) << CAN_BTR_TS2_Pos;
  83              		.loc 1 189 3 is_stmt 1 view .LVU27
  84              		.loc 1 189 27 is_stmt 0 view .LVU28
  85 0024 4FF48013 		mov	r3, #1048576
  86 0028 6361     		str	r3, [r4, #20]
 190:Core/Src/BLT/can.c ****   canHandle.Init.Prescaler = 2;
  87              		.loc 1 190 3 is_stmt 1 view .LVU29
  88              		.loc 1 190 28 is_stmt 0 view .LVU30
  89 002a 0223     		movs	r3, #2
  90 002c 6360     		str	r3, [r4, #4]
 191:Core/Src/BLT/can.c ****   /* initialize the CAN controller. this only fails if the CAN controller hardware is
 192:Core/Src/BLT/can.c ****    * faulty. no need to evaluate the return value as there is nothing we can do about
 193:Core/Src/BLT/can.c ****    * a faulty CAN controller.
 194:Core/Src/BLT/can.c ****    */
 195:Core/Src/BLT/can.c ****   (void)HAL_CAN_Init(&canHandle);
  91              		.loc 1 195 3 is_stmt 1 view .LVU31
ARM GAS  /tmp/ccfH8Yoc.s 			page 6


  92              		.loc 1 195 9 is_stmt 0 view .LVU32
  93 002e 2046     		mov	r0, r4
  94 0030 FFF7FEFF 		bl	HAL_CAN_Init
  95              	.LVL1:
 196:Core/Src/BLT/can.c ****   /* determine the reception filter mask and id values such that it only leaves one
 197:Core/Src/BLT/can.c ****    * CAN identifier through (BOOT_COM_CAN_RX_MSG_ID).
 198:Core/Src/BLT/can.c ****    */
 199:Core/Src/BLT/can.c ****   if ((rxMsgId & 0x80000000) == 0)
  96              		.loc 1 199 3 is_stmt 1 view .LVU33
 200:Core/Src/BLT/can.c ****   {
 201:Core/Src/BLT/can.c ****     rxFilterId = rxMsgId << CAN_RI0R_STID_Pos;
  97              		.loc 1 201 5 view .LVU34
 202:Core/Src/BLT/can.c ****     rxFilterMask = (CAN_RI0R_STID_Msk) | CAN_RI0R_IDE;
  98              		.loc 1 202 5 view .LVU35
 203:Core/Src/BLT/can.c ****   }
 204:Core/Src/BLT/can.c ****   else
 205:Core/Src/BLT/can.c ****   {
 206:Core/Src/BLT/can.c ****     /* negate the ID-type bit */
 207:Core/Src/BLT/can.c ****     rxMsgId &= ~0x80000000;
 208:Core/Src/BLT/can.c ****     rxFilterId = (rxMsgId << CAN_RI0R_EXID_Pos) | CAN_RI0R_IDE;
 209:Core/Src/BLT/can.c ****     rxFilterMask = (CAN_RI0R_EXID_Msk) | CAN_RI0R_IDE;
 210:Core/Src/BLT/can.c ****   }
 211:Core/Src/BLT/can.c ****   /* configure the reception filter. note that the implementation of this function
 212:Core/Src/BLT/can.c ****    * always returns HAL_OK, so no need to evaluate the return value.
 213:Core/Src/BLT/can.c ****    */
 214:Core/Src/BLT/can.c ****   /* filter 0 is the first filter assigned to the bxCAN master (CAN1) */
 215:Core/Src/BLT/can.c ****   filterConfig.FilterBank = 0;
  99              		.loc 1 215 3 view .LVU36
 100              		.loc 1 215 27 is_stmt 0 view .LVU37
 101 0034 0595     		str	r5, [sp, #20]
 216:Core/Src/BLT/can.c ****   filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 102              		.loc 1 216 3 is_stmt 1 view .LVU38
 103              		.loc 1 216 27 is_stmt 0 view .LVU39
 104 0036 0695     		str	r5, [sp, #24]
 217:Core/Src/BLT/can.c ****   filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 105              		.loc 1 217 3 is_stmt 1 view .LVU40
 106              		.loc 1 217 28 is_stmt 0 view .LVU41
 107 0038 0796     		str	r6, [sp, #28]
 218:Core/Src/BLT/can.c ****   filterConfig.FilterIdHigh = (rxFilterId >> 16) & 0x0000FFFFu;
 108              		.loc 1 218 3 is_stmt 1 view .LVU42
 109              		.loc 1 218 29 is_stmt 0 view .LVU43
 110 003a 4FF4A453 		mov	r3, #5248
 111 003e 0093     		str	r3, [sp]
 219:Core/Src/BLT/can.c ****   filterConfig.FilterIdLow = rxFilterId & 0x0000FFFFu;
 112              		.loc 1 219 3 is_stmt 1 view .LVU44
 113              		.loc 1 219 28 is_stmt 0 view .LVU45
 114 0040 0195     		str	r5, [sp, #4]
 220:Core/Src/BLT/can.c ****   filterConfig.FilterMaskIdHigh = (rxFilterMask >> 16) & 0x0000FFFFu;
 115              		.loc 1 220 3 is_stmt 1 view .LVU46
 116              		.loc 1 220 33 is_stmt 0 view .LVU47
 117 0042 4FF6E073 		movw	r3, #65504
 118 0046 0293     		str	r3, [sp, #8]
 221:Core/Src/BLT/can.c ****   filterConfig.FilterMaskIdLow = rxFilterMask & 0x0000FFFFu;
 119              		.loc 1 221 3 is_stmt 1 view .LVU48
 120              		.loc 1 221 32 is_stmt 0 view .LVU49
 121 0048 0423     		movs	r3, #4
 122 004a 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/ccfH8Yoc.s 			page 7


 222:Core/Src/BLT/can.c ****   filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 123              		.loc 1 222 3 is_stmt 1 view .LVU50
 124              		.loc 1 222 37 is_stmt 0 view .LVU51
 125 004c 0495     		str	r5, [sp, #16]
 223:Core/Src/BLT/can.c ****   filterConfig.FilterActivation = ENABLE;
 126              		.loc 1 223 3 is_stmt 1 view .LVU52
 127              		.loc 1 223 33 is_stmt 0 view .LVU53
 128 004e 0896     		str	r6, [sp, #32]
 224:Core/Src/BLT/can.c ****   /* select the start slave bank number (for CAN1). this configuration assigns filter
 225:Core/Src/BLT/can.c ****    * banks 0..13 to CAN1 and 14..27 to CAN2.
 226:Core/Src/BLT/can.c ****    */
 227:Core/Src/BLT/can.c ****   filterConfig.SlaveStartFilterBank = 14;
 129              		.loc 1 227 3 is_stmt 1 view .LVU54
 130              		.loc 1 227 37 is_stmt 0 view .LVU55
 131 0050 0E23     		movs	r3, #14
 132 0052 0993     		str	r3, [sp, #36]
 228:Core/Src/BLT/can.c ****   (void)HAL_CAN_ConfigFilter(&canHandle, &filterConfig);
 133              		.loc 1 228 3 is_stmt 1 view .LVU56
 134              		.loc 1 228 9 is_stmt 0 view .LVU57
 135 0054 6946     		mov	r1, sp
 136 0056 2046     		mov	r0, r4
 137 0058 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 138              	.LVL2:
 229:Core/Src/BLT/can.c ****   /* start the CAN peripheral. no need to evaluate the return value as there is nothing
 230:Core/Src/BLT/can.c ****    * we can do about a faulty CAN controller. */
 231:Core/Src/BLT/can.c ****   (void)HAL_CAN_Start(&canHandle);
 139              		.loc 1 231 3 is_stmt 1 view .LVU58
 140              		.loc 1 231 9 is_stmt 0 view .LVU59
 141 005c 2046     		mov	r0, r4
 142 005e FFF7FEFF 		bl	HAL_CAN_Start
 143              	.LVL3:
 232:Core/Src/BLT/can.c **** } /*** end of CanInit ***/
 144              		.loc 1 232 1 view .LVU60
 145 0062 0AB0     		add	sp, sp, #40
 146              		.cfi_def_cfa_offset 16
 147              		@ sp needed
 148 0064 70BD     		pop	{r4, r5, r6, pc}
 149              	.L4:
 150 0066 00BF     		.align	2
 151              	.L3:
 152 0068 00000000 		.word	canHandle
 153 006c 00640040 		.word	1073767424
 154              		.cfi_endproc
 155              	.LFE219:
 157              		.section	.text.CanTransmitPacket,"ax",%progbits
 158              		.align	1
 159              		.global	CanTransmitPacket
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 164              	CanTransmitPacket:
 165              	.LVL4:
 166              	.LFB220:
 233:Core/Src/BLT/can.c **** 
 234:Core/Src/BLT/can.c **** 
 235:Core/Src/BLT/can.c **** /************************************************************************************//**
 236:Core/Src/BLT/can.c **** ** \brief     Transmits a packet formatted for the communication interface.
ARM GAS  /tmp/ccfH8Yoc.s 			page 8


 237:Core/Src/BLT/can.c **** ** \param     data Pointer to byte array with data that it to be transmitted.
 238:Core/Src/BLT/can.c **** ** \param     len  Number of bytes that are to be transmitted.
 239:Core/Src/BLT/can.c **** ** \return    none.
 240:Core/Src/BLT/can.c **** **
 241:Core/Src/BLT/can.c **** ****************************************************************************************/
 242:Core/Src/BLT/can.c **** void CanTransmitPacket(blt_int8u *data, blt_int8u len)
 243:Core/Src/BLT/can.c **** {
 167              		.loc 1 243 1 is_stmt 1 view -0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 32
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		.loc 1 243 1 is_stmt 0 view .LVU62
 172 0000 10B5     		push	{r4, lr}
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 4, -8
 175              		.cfi_offset 14, -4
 176 0002 88B0     		sub	sp, sp, #32
 177              		.cfi_def_cfa_offset 40
 178 0004 0246     		mov	r2, r0
 244:Core/Src/BLT/can.c ****   blt_int32u txMsgId = BOOT_COM_CAN_TX_MSG_ID;
 179              		.loc 1 244 3 is_stmt 1 view .LVU63
 180              	.LVL5:
 245:Core/Src/BLT/can.c ****   CAN_TxHeaderTypeDef txMsgHeader;
 181              		.loc 1 245 3 view .LVU64
 246:Core/Src/BLT/can.c ****   blt_int32u txMsgMailbox;
 182              		.loc 1 246 3 view .LVU65
 247:Core/Src/BLT/can.c ****   blt_int32u timeout;
 183              		.loc 1 247 3 view .LVU66
 248:Core/Src/BLT/can.c ****   HAL_StatusTypeDef txStatus;
 184              		.loc 1 248 3 view .LVU67
 249:Core/Src/BLT/can.c **** 
 250:Core/Src/BLT/can.c ****   /* configure the message that should be transmitted. */
 251:Core/Src/BLT/can.c ****   if ((txMsgId & 0x80000000) == 0)
 185              		.loc 1 251 3 view .LVU68
 252:Core/Src/BLT/can.c ****   {
 253:Core/Src/BLT/can.c ****     /* set the 11-bit CAN identifier. */
 254:Core/Src/BLT/can.c ****     txMsgHeader.StdId = txMsgId;
 186              		.loc 1 254 5 view .LVU69
 187              		.loc 1 254 23 is_stmt 0 view .LVU70
 188 0006 4FF4FD73 		mov	r3, #506
 189 000a 0293     		str	r3, [sp, #8]
 255:Core/Src/BLT/can.c ****     txMsgHeader.IDE = CAN_ID_STD;
 190              		.loc 1 255 5 is_stmt 1 view .LVU71
 191              		.loc 1 255 21 is_stmt 0 view .LVU72
 192 000c 0023     		movs	r3, #0
 193 000e 0493     		str	r3, [sp, #16]
 256:Core/Src/BLT/can.c ****   }
 257:Core/Src/BLT/can.c ****   else
 258:Core/Src/BLT/can.c ****   {
 259:Core/Src/BLT/can.c ****     /* negate the ID-type bit */
 260:Core/Src/BLT/can.c ****     txMsgId &= ~0x80000000;
 261:Core/Src/BLT/can.c ****     /* set the 29-bit CAN identifier. */
 262:Core/Src/BLT/can.c ****     txMsgHeader.ExtId = txMsgId;
 263:Core/Src/BLT/can.c ****     txMsgHeader.IDE = CAN_ID_EXT;
 264:Core/Src/BLT/can.c ****   }
 265:Core/Src/BLT/can.c ****   txMsgHeader.RTR = CAN_RTR_DATA;
 194              		.loc 1 265 3 is_stmt 1 view .LVU73
ARM GAS  /tmp/ccfH8Yoc.s 			page 9


 195              		.loc 1 265 19 is_stmt 0 view .LVU74
 196 0010 0593     		str	r3, [sp, #20]
 266:Core/Src/BLT/can.c ****   txMsgHeader.DLC = len;
 197              		.loc 1 266 3 is_stmt 1 view .LVU75
 198              		.loc 1 266 19 is_stmt 0 view .LVU76
 199 0012 0691     		str	r1, [sp, #24]
 267:Core/Src/BLT/can.c **** 
 268:Core/Src/BLT/can.c ****   /* submit the message for transmission. */
 269:Core/Src/BLT/can.c ****   txStatus = HAL_CAN_AddTxMessage(&canHandle, &txMsgHeader, data,
 200              		.loc 1 269 3 is_stmt 1 view .LVU77
 201              		.loc 1 269 14 is_stmt 0 view .LVU78
 202 0014 01AB     		add	r3, sp, #4
 203 0016 02A9     		add	r1, sp, #8
 204              	.LVL6:
 205              		.loc 1 269 14 view .LVU79
 206 0018 0B48     		ldr	r0, .L11
 207              	.LVL7:
 208              		.loc 1 269 14 view .LVU80
 209 001a FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 210              	.LVL8:
 270:Core/Src/BLT/can.c ****                                   (uint32_t *)&txMsgMailbox);
 271:Core/Src/BLT/can.c ****   if (txStatus == HAL_OK)
 211              		.loc 1 271 3 is_stmt 1 view .LVU81
 212              		.loc 1 271 6 is_stmt 0 view .LVU82
 213 001e 08B1     		cbz	r0, .L10
 214              	.LVL9:
 215              	.L5:
 272:Core/Src/BLT/can.c ****   {
 273:Core/Src/BLT/can.c ****     /* determine timeout time for the transmit completion. */
 274:Core/Src/BLT/can.c ****     timeout = TimerGet() + CAN_MSG_TX_TIMEOUT_MS;
 275:Core/Src/BLT/can.c ****     /* poll for completion of the transmit operation. */
 276:Core/Src/BLT/can.c ****     while (HAL_CAN_IsTxMessagePending(&canHandle, txMsgMailbox) != 0)
 277:Core/Src/BLT/can.c ****     {
 278:Core/Src/BLT/can.c ****       /* service the watchdog. */
 279:Core/Src/BLT/can.c ****       CopService();
 280:Core/Src/BLT/can.c ****       /* break loop upon timeout. this would indicate a hardware failure or no other
 281:Core/Src/BLT/can.c ****        * nodes connected to the bus.
 282:Core/Src/BLT/can.c ****        */
 283:Core/Src/BLT/can.c ****       if (TimerGet() > timeout)
 284:Core/Src/BLT/can.c ****       {
 285:Core/Src/BLT/can.c ****         break;
 286:Core/Src/BLT/can.c ****       }
 287:Core/Src/BLT/can.c ****     }
 288:Core/Src/BLT/can.c ****   }
 289:Core/Src/BLT/can.c **** } /*** end of CanTransmitPacket ***/
 216              		.loc 1 289 1 view .LVU83
 217 0020 08B0     		add	sp, sp, #32
 218              		.cfi_remember_state
 219              		.cfi_def_cfa_offset 8
 220              		@ sp needed
 221 0022 10BD     		pop	{r4, pc}
 222              	.LVL10:
 223              	.L10:
 224              		.cfi_restore_state
 274:Core/Src/BLT/can.c ****     /* poll for completion of the transmit operation. */
 225              		.loc 1 274 5 is_stmt 1 view .LVU84
 274:Core/Src/BLT/can.c ****     /* poll for completion of the transmit operation. */
ARM GAS  /tmp/ccfH8Yoc.s 			page 10


 226              		.loc 1 274 15 is_stmt 0 view .LVU85
 227 0024 FFF7FEFF 		bl	TimerGet
 228              	.LVL11:
 274:Core/Src/BLT/can.c ****     /* poll for completion of the transmit operation. */
 229              		.loc 1 274 13 discriminator 1 view .LVU86
 230 0028 00F13204 		add	r4, r0, #50
 231              	.LVL12:
 276:Core/Src/BLT/can.c ****     {
 232              		.loc 1 276 5 is_stmt 1 view .LVU87
 233              	.L7:
 276:Core/Src/BLT/can.c ****     {
 234              		.loc 1 276 65 view .LVU88
 276:Core/Src/BLT/can.c ****     {
 235              		.loc 1 276 12 is_stmt 0 view .LVU89
 236 002c 0199     		ldr	r1, [sp, #4]
 237 002e 0648     		ldr	r0, .L11
 238 0030 FFF7FEFF 		bl	HAL_CAN_IsTxMessagePending
 239              	.LVL13:
 276:Core/Src/BLT/can.c ****     {
 240              		.loc 1 276 65 discriminator 1 view .LVU90
 241 0034 0028     		cmp	r0, #0
 242 0036 F3D0     		beq	.L5
 279:Core/Src/BLT/can.c ****       /* break loop upon timeout. this would indicate a hardware failure or no other
 243              		.loc 1 279 7 is_stmt 1 view .LVU91
 244 0038 FFF7FEFF 		bl	CopService
 245              	.LVL14:
 283:Core/Src/BLT/can.c ****       {
 246              		.loc 1 283 7 view .LVU92
 283:Core/Src/BLT/can.c ****       {
 247              		.loc 1 283 11 is_stmt 0 view .LVU93
 248 003c FFF7FEFF 		bl	TimerGet
 249              	.LVL15:
 283:Core/Src/BLT/can.c ****       {
 250              		.loc 1 283 10 discriminator 1 view .LVU94
 251 0040 A042     		cmp	r0, r4
 252 0042 F3D9     		bls	.L7
 253 0044 ECE7     		b	.L5
 254              	.L12:
 255 0046 00BF     		.align	2
 256              	.L11:
 257 0048 00000000 		.word	canHandle
 258              		.cfi_endproc
 259              	.LFE220:
 261              		.section	.text.CanReceivePacket,"ax",%progbits
 262              		.align	1
 263              		.global	CanReceivePacket
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 268              	CanReceivePacket:
 269              	.LVL16:
 270              	.LFB221:
 290:Core/Src/BLT/can.c **** 
 291:Core/Src/BLT/can.c **** 
 292:Core/Src/BLT/can.c **** /************************************************************************************//**
 293:Core/Src/BLT/can.c **** ** \brief     Receives a communication interface packet if one is present.
 294:Core/Src/BLT/can.c **** ** \param     data Pointer to byte array where the data is to be stored.
ARM GAS  /tmp/ccfH8Yoc.s 			page 11


 295:Core/Src/BLT/can.c **** ** \param     len Pointer where the length of the packet is to be stored.
 296:Core/Src/BLT/can.c **** ** \return    BLT_TRUE is a packet was received, BLT_FALSE otherwise.
 297:Core/Src/BLT/can.c **** **
 298:Core/Src/BLT/can.c **** ****************************************************************************************/
 299:Core/Src/BLT/can.c **** blt_bool CanReceivePacket(blt_int8u *data, blt_int8u *len)
 300:Core/Src/BLT/can.c **** {
 271              		.loc 1 300 1 is_stmt 1 view -0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 32
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 275              		.loc 1 300 1 is_stmt 0 view .LVU96
 276 0000 10B5     		push	{r4, lr}
 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 4, -8
 279              		.cfi_offset 14, -4
 280 0002 88B0     		sub	sp, sp, #32
 281              		.cfi_def_cfa_offset 40
 282 0004 0346     		mov	r3, r0
 283 0006 0C46     		mov	r4, r1
 301:Core/Src/BLT/can.c ****   blt_int32u rxMsgId = BOOT_COM_CAN_RX_MSG_ID;
 284              		.loc 1 301 3 is_stmt 1 view .LVU97
 285              	.LVL17:
 302:Core/Src/BLT/can.c ****   blt_bool result = BLT_FALSE;
 286              		.loc 1 302 3 view .LVU98
 303:Core/Src/BLT/can.c ****   CAN_RxHeaderTypeDef rxMsgHeader;
 287              		.loc 1 303 3 view .LVU99
 304:Core/Src/BLT/can.c **** 
 305:Core/Src/BLT/can.c ****   if (HAL_CAN_GetRxMessage(&canHandle, CAN_RX_FIFO0, &rxMsgHeader, data) == HAL_OK)
 288              		.loc 1 305 3 view .LVU100
 289              		.loc 1 305 7 is_stmt 0 view .LVU101
 290 0008 01AA     		add	r2, sp, #4
 291 000a 0021     		movs	r1, #0
 292              	.LVL18:
 293              		.loc 1 305 7 view .LVU102
 294 000c 0748     		ldr	r0, .L17
 295              	.LVL19:
 296              		.loc 1 305 7 view .LVU103
 297 000e FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 298              	.LVL20:
 299              		.loc 1 305 6 discriminator 1 view .LVU104
 300 0012 40B9     		cbnz	r0, .L15
 306:Core/Src/BLT/can.c ****   {
 307:Core/Src/BLT/can.c ****     /* check if this message has the configured CAN packet identifier. */
 308:Core/Src/BLT/can.c ****     if ((rxMsgId & 0x80000000) == 0)
 301              		.loc 1 308 5 is_stmt 1 view .LVU105
 309:Core/Src/BLT/can.c ****     {
 310:Core/Src/BLT/can.c ****       /* was an 11-bit CAN message received that matches? */
 311:Core/Src/BLT/can.c ****       if ( (rxMsgHeader.StdId == rxMsgId) &&
 302              		.loc 1 311 7 view .LVU106
 303              		.loc 1 311 24 is_stmt 0 view .LVU107
 304 0014 019B     		ldr	r3, [sp, #4]
 305              		.loc 1 311 10 view .LVU108
 306 0016 A42B     		cmp	r3, #164
 307 0018 06D1     		bne	.L14
 312:Core/Src/BLT/can.c ****            (rxMsgHeader.IDE == CAN_ID_STD) )
 308              		.loc 1 312 24 view .LVU109
 309 001a 039B     		ldr	r3, [sp, #12]
ARM GAS  /tmp/ccfH8Yoc.s 			page 12


 311:Core/Src/BLT/can.c ****            (rxMsgHeader.IDE == CAN_ID_STD) )
 310              		.loc 1 311 43 discriminator 1 view .LVU110
 311 001c 23B9     		cbnz	r3, .L14
 313:Core/Src/BLT/can.c ****       {
 314:Core/Src/BLT/can.c ****         /* set flag that a packet with a matching CAN identifier was received. */
 315:Core/Src/BLT/can.c ****         result = BLT_TRUE;
 312              		.loc 1 315 9 is_stmt 1 view .LVU111
 313              	.LVL21:
 316:Core/Src/BLT/can.c ****       }
 317:Core/Src/BLT/can.c ****     }
 318:Core/Src/BLT/can.c ****     else
 319:Core/Src/BLT/can.c ****     {
 320:Core/Src/BLT/can.c ****       /* negate the ID-type bit. */
 321:Core/Src/BLT/can.c ****       rxMsgId &= ~0x80000000;
 322:Core/Src/BLT/can.c ****       /* was an 29-bit CAN message received that matches? */
 323:Core/Src/BLT/can.c ****       if ( (rxMsgHeader.ExtId == rxMsgId) &&
 324:Core/Src/BLT/can.c ****            (rxMsgHeader.IDE == CAN_ID_EXT) )
 325:Core/Src/BLT/can.c ****       {
 326:Core/Src/BLT/can.c ****         /* set flag that a packet with a matching CAN identifier was received. */
 327:Core/Src/BLT/can.c ****         result = BLT_TRUE;
 328:Core/Src/BLT/can.c ****       }
 329:Core/Src/BLT/can.c ****     }
 330:Core/Src/BLT/can.c ****   }
 331:Core/Src/BLT/can.c ****   /* store the data length. */
 332:Core/Src/BLT/can.c ****   if (result == BLT_TRUE)
 314              		.loc 1 332 3 view .LVU112
 333:Core/Src/BLT/can.c ****   {
 334:Core/Src/BLT/can.c ****     *len = rxMsgHeader.DLC;
 315              		.loc 1 334 5 view .LVU113
 316              		.loc 1 334 23 is_stmt 0 view .LVU114
 317 001e 059B     		ldr	r3, [sp, #20]
 318              		.loc 1 334 10 view .LVU115
 319 0020 2370     		strb	r3, [r4]
 315:Core/Src/BLT/can.c ****       }
 320              		.loc 1 315 16 view .LVU116
 321 0022 0120     		movs	r0, #1
 322 0024 00E0     		b	.L14
 323              	.LVL22:
 324              	.L15:
 302:Core/Src/BLT/can.c ****   CAN_RxHeaderTypeDef rxMsgHeader;
 325              		.loc 1 302 12 view .LVU117
 326 0026 0020     		movs	r0, #0
 327              	.LVL23:
 328              	.L14:
 335:Core/Src/BLT/can.c ****   }
 336:Core/Src/BLT/can.c ****   /* Give the result back to the caller. */
 337:Core/Src/BLT/can.c ****   return result;
 329              		.loc 1 337 3 is_stmt 1 view .LVU118
 338:Core/Src/BLT/can.c **** } /*** end of CanReceivePacket ***/
 330              		.loc 1 338 1 is_stmt 0 view .LVU119
 331 0028 08B0     		add	sp, sp, #32
 332              		.cfi_def_cfa_offset 8
 333              		@ sp needed
 334 002a 10BD     		pop	{r4, pc}
 335              	.LVL24:
 336              	.L18:
 337              		.loc 1 338 1 view .LVU120
ARM GAS  /tmp/ccfH8Yoc.s 			page 13


 338              		.align	2
 339              	.L17:
 340 002c 00000000 		.word	canHandle
 341              		.cfi_endproc
 342              	.LFE221:
 344              		.section	.bss.canHandle,"aw",%nobits
 345              		.align	2
 348              	canHandle:
 349 0000 00000000 		.space	40
 349      00000000 
 349      00000000 
 349      00000000 
 349      00000000 
 350              		.text
 351              	.Letext0:
 352              		.file 2 "Core/Inc/BLT/types.h"
 353              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 354              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 355              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f302x8.h"
 356              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 357              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 358              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_can.h"
 359              		.file 9 "Core/Inc/BLT/cop.h"
 360              		.file 10 "Core/Inc/BLT/timer.h"
ARM GAS  /tmp/ccfH8Yoc.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 can.c
     /tmp/ccfH8Yoc.s:21     .text.CanInit:00000000 $t
     /tmp/ccfH8Yoc.s:27     .text.CanInit:00000000 CanInit
     /tmp/ccfH8Yoc.s:152    .text.CanInit:00000068 $d
     /tmp/ccfH8Yoc.s:348    .bss.canHandle:00000000 canHandle
     /tmp/ccfH8Yoc.s:158    .text.CanTransmitPacket:00000000 $t
     /tmp/ccfH8Yoc.s:164    .text.CanTransmitPacket:00000000 CanTransmitPacket
     /tmp/ccfH8Yoc.s:257    .text.CanTransmitPacket:00000048 $d
     /tmp/ccfH8Yoc.s:262    .text.CanReceivePacket:00000000 $t
     /tmp/ccfH8Yoc.s:268    .text.CanReceivePacket:00000000 CanReceivePacket
     /tmp/ccfH8Yoc.s:340    .text.CanReceivePacket:0000002c $d
     /tmp/ccfH8Yoc.s:345    .bss.canHandle:00000000 $d

UNDEFINED SYMBOLS
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_AddTxMessage
TimerGet
HAL_CAN_IsTxMessagePending
CopService
HAL_CAN_GetRxMessage
