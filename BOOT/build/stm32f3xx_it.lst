ARM GAS  /tmp/ccEtGXDz.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f3xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/stm32f3xx_it.c"
  20              		.section	.text.NMI_Handler,"ax",%progbits
  21              		.align	1
  22              		.global	NMI_Handler
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	NMI_Handler:
  28              	.LFB484:
   1:Core/Src/stm32f3xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f3xx_it.c **** /**
   3:Core/Src/stm32f3xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f3xx_it.c ****   * @file    stm32f3xx_it.c
   5:Core/Src/stm32f3xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f3xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f3xx_it.c ****   * @attention
   8:Core/Src/stm32f3xx_it.c ****   *
   9:Core/Src/stm32f3xx_it.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/stm32f3xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32f3xx_it.c ****   *
  12:Core/Src/stm32f3xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32f3xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32f3xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32f3xx_it.c ****   *
  16:Core/Src/stm32f3xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32f3xx_it.c ****   */
  18:Core/Src/stm32f3xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32f3xx_it.c **** 
  20:Core/Src/stm32f3xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32f3xx_it.c **** #include "main.h"
  22:Core/Src/stm32f3xx_it.c **** #include "stm32f3xx_it.h"
  23:Core/Src/stm32f3xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32f3xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32f3xx_it.c **** /* USER CODE END Includes */
  26:Core/Src/stm32f3xx_it.c **** 
  27:Core/Src/stm32f3xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/stm32f3xx_it.c **** /* USER CODE BEGIN TD */
  29:Core/Src/stm32f3xx_it.c **** 
  30:Core/Src/stm32f3xx_it.c **** /* USER CODE END TD */
ARM GAS  /tmp/ccEtGXDz.s 			page 2


  31:Core/Src/stm32f3xx_it.c **** 
  32:Core/Src/stm32f3xx_it.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/stm32f3xx_it.c **** /* USER CODE BEGIN PD */
  34:Core/Src/stm32f3xx_it.c **** 
  35:Core/Src/stm32f3xx_it.c **** /* USER CODE END PD */
  36:Core/Src/stm32f3xx_it.c **** 
  37:Core/Src/stm32f3xx_it.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/stm32f3xx_it.c **** /* USER CODE BEGIN PM */
  39:Core/Src/stm32f3xx_it.c **** 
  40:Core/Src/stm32f3xx_it.c **** /* USER CODE END PM */
  41:Core/Src/stm32f3xx_it.c **** 
  42:Core/Src/stm32f3xx_it.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/stm32f3xx_it.c **** /* USER CODE BEGIN PV */
  44:Core/Src/stm32f3xx_it.c **** int lastTimer = 0;
  45:Core/Src/stm32f3xx_it.c **** /* USER CODE END PV */
  46:Core/Src/stm32f3xx_it.c **** 
  47:Core/Src/stm32f3xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  48:Core/Src/stm32f3xx_it.c **** /* USER CODE BEGIN PFP */
  49:Core/Src/stm32f3xx_it.c **** 
  50:Core/Src/stm32f3xx_it.c **** /* USER CODE END PFP */
  51:Core/Src/stm32f3xx_it.c **** 
  52:Core/Src/stm32f3xx_it.c **** /* Private user code ---------------------------------------------------------*/
  53:Core/Src/stm32f3xx_it.c **** /* USER CODE BEGIN 0 */
  54:Core/Src/stm32f3xx_it.c **** 
  55:Core/Src/stm32f3xx_it.c **** /* USER CODE END 0 */
  56:Core/Src/stm32f3xx_it.c **** 
  57:Core/Src/stm32f3xx_it.c **** /* External variables --------------------------------------------------------*/
  58:Core/Src/stm32f3xx_it.c **** extern CAN_HandleTypeDef hcan;
  59:Core/Src/stm32f3xx_it.c **** extern TIM_HandleTypeDef htim1;
  60:Core/Src/stm32f3xx_it.c **** extern TIM_HandleTypeDef htim15;
  61:Core/Src/stm32f3xx_it.c **** extern TIM_HandleTypeDef htim16;
  62:Core/Src/stm32f3xx_it.c **** extern TIM_HandleTypeDef htim17;
  63:Core/Src/stm32f3xx_it.c **** /* USER CODE BEGIN EV */
  64:Core/Src/stm32f3xx_it.c **** 
  65:Core/Src/stm32f3xx_it.c **** /* USER CODE END EV */
  66:Core/Src/stm32f3xx_it.c **** 
  67:Core/Src/stm32f3xx_it.c **** /******************************************************************************/
  68:Core/Src/stm32f3xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  69:Core/Src/stm32f3xx_it.c **** /******************************************************************************/
  70:Core/Src/stm32f3xx_it.c **** /**
  71:Core/Src/stm32f3xx_it.c ****   * @brief This function handles Non maskable interrupt.
  72:Core/Src/stm32f3xx_it.c ****   */
  73:Core/Src/stm32f3xx_it.c **** void NMI_Handler(void)
  74:Core/Src/stm32f3xx_it.c **** {
  29              		.loc 1 74 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.L2:
  75:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  76:Core/Src/stm32f3xx_it.c **** 
  77:Core/Src/stm32f3xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  78:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  79:Core/Src/stm32f3xx_it.c ****   while (1)
  36              		.loc 1 79 3 discriminator 1 view .LVU1
ARM GAS  /tmp/ccEtGXDz.s 			page 3


  80:Core/Src/stm32f3xx_it.c ****   {
  81:Core/Src/stm32f3xx_it.c ****   }
  37              		.loc 1 81 3 discriminator 1 view .LVU2
  79:Core/Src/stm32f3xx_it.c ****   {
  38              		.loc 1 79 9 discriminator 1 view .LVU3
  39 0000 FEE7     		b	.L2
  40              		.cfi_endproc
  41              	.LFE484:
  43              		.section	.text.HardFault_Handler,"ax",%progbits
  44              		.align	1
  45              		.global	HardFault_Handler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  50              	HardFault_Handler:
  51              	.LFB485:
  82:Core/Src/stm32f3xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  83:Core/Src/stm32f3xx_it.c **** }
  84:Core/Src/stm32f3xx_it.c **** 
  85:Core/Src/stm32f3xx_it.c **** /**
  86:Core/Src/stm32f3xx_it.c ****   * @brief This function handles Hard fault interrupt.
  87:Core/Src/stm32f3xx_it.c ****   */
  88:Core/Src/stm32f3xx_it.c **** void HardFault_Handler(void)
  89:Core/Src/stm32f3xx_it.c **** {
  52              		.loc 1 89 1 view -0
  53              		.cfi_startproc
  54              		@ Volatile: function does not return.
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.L4:
  90:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  91:Core/Src/stm32f3xx_it.c **** 
  92:Core/Src/stm32f3xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  93:Core/Src/stm32f3xx_it.c ****   while (1)
  59              		.loc 1 93 3 discriminator 1 view .LVU5
  94:Core/Src/stm32f3xx_it.c ****   {
  95:Core/Src/stm32f3xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  96:Core/Src/stm32f3xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  97:Core/Src/stm32f3xx_it.c ****   }
  60              		.loc 1 97 3 discriminator 1 view .LVU6
  93:Core/Src/stm32f3xx_it.c ****   {
  61              		.loc 1 93 9 discriminator 1 view .LVU7
  62 0000 FEE7     		b	.L4
  63              		.cfi_endproc
  64              	.LFE485:
  66              		.section	.text.MemManage_Handler,"ax",%progbits
  67              		.align	1
  68              		.global	MemManage_Handler
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  73              	MemManage_Handler:
  74              	.LFB486:
  98:Core/Src/stm32f3xx_it.c **** }
  99:Core/Src/stm32f3xx_it.c **** 
 100:Core/Src/stm32f3xx_it.c **** /**
ARM GAS  /tmp/ccEtGXDz.s 			page 4


 101:Core/Src/stm32f3xx_it.c ****   * @brief This function handles Memory management fault.
 102:Core/Src/stm32f3xx_it.c ****   */
 103:Core/Src/stm32f3xx_it.c **** void MemManage_Handler(void)
 104:Core/Src/stm32f3xx_it.c **** {
  75              		.loc 1 104 1 view -0
  76              		.cfi_startproc
  77              		@ Volatile: function does not return.
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81              	.L6:
 105:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 106:Core/Src/stm32f3xx_it.c **** 
 107:Core/Src/stm32f3xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 108:Core/Src/stm32f3xx_it.c ****   while (1)
  82              		.loc 1 108 3 discriminator 1 view .LVU9
 109:Core/Src/stm32f3xx_it.c ****   {
 110:Core/Src/stm32f3xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 111:Core/Src/stm32f3xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 112:Core/Src/stm32f3xx_it.c ****   }
  83              		.loc 1 112 3 discriminator 1 view .LVU10
 108:Core/Src/stm32f3xx_it.c ****   {
  84              		.loc 1 108 9 discriminator 1 view .LVU11
  85 0000 FEE7     		b	.L6
  86              		.cfi_endproc
  87              	.LFE486:
  89              		.section	.text.BusFault_Handler,"ax",%progbits
  90              		.align	1
  91              		.global	BusFault_Handler
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  96              	BusFault_Handler:
  97              	.LFB487:
 113:Core/Src/stm32f3xx_it.c **** }
 114:Core/Src/stm32f3xx_it.c **** 
 115:Core/Src/stm32f3xx_it.c **** /**
 116:Core/Src/stm32f3xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 117:Core/Src/stm32f3xx_it.c ****   */
 118:Core/Src/stm32f3xx_it.c **** void BusFault_Handler(void)
 119:Core/Src/stm32f3xx_it.c **** {
  98              		.loc 1 119 1 view -0
  99              		.cfi_startproc
 100              		@ Volatile: function does not return.
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.L8:
 120:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 121:Core/Src/stm32f3xx_it.c **** 
 122:Core/Src/stm32f3xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 123:Core/Src/stm32f3xx_it.c ****   while (1)
 105              		.loc 1 123 3 discriminator 1 view .LVU13
 124:Core/Src/stm32f3xx_it.c ****   {
 125:Core/Src/stm32f3xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 126:Core/Src/stm32f3xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 127:Core/Src/stm32f3xx_it.c ****   }
ARM GAS  /tmp/ccEtGXDz.s 			page 5


 106              		.loc 1 127 3 discriminator 1 view .LVU14
 123:Core/Src/stm32f3xx_it.c ****   {
 107              		.loc 1 123 9 discriminator 1 view .LVU15
 108 0000 FEE7     		b	.L8
 109              		.cfi_endproc
 110              	.LFE487:
 112              		.section	.text.UsageFault_Handler,"ax",%progbits
 113              		.align	1
 114              		.global	UsageFault_Handler
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 119              	UsageFault_Handler:
 120              	.LFB488:
 128:Core/Src/stm32f3xx_it.c **** }
 129:Core/Src/stm32f3xx_it.c **** 
 130:Core/Src/stm32f3xx_it.c **** /**
 131:Core/Src/stm32f3xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 132:Core/Src/stm32f3xx_it.c ****   */
 133:Core/Src/stm32f3xx_it.c **** void UsageFault_Handler(void)
 134:Core/Src/stm32f3xx_it.c **** {
 121              		.loc 1 134 1 view -0
 122              		.cfi_startproc
 123              		@ Volatile: function does not return.
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127              	.L10:
 135:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 136:Core/Src/stm32f3xx_it.c **** 
 137:Core/Src/stm32f3xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 138:Core/Src/stm32f3xx_it.c ****   while (1)
 128              		.loc 1 138 3 discriminator 1 view .LVU17
 139:Core/Src/stm32f3xx_it.c ****   {
 140:Core/Src/stm32f3xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 141:Core/Src/stm32f3xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 142:Core/Src/stm32f3xx_it.c ****   }
 129              		.loc 1 142 3 discriminator 1 view .LVU18
 138:Core/Src/stm32f3xx_it.c ****   {
 130              		.loc 1 138 9 discriminator 1 view .LVU19
 131 0000 FEE7     		b	.L10
 132              		.cfi_endproc
 133              	.LFE488:
 135              		.section	.text.SVC_Handler,"ax",%progbits
 136              		.align	1
 137              		.global	SVC_Handler
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 142              	SVC_Handler:
 143              	.LFB489:
 143:Core/Src/stm32f3xx_it.c **** }
 144:Core/Src/stm32f3xx_it.c **** 
 145:Core/Src/stm32f3xx_it.c **** /**
 146:Core/Src/stm32f3xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 147:Core/Src/stm32f3xx_it.c ****   */
 148:Core/Src/stm32f3xx_it.c **** void SVC_Handler(void)
ARM GAS  /tmp/ccEtGXDz.s 			page 6


 149:Core/Src/stm32f3xx_it.c **** {
 144              		.loc 1 149 1 view -0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 150:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 151:Core/Src/stm32f3xx_it.c **** 
 152:Core/Src/stm32f3xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 153:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 154:Core/Src/stm32f3xx_it.c **** 
 155:Core/Src/stm32f3xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 156:Core/Src/stm32f3xx_it.c **** }
 149              		.loc 1 156 1 view .LVU21
 150 0000 7047     		bx	lr
 151              		.cfi_endproc
 152              	.LFE489:
 154              		.section	.text.DebugMon_Handler,"ax",%progbits
 155              		.align	1
 156              		.global	DebugMon_Handler
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 161              	DebugMon_Handler:
 162              	.LFB490:
 157:Core/Src/stm32f3xx_it.c **** 
 158:Core/Src/stm32f3xx_it.c **** /**
 159:Core/Src/stm32f3xx_it.c ****   * @brief This function handles Debug monitor.
 160:Core/Src/stm32f3xx_it.c ****   */
 161:Core/Src/stm32f3xx_it.c **** void DebugMon_Handler(void)
 162:Core/Src/stm32f3xx_it.c **** {
 163              		.loc 1 162 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 163:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 164:Core/Src/stm32f3xx_it.c **** 
 165:Core/Src/stm32f3xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 166:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 167:Core/Src/stm32f3xx_it.c **** 
 168:Core/Src/stm32f3xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 169:Core/Src/stm32f3xx_it.c **** }
 168              		.loc 1 169 1 view .LVU23
 169 0000 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE490:
 173              		.section	.text.PendSV_Handler,"ax",%progbits
 174              		.align	1
 175              		.global	PendSV_Handler
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 180              	PendSV_Handler:
 181              	.LFB491:
 170:Core/Src/stm32f3xx_it.c **** 
 171:Core/Src/stm32f3xx_it.c **** /**
ARM GAS  /tmp/ccEtGXDz.s 			page 7


 172:Core/Src/stm32f3xx_it.c ****   * @brief This function handles Pendable request for system service.
 173:Core/Src/stm32f3xx_it.c ****   */
 174:Core/Src/stm32f3xx_it.c **** void PendSV_Handler(void)
 175:Core/Src/stm32f3xx_it.c **** {
 182              		.loc 1 175 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
 176:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 177:Core/Src/stm32f3xx_it.c **** 
 178:Core/Src/stm32f3xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 179:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 180:Core/Src/stm32f3xx_it.c **** 
 181:Core/Src/stm32f3xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 182:Core/Src/stm32f3xx_it.c **** }
 187              		.loc 1 182 1 view .LVU25
 188 0000 7047     		bx	lr
 189              		.cfi_endproc
 190              	.LFE491:
 192              		.section	.text.SysTick_Handler,"ax",%progbits
 193              		.align	1
 194              		.global	SysTick_Handler
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 199              	SysTick_Handler:
 200              	.LFB492:
 183:Core/Src/stm32f3xx_it.c **** 
 184:Core/Src/stm32f3xx_it.c **** /**
 185:Core/Src/stm32f3xx_it.c ****   * @brief This function handles System tick timer.
 186:Core/Src/stm32f3xx_it.c ****   */
 187:Core/Src/stm32f3xx_it.c **** void SysTick_Handler(void)
 188:Core/Src/stm32f3xx_it.c **** {
 201              		.loc 1 188 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205 0000 08B5     		push	{r3, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 3, -8
 208              		.cfi_offset 14, -4
 189:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 190:Core/Src/stm32f3xx_it.c **** 
 191:Core/Src/stm32f3xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 192:Core/Src/stm32f3xx_it.c ****   HAL_IncTick();
 209              		.loc 1 192 3 view .LVU27
 210 0002 FFF7FEFF 		bl	HAL_IncTick
 211              	.LVL0:
 193:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 194:Core/Src/stm32f3xx_it.c ****   if (HAL_GetTick() - lastTimer > 250) {
 212              		.loc 1 194 3 view .LVU28
 213              		.loc 1 194 7 is_stmt 0 view .LVU29
 214 0006 FFF7FEFF 		bl	HAL_GetTick
 215              	.LVL1:
 216              		.loc 1 194 21 view .LVU30
 217 000a 0B4B     		ldr	r3, .L18
ARM GAS  /tmp/ccEtGXDz.s 			page 8


 218 000c 1B68     		ldr	r3, [r3]
 219 000e C01A     		subs	r0, r0, r3
 220              		.loc 1 194 6 view .LVU31
 221 0010 FA28     		cmp	r0, #250
 222 0012 00D8     		bhi	.L17
 223              	.L14:
 195:Core/Src/stm32f3xx_it.c **** 	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 196:Core/Src/stm32f3xx_it.c **** 	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 197:Core/Src/stm32f3xx_it.c **** 	  lastTimer = HAL_GetTick();
 198:Core/Src/stm32f3xx_it.c ****   }
 199:Core/Src/stm32f3xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 200:Core/Src/stm32f3xx_it.c **** }
 224              		.loc 1 200 1 view .LVU32
 225 0014 08BD     		pop	{r3, pc}
 226              	.L17:
 195:Core/Src/stm32f3xx_it.c **** 	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 227              		.loc 1 195 4 is_stmt 1 view .LVU33
 228 0016 4FF40041 		mov	r1, #32768
 229 001a 0848     		ldr	r0, .L18+4
 230 001c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 231              	.LVL2:
 196:Core/Src/stm32f3xx_it.c **** 	  lastTimer = HAL_GetTick();
 232              		.loc 1 196 4 view .LVU34
 233 0020 4FF48071 		mov	r1, #256
 234 0024 4FF09040 		mov	r0, #1207959552
 235 0028 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 236              	.LVL3:
 197:Core/Src/stm32f3xx_it.c ****   }
 237              		.loc 1 197 4 view .LVU35
 197:Core/Src/stm32f3xx_it.c ****   }
 238              		.loc 1 197 16 is_stmt 0 view .LVU36
 239 002c FFF7FEFF 		bl	HAL_GetTick
 240              	.LVL4:
 197:Core/Src/stm32f3xx_it.c ****   }
 241              		.loc 1 197 14 view .LVU37
 242 0030 014B     		ldr	r3, .L18
 243 0032 1860     		str	r0, [r3]
 244              		.loc 1 200 1 view .LVU38
 245 0034 EEE7     		b	.L14
 246              	.L19:
 247 0036 00BF     		.align	2
 248              	.L18:
 249 0038 00000000 		.word	lastTimer
 250 003c 00040048 		.word	1207960576
 251              		.cfi_endproc
 252              	.LFE492:
 254              		.section	.text.USB_LP_CAN_RX0_IRQHandler,"ax",%progbits
 255              		.align	1
 256              		.global	USB_LP_CAN_RX0_IRQHandler
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 261              	USB_LP_CAN_RX0_IRQHandler:
 262              	.LFB493:
 201:Core/Src/stm32f3xx_it.c **** 
 202:Core/Src/stm32f3xx_it.c **** /******************************************************************************/
 203:Core/Src/stm32f3xx_it.c **** /* STM32F3xx Peripheral Interrupt Handlers                                    */
ARM GAS  /tmp/ccEtGXDz.s 			page 9


 204:Core/Src/stm32f3xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 205:Core/Src/stm32f3xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 206:Core/Src/stm32f3xx_it.c **** /* please refer to the startup file (startup_stm32f3xx.s).                    */
 207:Core/Src/stm32f3xx_it.c **** /******************************************************************************/
 208:Core/Src/stm32f3xx_it.c **** 
 209:Core/Src/stm32f3xx_it.c **** /**
 210:Core/Src/stm32f3xx_it.c ****   * @brief This function handles CAN RX0 and USB low priority interrupts.
 211:Core/Src/stm32f3xx_it.c ****   */
 212:Core/Src/stm32f3xx_it.c **** void USB_LP_CAN_RX0_IRQHandler(void)
 213:Core/Src/stm32f3xx_it.c **** {
 263              		.loc 1 213 1 is_stmt 1 view -0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267 0000 08B5     		push	{r3, lr}
 268              		.cfi_def_cfa_offset 8
 269              		.cfi_offset 3, -8
 270              		.cfi_offset 14, -4
 214:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */
 215:Core/Src/stm32f3xx_it.c **** 
 216:Core/Src/stm32f3xx_it.c ****   /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
 217:Core/Src/stm32f3xx_it.c ****   HAL_CAN_IRQHandler(&hcan);
 271              		.loc 1 217 3 view .LVU40
 272 0002 0248     		ldr	r0, .L22
 273 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 274              	.LVL5:
 218:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */
 219:Core/Src/stm32f3xx_it.c **** 
 220:Core/Src/stm32f3xx_it.c ****   /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
 221:Core/Src/stm32f3xx_it.c **** }
 275              		.loc 1 221 1 is_stmt 0 view .LVU41
 276 0008 08BD     		pop	{r3, pc}
 277              	.L23:
 278 000a 00BF     		.align	2
 279              	.L22:
 280 000c 00000000 		.word	hcan
 281              		.cfi_endproc
 282              	.LFE493:
 284              		.section	.text.CAN_RX1_IRQHandler,"ax",%progbits
 285              		.align	1
 286              		.global	CAN_RX1_IRQHandler
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 291              	CAN_RX1_IRQHandler:
 292              	.LFB494:
 222:Core/Src/stm32f3xx_it.c **** 
 223:Core/Src/stm32f3xx_it.c **** /**
 224:Core/Src/stm32f3xx_it.c ****   * @brief This function handles CAN RX1 interrupt.
 225:Core/Src/stm32f3xx_it.c ****   */
 226:Core/Src/stm32f3xx_it.c **** void CAN_RX1_IRQHandler(void)
 227:Core/Src/stm32f3xx_it.c **** {
 293              		.loc 1 227 1 is_stmt 1 view -0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccEtGXDz.s 			page 10


 298              		.cfi_def_cfa_offset 8
 299              		.cfi_offset 3, -8
 300              		.cfi_offset 14, -4
 228:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN CAN_RX1_IRQn 0 */
 229:Core/Src/stm32f3xx_it.c **** 
 230:Core/Src/stm32f3xx_it.c ****   /* USER CODE END CAN_RX1_IRQn 0 */
 231:Core/Src/stm32f3xx_it.c ****   HAL_CAN_IRQHandler(&hcan);
 301              		.loc 1 231 3 view .LVU43
 302 0002 0248     		ldr	r0, .L26
 303 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 304              	.LVL6:
 232:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN CAN_RX1_IRQn 1 */
 233:Core/Src/stm32f3xx_it.c **** 
 234:Core/Src/stm32f3xx_it.c ****   /* USER CODE END CAN_RX1_IRQn 1 */
 235:Core/Src/stm32f3xx_it.c **** }
 305              		.loc 1 235 1 is_stmt 0 view .LVU44
 306 0008 08BD     		pop	{r3, pc}
 307              	.L27:
 308 000a 00BF     		.align	2
 309              	.L26:
 310 000c 00000000 		.word	hcan
 311              		.cfi_endproc
 312              	.LFE494:
 314              		.section	.text.CAN_SCE_IRQHandler,"ax",%progbits
 315              		.align	1
 316              		.global	CAN_SCE_IRQHandler
 317              		.syntax unified
 318              		.thumb
 319              		.thumb_func
 321              	CAN_SCE_IRQHandler:
 322              	.LFB495:
 236:Core/Src/stm32f3xx_it.c **** 
 237:Core/Src/stm32f3xx_it.c **** /**
 238:Core/Src/stm32f3xx_it.c ****   * @brief This function handles CAN SCE interrupt.
 239:Core/Src/stm32f3xx_it.c ****   */
 240:Core/Src/stm32f3xx_it.c **** void CAN_SCE_IRQHandler(void)
 241:Core/Src/stm32f3xx_it.c **** {
 323              		.loc 1 241 1 is_stmt 1 view -0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327 0000 08B5     		push	{r3, lr}
 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 3, -8
 330              		.cfi_offset 14, -4
 242:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN CAN_SCE_IRQn 0 */
 243:Core/Src/stm32f3xx_it.c **** 
 244:Core/Src/stm32f3xx_it.c ****   /* USER CODE END CAN_SCE_IRQn 0 */
 245:Core/Src/stm32f3xx_it.c ****   HAL_CAN_IRQHandler(&hcan);
 331              		.loc 1 245 3 view .LVU46
 332 0002 0248     		ldr	r0, .L30
 333 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 334              	.LVL7:
 246:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN CAN_SCE_IRQn 1 */
 247:Core/Src/stm32f3xx_it.c **** 
 248:Core/Src/stm32f3xx_it.c ****   /* USER CODE END CAN_SCE_IRQn 1 */
 249:Core/Src/stm32f3xx_it.c **** }
ARM GAS  /tmp/ccEtGXDz.s 			page 11


 335              		.loc 1 249 1 is_stmt 0 view .LVU47
 336 0008 08BD     		pop	{r3, pc}
 337              	.L31:
 338 000a 00BF     		.align	2
 339              	.L30:
 340 000c 00000000 		.word	hcan
 341              		.cfi_endproc
 342              	.LFE495:
 344              		.section	.text.TIM1_BRK_TIM15_IRQHandler,"ax",%progbits
 345              		.align	1
 346              		.global	TIM1_BRK_TIM15_IRQHandler
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 351              	TIM1_BRK_TIM15_IRQHandler:
 352              	.LFB496:
 250:Core/Src/stm32f3xx_it.c **** 
 251:Core/Src/stm32f3xx_it.c **** /**
 252:Core/Src/stm32f3xx_it.c ****   * @brief This function handles TIM1 break and TIM15 interrupts.
 253:Core/Src/stm32f3xx_it.c ****   */
 254:Core/Src/stm32f3xx_it.c **** void TIM1_BRK_TIM15_IRQHandler(void)
 255:Core/Src/stm32f3xx_it.c **** {
 353              		.loc 1 255 1 is_stmt 1 view -0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357 0000 08B5     		push	{r3, lr}
 358              		.cfi_def_cfa_offset 8
 359              		.cfi_offset 3, -8
 360              		.cfi_offset 14, -4
 256:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
 257:Core/Src/stm32f3xx_it.c **** 
 258:Core/Src/stm32f3xx_it.c ****   /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
 259:Core/Src/stm32f3xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 361              		.loc 1 259 3 view .LVU49
 362 0002 0348     		ldr	r0, .L34
 363 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 364              	.LVL8:
 260:Core/Src/stm32f3xx_it.c ****   HAL_TIM_IRQHandler(&htim15);
 365              		.loc 1 260 3 view .LVU50
 366 0008 0248     		ldr	r0, .L34+4
 367 000a FFF7FEFF 		bl	HAL_TIM_IRQHandler
 368              	.LVL9:
 261:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
 262:Core/Src/stm32f3xx_it.c **** 
 263:Core/Src/stm32f3xx_it.c ****   /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
 264:Core/Src/stm32f3xx_it.c **** }
 369              		.loc 1 264 1 is_stmt 0 view .LVU51
 370 000e 08BD     		pop	{r3, pc}
 371              	.L35:
 372              		.align	2
 373              	.L34:
 374 0010 00000000 		.word	htim1
 375 0014 00000000 		.word	htim15
 376              		.cfi_endproc
 377              	.LFE496:
 379              		.section	.text.TIM1_UP_TIM16_IRQHandler,"ax",%progbits
ARM GAS  /tmp/ccEtGXDz.s 			page 12


 380              		.align	1
 381              		.global	TIM1_UP_TIM16_IRQHandler
 382              		.syntax unified
 383              		.thumb
 384              		.thumb_func
 386              	TIM1_UP_TIM16_IRQHandler:
 387              	.LFB497:
 265:Core/Src/stm32f3xx_it.c **** 
 266:Core/Src/stm32f3xx_it.c **** /**
 267:Core/Src/stm32f3xx_it.c ****   * @brief This function handles TIM1 update and TIM16 interrupts.
 268:Core/Src/stm32f3xx_it.c ****   */
 269:Core/Src/stm32f3xx_it.c **** void TIM1_UP_TIM16_IRQHandler(void)
 270:Core/Src/stm32f3xx_it.c **** {
 388              		.loc 1 270 1 is_stmt 1 view -0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392 0000 08B5     		push	{r3, lr}
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 3, -8
 395              		.cfi_offset 14, -4
 271:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
 272:Core/Src/stm32f3xx_it.c **** 
 273:Core/Src/stm32f3xx_it.c ****   /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
 274:Core/Src/stm32f3xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 396              		.loc 1 274 3 view .LVU53
 397 0002 0348     		ldr	r0, .L38
 398 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 399              	.LVL10:
 275:Core/Src/stm32f3xx_it.c ****   HAL_TIM_IRQHandler(&htim16);
 400              		.loc 1 275 3 view .LVU54
 401 0008 0248     		ldr	r0, .L38+4
 402 000a FFF7FEFF 		bl	HAL_TIM_IRQHandler
 403              	.LVL11:
 276:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
 277:Core/Src/stm32f3xx_it.c **** 
 278:Core/Src/stm32f3xx_it.c ****   /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
 279:Core/Src/stm32f3xx_it.c **** }
 404              		.loc 1 279 1 is_stmt 0 view .LVU55
 405 000e 08BD     		pop	{r3, pc}
 406              	.L39:
 407              		.align	2
 408              	.L38:
 409 0010 00000000 		.word	htim1
 410 0014 00000000 		.word	htim16
 411              		.cfi_endproc
 412              	.LFE497:
 414              		.section	.text.TIM1_TRG_COM_TIM17_IRQHandler,"ax",%progbits
 415              		.align	1
 416              		.global	TIM1_TRG_COM_TIM17_IRQHandler
 417              		.syntax unified
 418              		.thumb
 419              		.thumb_func
 421              	TIM1_TRG_COM_TIM17_IRQHandler:
 422              	.LFB498:
 280:Core/Src/stm32f3xx_it.c **** 
 281:Core/Src/stm32f3xx_it.c **** /**
ARM GAS  /tmp/ccEtGXDz.s 			page 13


 282:Core/Src/stm32f3xx_it.c ****   * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
 283:Core/Src/stm32f3xx_it.c ****   */
 284:Core/Src/stm32f3xx_it.c **** void TIM1_TRG_COM_TIM17_IRQHandler(void)
 285:Core/Src/stm32f3xx_it.c **** {
 423              		.loc 1 285 1 is_stmt 1 view -0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427 0000 08B5     		push	{r3, lr}
 428              		.cfi_def_cfa_offset 8
 429              		.cfi_offset 3, -8
 430              		.cfi_offset 14, -4
 286:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
 287:Core/Src/stm32f3xx_it.c **** 
 288:Core/Src/stm32f3xx_it.c ****   /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
 289:Core/Src/stm32f3xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 431              		.loc 1 289 3 view .LVU57
 432 0002 0348     		ldr	r0, .L42
 433 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 434              	.LVL12:
 290:Core/Src/stm32f3xx_it.c ****   HAL_TIM_IRQHandler(&htim17);
 435              		.loc 1 290 3 view .LVU58
 436 0008 0248     		ldr	r0, .L42+4
 437 000a FFF7FEFF 		bl	HAL_TIM_IRQHandler
 438              	.LVL13:
 291:Core/Src/stm32f3xx_it.c ****   /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
 292:Core/Src/stm32f3xx_it.c **** 
 293:Core/Src/stm32f3xx_it.c ****   /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
 294:Core/Src/stm32f3xx_it.c **** }
 439              		.loc 1 294 1 is_stmt 0 view .LVU59
 440 000e 08BD     		pop	{r3, pc}
 441              	.L43:
 442              		.align	2
 443              	.L42:
 444 0010 00000000 		.word	htim1
 445 0014 00000000 		.word	htim17
 446              		.cfi_endproc
 447              	.LFE498:
 449              		.global	lastTimer
 450              		.section	.bss.lastTimer,"aw",%nobits
 451              		.align	2
 454              	lastTimer:
 455 0000 00000000 		.space	4
 456              		.text
 457              	.Letext0:
 458              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 459              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 460              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f302x8.h"
 461              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 462              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 463              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 464              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_can.h"
 465              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 466              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 467              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h"
 468              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
ARM GAS  /tmp/ccEtGXDz.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f3xx_it.c
     /tmp/ccEtGXDz.s:21     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccEtGXDz.s:27     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccEtGXDz.s:44     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccEtGXDz.s:50     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccEtGXDz.s:67     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccEtGXDz.s:73     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccEtGXDz.s:90     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccEtGXDz.s:96     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccEtGXDz.s:113    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccEtGXDz.s:119    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccEtGXDz.s:136    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccEtGXDz.s:142    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccEtGXDz.s:155    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccEtGXDz.s:161    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccEtGXDz.s:174    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccEtGXDz.s:180    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccEtGXDz.s:193    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccEtGXDz.s:199    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccEtGXDz.s:249    .text.SysTick_Handler:0000000000000038 $d
     /tmp/ccEtGXDz.s:454    .bss.lastTimer:0000000000000000 lastTimer
     /tmp/ccEtGXDz.s:255    .text.USB_LP_CAN_RX0_IRQHandler:0000000000000000 $t
     /tmp/ccEtGXDz.s:261    .text.USB_LP_CAN_RX0_IRQHandler:0000000000000000 USB_LP_CAN_RX0_IRQHandler
     /tmp/ccEtGXDz.s:280    .text.USB_LP_CAN_RX0_IRQHandler:000000000000000c $d
     /tmp/ccEtGXDz.s:285    .text.CAN_RX1_IRQHandler:0000000000000000 $t
     /tmp/ccEtGXDz.s:291    .text.CAN_RX1_IRQHandler:0000000000000000 CAN_RX1_IRQHandler
     /tmp/ccEtGXDz.s:310    .text.CAN_RX1_IRQHandler:000000000000000c $d
     /tmp/ccEtGXDz.s:315    .text.CAN_SCE_IRQHandler:0000000000000000 $t
     /tmp/ccEtGXDz.s:321    .text.CAN_SCE_IRQHandler:0000000000000000 CAN_SCE_IRQHandler
     /tmp/ccEtGXDz.s:340    .text.CAN_SCE_IRQHandler:000000000000000c $d
     /tmp/ccEtGXDz.s:345    .text.TIM1_BRK_TIM15_IRQHandler:0000000000000000 $t
     /tmp/ccEtGXDz.s:351    .text.TIM1_BRK_TIM15_IRQHandler:0000000000000000 TIM1_BRK_TIM15_IRQHandler
     /tmp/ccEtGXDz.s:374    .text.TIM1_BRK_TIM15_IRQHandler:0000000000000010 $d
     /tmp/ccEtGXDz.s:380    .text.TIM1_UP_TIM16_IRQHandler:0000000000000000 $t
     /tmp/ccEtGXDz.s:386    .text.TIM1_UP_TIM16_IRQHandler:0000000000000000 TIM1_UP_TIM16_IRQHandler
     /tmp/ccEtGXDz.s:409    .text.TIM1_UP_TIM16_IRQHandler:0000000000000010 $d
     /tmp/ccEtGXDz.s:415    .text.TIM1_TRG_COM_TIM17_IRQHandler:0000000000000000 $t
     /tmp/ccEtGXDz.s:421    .text.TIM1_TRG_COM_TIM17_IRQHandler:0000000000000000 TIM1_TRG_COM_TIM17_IRQHandler
     /tmp/ccEtGXDz.s:444    .text.TIM1_TRG_COM_TIM17_IRQHandler:0000000000000010 $d
     /tmp/ccEtGXDz.s:451    .bss.lastTimer:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_GetTick
HAL_GPIO_TogglePin
HAL_CAN_IRQHandler
hcan
HAL_TIM_IRQHandler
htim1
htim15
htim16
htim17
