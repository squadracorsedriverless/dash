ARM GAS  /tmp/cckziXaL.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"cpu.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/BLT/cpu.c"
  20              		.section	.text.CpuInit,"ax",%progbits
  21              		.align	1
  22              		.global	CpuInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	CpuInit:
  28              	.LFB123:
   1:Core/Src/BLT/cpu.c **** /************************************************************************************//**
   2:Core/Src/BLT/cpu.c **** * \file         Source/ARMCM4_STM32F3/cpu.c
   3:Core/Src/BLT/cpu.c **** * \brief        Bootloader cpu module source file.
   4:Core/Src/BLT/cpu.c **** * \ingroup      Target_ARMCM4_STM32F3
   5:Core/Src/BLT/cpu.c **** * \internal
   6:Core/Src/BLT/cpu.c **** *----------------------------------------------------------------------------------------
   7:Core/Src/BLT/cpu.c **** *                          C O P Y R I G H T
   8:Core/Src/BLT/cpu.c **** *----------------------------------------------------------------------------------------
   9:Core/Src/BLT/cpu.c **** *   Copyright (c) 2016  by Feaser    http://www.feaser.com    All rights reserved
  10:Core/Src/BLT/cpu.c **** *
  11:Core/Src/BLT/cpu.c **** *----------------------------------------------------------------------------------------
  12:Core/Src/BLT/cpu.c **** *                            L I C E N S E
  13:Core/Src/BLT/cpu.c **** *----------------------------------------------------------------------------------------
  14:Core/Src/BLT/cpu.c **** * This file is part of OpenBLT. OpenBLT is free software: you can redistribute it and/or
  15:Core/Src/BLT/cpu.c **** * modify it under the terms of the GNU General Public License as published by the Free
  16:Core/Src/BLT/cpu.c **** * Software Foundation, either version 3 of the License, or (at your option) any later
  17:Core/Src/BLT/cpu.c **** * version.
  18:Core/Src/BLT/cpu.c **** *
  19:Core/Src/BLT/cpu.c **** * OpenBLT is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  20:Core/Src/BLT/cpu.c **** * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  21:Core/Src/BLT/cpu.c **** * PURPOSE. See the GNU General Public License for more details.
  22:Core/Src/BLT/cpu.c **** *
  23:Core/Src/BLT/cpu.c **** * You have received a copy of the GNU General Public License along with OpenBLT. It
  24:Core/Src/BLT/cpu.c **** * should be located in ".\Doc\license.html". If not, contact Feaser to obtain a copy.
  25:Core/Src/BLT/cpu.c **** *
  26:Core/Src/BLT/cpu.c **** * \endinternal
  27:Core/Src/BLT/cpu.c **** ****************************************************************************************/
  28:Core/Src/BLT/cpu.c **** 
  29:Core/Src/BLT/cpu.c **** /****************************************************************************************
  30:Core/Src/BLT/cpu.c **** * Include files
ARM GAS  /tmp/cckziXaL.s 			page 2


  31:Core/Src/BLT/cpu.c **** ****************************************************************************************/
  32:Core/Src/BLT/cpu.c **** #include "BLT/boot.h"                                /* bootloader generic header          */
  33:Core/Src/BLT/cpu.c **** #include "stm32f3xx.h"                           /* STM32 CPU and HAL header           */
  34:Core/Src/BLT/cpu.c **** 
  35:Core/Src/BLT/cpu.c **** 
  36:Core/Src/BLT/cpu.c **** /****************************************************************************************
  37:Core/Src/BLT/cpu.c **** * Macro definitions
  38:Core/Src/BLT/cpu.c **** ****************************************************************************************/
  39:Core/Src/BLT/cpu.c **** /** \brief Pointer to the user program's reset vector. */
  40:Core/Src/BLT/cpu.c **** #define CPU_USER_PROGRAM_STARTADDR_PTR    ((blt_addr)(NvmGetUserProgBaseAddress() + 0x00000004))
  41:Core/Src/BLT/cpu.c **** /** \brief Pointer to the user program's vector table. */
  42:Core/Src/BLT/cpu.c **** #define CPU_USER_PROGRAM_VECTABLE_OFFSET  ((blt_int32u)NvmGetUserProgBaseAddress())
  43:Core/Src/BLT/cpu.c **** 
  44:Core/Src/BLT/cpu.c **** 
  45:Core/Src/BLT/cpu.c **** /****************************************************************************************
  46:Core/Src/BLT/cpu.c **** * Hook functions
  47:Core/Src/BLT/cpu.c **** ****************************************************************************************/
  48:Core/Src/BLT/cpu.c **** #if (BOOT_CPU_USER_PROGRAM_START_HOOK > 0)
  49:Core/Src/BLT/cpu.c **** extern blt_bool CpuUserProgramStartHook(void);
  50:Core/Src/BLT/cpu.c **** #endif
  51:Core/Src/BLT/cpu.c **** 
  52:Core/Src/BLT/cpu.c **** 
  53:Core/Src/BLT/cpu.c **** /************************************************************************************//**
  54:Core/Src/BLT/cpu.c **** ** \brief     Initializes the CPU module.
  55:Core/Src/BLT/cpu.c **** ** \return    none.
  56:Core/Src/BLT/cpu.c **** **
  57:Core/Src/BLT/cpu.c **** ****************************************************************************************/
  58:Core/Src/BLT/cpu.c **** void CpuInit(void)
  59:Core/Src/BLT/cpu.c **** {
  29              		.loc 1 59 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  60:Core/Src/BLT/cpu.c ****   /* bootloader runs in polling mode so disable the global interrupts. this is done for
  61:Core/Src/BLT/cpu.c ****    * safety reasons. if the bootloader was started from a running user program, it could 
  62:Core/Src/BLT/cpu.c ****    * be that the user program did not properly disable the interrupt generation of 
  63:Core/Src/BLT/cpu.c ****    * peripherals.
  64:Core/Src/BLT/cpu.c ****    */
  65:Core/Src/BLT/cpu.c ****   CpuIrqDisable();
  37              		.loc 1 65 3 view .LVU1
  38 0002 FFF7FEFF 		bl	CpuIrqDisable
  39              	.LVL0:
  66:Core/Src/BLT/cpu.c **** } /*** end of CpuInit ***/
  40              		.loc 1 66 1 is_stmt 0 view .LVU2
  41 0006 08BD     		pop	{r3, pc}
  42              		.cfi_endproc
  43              	.LFE123:
  45              		.section	.text.CpuStartUserProgram,"ax",%progbits
  46              		.align	1
  47              		.global	CpuStartUserProgram
  48              		.syntax unified
  49              		.thumb
  50              		.thumb_func
ARM GAS  /tmp/cckziXaL.s 			page 3


  52              	CpuStartUserProgram:
  53              	.LFB124:
  67:Core/Src/BLT/cpu.c **** 
  68:Core/Src/BLT/cpu.c **** 
  69:Core/Src/BLT/cpu.c **** /************************************************************************************//**
  70:Core/Src/BLT/cpu.c **** ** \brief     Starts the user program, if one is present. In this case this function
  71:Core/Src/BLT/cpu.c **** **            does not return.
  72:Core/Src/BLT/cpu.c **** ** \return    none.
  73:Core/Src/BLT/cpu.c **** **
  74:Core/Src/BLT/cpu.c **** ****************************************************************************************/
  75:Core/Src/BLT/cpu.c **** void CpuStartUserProgram(void)
  76:Core/Src/BLT/cpu.c **** {
  54              		.loc 1 76 1 is_stmt 1 view -0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58 0000 10B5     		push	{r4, lr}
  59              		.cfi_def_cfa_offset 8
  60              		.cfi_offset 4, -8
  61              		.cfi_offset 14, -4
  77:Core/Src/BLT/cpu.c ****   void (*pProgResetHandler)(void);
  62              		.loc 1 77 3 view .LVU4
  78:Core/Src/BLT/cpu.c **** 
  79:Core/Src/BLT/cpu.c ****   /* check if a user program is present by verifying the checksum */
  80:Core/Src/BLT/cpu.c ****   if (NvmVerifyChecksum() == BLT_FALSE)
  63              		.loc 1 80 3 view .LVU5
  64              		.loc 1 80 7 is_stmt 0 view .LVU6
  65 0002 FFF7FEFF 		bl	NvmVerifyChecksum
  66              	.LVL1:
  67              		.loc 1 80 6 view .LVU7
  68 0006 00B9     		cbnz	r0, .L6
  69              	.L3:
  81:Core/Src/BLT/cpu.c ****   {
  82:Core/Src/BLT/cpu.c **** #if (BOOT_COM_DEFERRED_INIT_ENABLE > 0) && (BOOT_COM_ENABLE > 0)
  83:Core/Src/BLT/cpu.c ****     /* bootloader will stay active so perform deferred initialization to make sure
  84:Core/Src/BLT/cpu.c ****      * the communication interface that were not yet initialized are now initialized.
  85:Core/Src/BLT/cpu.c ****      * this is needed to make sure firmware updates via these communication interfaces
  86:Core/Src/BLT/cpu.c ****      * will be possible.
  87:Core/Src/BLT/cpu.c ****      */
  88:Core/Src/BLT/cpu.c ****     ComDeferredInit();
  89:Core/Src/BLT/cpu.c **** #endif
  90:Core/Src/BLT/cpu.c ****     /* not a valid user program so it cannot be started */
  91:Core/Src/BLT/cpu.c ****     return;
  92:Core/Src/BLT/cpu.c ****   }
  93:Core/Src/BLT/cpu.c **** #if (BOOT_CPU_USER_PROGRAM_START_HOOK > 0)
  94:Core/Src/BLT/cpu.c ****   /* invoke callback */
  95:Core/Src/BLT/cpu.c ****   if (CpuUserProgramStartHook() == BLT_FALSE)
  96:Core/Src/BLT/cpu.c ****   {
  97:Core/Src/BLT/cpu.c ****   #if (BOOT_COM_DEFERRED_INIT_ENABLE > 0) && (BOOT_COM_ENABLE > 0)
  98:Core/Src/BLT/cpu.c ****     /* bootloader will stay active so perform deferred initialization to make sure
  99:Core/Src/BLT/cpu.c ****      * the communication interface that were not yet initialized are now initialized.
 100:Core/Src/BLT/cpu.c ****      * this is needed to make sure firmware updates via these communication interfaces
 101:Core/Src/BLT/cpu.c ****      * will be possible.
 102:Core/Src/BLT/cpu.c ****      */
 103:Core/Src/BLT/cpu.c ****     ComDeferredInit();
 104:Core/Src/BLT/cpu.c ****   #endif
 105:Core/Src/BLT/cpu.c ****     /* callback requests the user program to not be started */
ARM GAS  /tmp/cckziXaL.s 			page 4


 106:Core/Src/BLT/cpu.c ****     return;
 107:Core/Src/BLT/cpu.c ****   }
 108:Core/Src/BLT/cpu.c **** #endif
 109:Core/Src/BLT/cpu.c **** #if (BOOT_COM_ENABLE > 0)
 110:Core/Src/BLT/cpu.c ****   /* release the communication interface */
 111:Core/Src/BLT/cpu.c ****   ComFree();
 112:Core/Src/BLT/cpu.c **** #endif
 113:Core/Src/BLT/cpu.c ****   /* reset the HAL */
 114:Core/Src/BLT/cpu.c ****   HAL_DeInit();
 115:Core/Src/BLT/cpu.c ****   /* reset the timer */
 116:Core/Src/BLT/cpu.c ****   TimerReset();
 117:Core/Src/BLT/cpu.c ****   /* remap user program's vector table */
 118:Core/Src/BLT/cpu.c ****   SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 119:Core/Src/BLT/cpu.c ****   /* set the address where the bootloader needs to jump to. this is the address of
 120:Core/Src/BLT/cpu.c ****    * the 2nd entry in the user program's vector table. this address points to the
 121:Core/Src/BLT/cpu.c ****    * user program's reset handler.
 122:Core/Src/BLT/cpu.c ****    */
 123:Core/Src/BLT/cpu.c ****   pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 124:Core/Src/BLT/cpu.c ****   /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
 125:Core/Src/BLT/cpu.c ****    * explicitly disables these for security reasons. Enable them here again, so it does 
 126:Core/Src/BLT/cpu.c ****    * not have to be done by the user program.
 127:Core/Src/BLT/cpu.c ****    */
 128:Core/Src/BLT/cpu.c ****   CpuIrqEnable();
 129:Core/Src/BLT/cpu.c ****   /* start the user program by activating its reset interrupt service routine */
 130:Core/Src/BLT/cpu.c ****   pProgResetHandler();
 131:Core/Src/BLT/cpu.c **** #if (BOOT_COM_DEFERRED_INIT_ENABLE > 0) && (BOOT_COM_ENABLE > 0)
 132:Core/Src/BLT/cpu.c ****   /* theoretically, the code never gets here because the user program should now be
 133:Core/Src/BLT/cpu.c ****    * running and the previous function call should not return. In case it did return
 134:Core/Src/BLT/cpu.c ****    * for whatever reason, make sure all communication interfaces are initialized so that
 135:Core/Src/BLT/cpu.c ****    * firmware updates can be started.
 136:Core/Src/BLT/cpu.c ****    */
 137:Core/Src/BLT/cpu.c ****   ComDeferredInit();
 138:Core/Src/BLT/cpu.c **** #endif
 139:Core/Src/BLT/cpu.c **** } /*** end of CpuStartUserProgram ***/
  70              		.loc 1 139 1 view .LVU8
  71 0008 10BD     		pop	{r4, pc}
  72              	.L6:
 111:Core/Src/BLT/cpu.c **** #endif
  73              		.loc 1 111 3 is_stmt 1 view .LVU9
  74 000a FFF7FEFF 		bl	ComFree
  75              	.LVL2:
 114:Core/Src/BLT/cpu.c ****   /* reset the timer */
  76              		.loc 1 114 3 view .LVU10
  77 000e FFF7FEFF 		bl	HAL_DeInit
  78              	.LVL3:
 116:Core/Src/BLT/cpu.c ****   /* remap user program's vector table */
  79              		.loc 1 116 3 view .LVU11
  80 0012 FFF7FEFF 		bl	TimerReset
  81              	.LVL4:
 118:Core/Src/BLT/cpu.c ****   /* set the address where the bootloader needs to jump to. this is the address of
  82              		.loc 1 118 3 view .LVU12
 118:Core/Src/BLT/cpu.c ****   /* set the address where the bootloader needs to jump to. this is the address of
  83              		.loc 1 118 15 is_stmt 0 view .LVU13
  84 0016 FFF7FEFF 		bl	NvmGetUserProgBaseAddress
  85              	.LVL5:
 118:Core/Src/BLT/cpu.c ****   /* set the address where the bootloader needs to jump to. this is the address of
  86              		.loc 1 118 48 view .LVU14
ARM GAS  /tmp/cckziXaL.s 			page 5


  87 001a 20F06040 		bic	r0, r0, #-536870912
  88 001e 20F07F00 		bic	r0, r0, #127
 118:Core/Src/BLT/cpu.c ****   /* set the address where the bootloader needs to jump to. this is the address of
  89              		.loc 1 118 13 view .LVU15
  90 0022 044B     		ldr	r3, .L7
  91 0024 9860     		str	r0, [r3, #8]
 123:Core/Src/BLT/cpu.c ****   /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
  92              		.loc 1 123 3 is_stmt 1 view .LVU16
 123:Core/Src/BLT/cpu.c ****   /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
  93              		.loc 1 123 53 is_stmt 0 view .LVU17
  94 0026 FFF7FEFF 		bl	NvmGetUserProgBaseAddress
  95              	.LVL6:
 123:Core/Src/BLT/cpu.c ****   /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
  96              		.loc 1 123 39 view .LVU18
  97 002a 4468     		ldr	r4, [r0, #4]
  98              	.LVL7:
 128:Core/Src/BLT/cpu.c ****   /* start the user program by activating its reset interrupt service routine */
  99              		.loc 1 128 3 is_stmt 1 view .LVU19
 100 002c FFF7FEFF 		bl	CpuIrqEnable
 101              	.LVL8:
 130:Core/Src/BLT/cpu.c **** #if (BOOT_COM_DEFERRED_INIT_ENABLE > 0) && (BOOT_COM_ENABLE > 0)
 102              		.loc 1 130 3 view .LVU20
 103 0030 A047     		blx	r4
 104              	.LVL9:
 105 0032 E9E7     		b	.L3
 106              	.L8:
 107              		.align	2
 108              	.L7:
 109 0034 00ED00E0 		.word	-536810240
 110              		.cfi_endproc
 111              	.LFE124:
 113              		.section	.text.CpuMemCopy,"ax",%progbits
 114              		.align	1
 115              		.global	CpuMemCopy
 116              		.syntax unified
 117              		.thumb
 118              		.thumb_func
 120              	CpuMemCopy:
 121              	.LVL10:
 122              	.LFB125:
 140:Core/Src/BLT/cpu.c **** 
 141:Core/Src/BLT/cpu.c **** 
 142:Core/Src/BLT/cpu.c **** /************************************************************************************//**
 143:Core/Src/BLT/cpu.c **** ** \brief     Copies data from the source to the destination address.
 144:Core/Src/BLT/cpu.c **** ** \param     dest Destination address for the data.
 145:Core/Src/BLT/cpu.c **** ** \param     src  Source address of the data.
 146:Core/Src/BLT/cpu.c **** ** \param     len  length of the data in bytes.
 147:Core/Src/BLT/cpu.c **** ** \return    none.
 148:Core/Src/BLT/cpu.c **** **
 149:Core/Src/BLT/cpu.c **** ****************************************************************************************/
 150:Core/Src/BLT/cpu.c **** void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
 151:Core/Src/BLT/cpu.c **** {
 123              		.loc 1 151 1 view -0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 127              		.loc 1 151 1 is_stmt 0 view .LVU22
ARM GAS  /tmp/cckziXaL.s 			page 6


 128 0000 70B5     		push	{r4, r5, r6, lr}
 129              		.cfi_def_cfa_offset 16
 130              		.cfi_offset 4, -16
 131              		.cfi_offset 5, -12
 132              		.cfi_offset 6, -8
 133              		.cfi_offset 14, -4
 152:Core/Src/BLT/cpu.c ****   blt_int8u *from, *to;
 134              		.loc 1 152 3 is_stmt 1 view .LVU23
 153:Core/Src/BLT/cpu.c **** 
 154:Core/Src/BLT/cpu.c ****   /* set casted pointers */
 155:Core/Src/BLT/cpu.c ****   from = (blt_int8u *)src;
 135              		.loc 1 155 3 view .LVU24
 136              		.loc 1 155 8 is_stmt 0 view .LVU25
 137 0002 0D46     		mov	r5, r1
 138              	.LVL11:
 156:Core/Src/BLT/cpu.c ****   to = (blt_int8u *)dest;
 139              		.loc 1 156 3 is_stmt 1 view .LVU26
 140              		.loc 1 156 6 is_stmt 0 view .LVU27
 141 0004 0446     		mov	r4, r0
 142              	.LVL12:
 157:Core/Src/BLT/cpu.c **** 
 158:Core/Src/BLT/cpu.c ****   /* copy all bytes from source address to destination address */
 159:Core/Src/BLT/cpu.c ****   while (len-- > 0)
 143              		.loc 1 159 3 is_stmt 1 view .LVU28
 144              		.loc 1 159 9 is_stmt 0 view .LVU29
 145 0006 06E0     		b	.L10
 146              	.LVL13:
 147              	.L11:
 160:Core/Src/BLT/cpu.c ****   {
 161:Core/Src/BLT/cpu.c ****     /* store byte value from source to destination */
 162:Core/Src/BLT/cpu.c ****     *to++ = *from++;
 148              		.loc 1 162 5 is_stmt 1 view .LVU30
 149              		.loc 1 162 13 is_stmt 0 view .LVU31
 150 0008 15F8013B 		ldrb	r3, [r5], #1	@ zero_extendqisi2
 151              	.LVL14:
 152              		.loc 1 162 11 view .LVU32
 153 000c 04F8013B 		strb	r3, [r4], #1
 154              	.LVL15:
 163:Core/Src/BLT/cpu.c ****     /* keep the watchdog happy */
 164:Core/Src/BLT/cpu.c ****     CopService();
 155              		.loc 1 164 5 is_stmt 1 view .LVU33
 156 0010 FFF7FEFF 		bl	CopService
 157              	.LVL16:
 159:Core/Src/BLT/cpu.c ****   {
 158              		.loc 1 159 13 is_stmt 0 view .LVU34
 159 0014 3246     		mov	r2, r6
 160              	.LVL17:
 161              	.L10:
 159:Core/Src/BLT/cpu.c ****   {
 162              		.loc 1 159 16 is_stmt 1 view .LVU35
 159:Core/Src/BLT/cpu.c ****   {
 163              		.loc 1 159 13 is_stmt 0 view .LVU36
 164 0016 531E     		subs	r3, r2, #1
 165 0018 9EB2     		uxth	r6, r3
 166              	.LVL18:
 159:Core/Src/BLT/cpu.c ****   {
 167              		.loc 1 159 16 view .LVU37
ARM GAS  /tmp/cckziXaL.s 			page 7


 168 001a 002A     		cmp	r2, #0
 169 001c F4D1     		bne	.L11
 165:Core/Src/BLT/cpu.c ****   }
 166:Core/Src/BLT/cpu.c **** } /*** end of CpuMemCopy ***/
 170              		.loc 1 166 1 view .LVU38
 171 001e 70BD     		pop	{r4, r5, r6, pc}
 172              		.loc 1 166 1 view .LVU39
 173              		.cfi_endproc
 174              	.LFE125:
 176              		.section	.text.CpuMemSet,"ax",%progbits
 177              		.align	1
 178              		.global	CpuMemSet
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 183              	CpuMemSet:
 184              	.LVL19:
 185              	.LFB126:
 167:Core/Src/BLT/cpu.c **** 
 168:Core/Src/BLT/cpu.c **** 
 169:Core/Src/BLT/cpu.c **** /************************************************************************************//**
 170:Core/Src/BLT/cpu.c **** ** \brief     Sets the bytes at the destination address to the specified value.
 171:Core/Src/BLT/cpu.c **** ** \param     dest Destination address for the data.
 172:Core/Src/BLT/cpu.c **** ** \param     value Value to write.
 173:Core/Src/BLT/cpu.c **** ** \param     len  Number of bytes to write.
 174:Core/Src/BLT/cpu.c **** ** \return    none.
 175:Core/Src/BLT/cpu.c **** **
 176:Core/Src/BLT/cpu.c **** ****************************************************************************************/
 177:Core/Src/BLT/cpu.c **** void CpuMemSet(blt_addr dest, blt_int8u value, blt_int16u len)
 178:Core/Src/BLT/cpu.c **** {
 186              		.loc 1 178 1 is_stmt 1 view -0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		.loc 1 178 1 is_stmt 0 view .LVU41
 191 0000 70B5     		push	{r4, r5, r6, lr}
 192              		.cfi_def_cfa_offset 16
 193              		.cfi_offset 4, -16
 194              		.cfi_offset 5, -12
 195              		.cfi_offset 6, -8
 196              		.cfi_offset 14, -4
 197 0002 0E46     		mov	r6, r1
 179:Core/Src/BLT/cpu.c ****   blt_int8u *to;
 198              		.loc 1 179 3 is_stmt 1 view .LVU42
 180:Core/Src/BLT/cpu.c **** 
 181:Core/Src/BLT/cpu.c ****   /* set casted pointer */
 182:Core/Src/BLT/cpu.c ****   to = (blt_int8u *)dest;
 199              		.loc 1 182 3 view .LVU43
 200              		.loc 1 182 6 is_stmt 0 view .LVU44
 201 0004 0446     		mov	r4, r0
 202              	.LVL20:
 183:Core/Src/BLT/cpu.c **** 
 184:Core/Src/BLT/cpu.c ****   /* set all bytes at the destination address to the specified value */
 185:Core/Src/BLT/cpu.c ****   while (len-- > 0)
 203              		.loc 1 185 3 is_stmt 1 view .LVU45
 204              		.loc 1 185 9 is_stmt 0 view .LVU46
 205 0006 04E0     		b	.L14
ARM GAS  /tmp/cckziXaL.s 			page 8


 206              	.LVL21:
 207              	.L15:
 186:Core/Src/BLT/cpu.c ****   {
 187:Core/Src/BLT/cpu.c ****     /* set byte value */
 188:Core/Src/BLT/cpu.c ****     *to++ = value;
 208              		.loc 1 188 5 is_stmt 1 view .LVU47
 209              		.loc 1 188 11 is_stmt 0 view .LVU48
 210 0008 04F8016B 		strb	r6, [r4], #1
 211              	.LVL22:
 189:Core/Src/BLT/cpu.c ****     /* keep the watchdog happy */
 190:Core/Src/BLT/cpu.c ****     CopService();
 212              		.loc 1 190 5 is_stmt 1 view .LVU49
 213 000c FFF7FEFF 		bl	CopService
 214              	.LVL23:
 185:Core/Src/BLT/cpu.c ****   {
 215              		.loc 1 185 13 is_stmt 0 view .LVU50
 216 0010 2A46     		mov	r2, r5
 217              	.LVL24:
 218              	.L14:
 185:Core/Src/BLT/cpu.c ****   {
 219              		.loc 1 185 16 is_stmt 1 view .LVU51
 185:Core/Src/BLT/cpu.c ****   {
 220              		.loc 1 185 13 is_stmt 0 view .LVU52
 221 0012 531E     		subs	r3, r2, #1
 222 0014 9DB2     		uxth	r5, r3
 223              	.LVL25:
 185:Core/Src/BLT/cpu.c ****   {
 224              		.loc 1 185 16 view .LVU53
 225 0016 002A     		cmp	r2, #0
 226 0018 F6D1     		bne	.L15
 191:Core/Src/BLT/cpu.c ****   }
 192:Core/Src/BLT/cpu.c **** } /*** end of CpuMemSet ***/
 227              		.loc 1 192 1 view .LVU54
 228 001a 70BD     		pop	{r4, r5, r6, pc}
 229              		.loc 1 192 1 view .LVU55
 230              		.cfi_endproc
 231              	.LFE126:
 233              		.text
 234              	.Letext0:
 235              		.file 2 "Core/Inc/BLT/types.h"
 236              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 237              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 238              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 239              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 240              		.file 7 "Core/Inc/BLT/cop.h"
 241              		.file 8 "Core/Inc/BLT/cpu.h"
 242              		.file 9 "Core/Inc/BLT/timer.h"
 243              		.file 10 "Core/Inc/BLT/nvm.h"
 244              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 245              		.file 12 "Core/Inc/BLT/com.h"
ARM GAS  /tmp/cckziXaL.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 cpu.c
     /tmp/cckziXaL.s:21     .text.CpuInit:0000000000000000 $t
     /tmp/cckziXaL.s:27     .text.CpuInit:0000000000000000 CpuInit
     /tmp/cckziXaL.s:46     .text.CpuStartUserProgram:0000000000000000 $t
     /tmp/cckziXaL.s:52     .text.CpuStartUserProgram:0000000000000000 CpuStartUserProgram
     /tmp/cckziXaL.s:109    .text.CpuStartUserProgram:0000000000000034 $d
     /tmp/cckziXaL.s:114    .text.CpuMemCopy:0000000000000000 $t
     /tmp/cckziXaL.s:120    .text.CpuMemCopy:0000000000000000 CpuMemCopy
     /tmp/cckziXaL.s:177    .text.CpuMemSet:0000000000000000 $t
     /tmp/cckziXaL.s:183    .text.CpuMemSet:0000000000000000 CpuMemSet

UNDEFINED SYMBOLS
CpuIrqDisable
NvmVerifyChecksum
ComFree
HAL_DeInit
TimerReset
NvmGetUserProgBaseAddress
CpuIrqEnable
CopService
