ARM GAS  /tmp/ccGFhfHI.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"backdoor.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/BLT/backdoor.c"
  20              		.section	.text.BackDoorCheck,"ax",%progbits
  21              		.align	1
  22              		.global	BackDoorCheck
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	BackDoorCheck:
  28              	.LFB1:
   1:Core/Src/BLT/backdoor.c **** /************************************************************************************//**
   2:Core/Src/BLT/backdoor.c **** * \file         Source/backdoor.c
   3:Core/Src/BLT/backdoor.c **** * \brief        Bootloader backdoor entry source file.
   4:Core/Src/BLT/backdoor.c **** * \ingroup      Core
   5:Core/Src/BLT/backdoor.c **** * \internal
   6:Core/Src/BLT/backdoor.c **** *----------------------------------------------------------------------------------------
   7:Core/Src/BLT/backdoor.c **** *                          C O P Y R I G H T
   8:Core/Src/BLT/backdoor.c **** *----------------------------------------------------------------------------------------
   9:Core/Src/BLT/backdoor.c **** *   Copyright (c) 2011  by Feaser    http://www.feaser.com    All rights reserved
  10:Core/Src/BLT/backdoor.c **** *
  11:Core/Src/BLT/backdoor.c **** *----------------------------------------------------------------------------------------
  12:Core/Src/BLT/backdoor.c **** *                            L I C E N S E
  13:Core/Src/BLT/backdoor.c **** *----------------------------------------------------------------------------------------
  14:Core/Src/BLT/backdoor.c **** * This file is part of OpenBLT. OpenBLT is free software: you can redistribute it and/or
  15:Core/Src/BLT/backdoor.c **** * modify it under the terms of the GNU General Public License as published by the Free
  16:Core/Src/BLT/backdoor.c **** * Software Foundation, either version 3 of the License, or (at your option) any later
  17:Core/Src/BLT/backdoor.c **** * version.
  18:Core/Src/BLT/backdoor.c **** *
  19:Core/Src/BLT/backdoor.c **** * OpenBLT is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  20:Core/Src/BLT/backdoor.c **** * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  21:Core/Src/BLT/backdoor.c **** * PURPOSE. See the GNU General Public License for more details.
  22:Core/Src/BLT/backdoor.c **** *
  23:Core/Src/BLT/backdoor.c **** * You have received a copy of the GNU General Public License along with OpenBLT. It
  24:Core/Src/BLT/backdoor.c **** * should be located in ".\Doc\license.html". If not, contact Feaser to obtain a copy.
  25:Core/Src/BLT/backdoor.c **** *
  26:Core/Src/BLT/backdoor.c **** * \endinternal
  27:Core/Src/BLT/backdoor.c **** ****************************************************************************************/
  28:Core/Src/BLT/backdoor.c **** 
  29:Core/Src/BLT/backdoor.c **** /****************************************************************************************
  30:Core/Src/BLT/backdoor.c **** * Include files
ARM GAS  /tmp/ccGFhfHI.s 			page 2


  31:Core/Src/BLT/backdoor.c **** ****************************************************************************************/
  32:Core/Src/BLT/backdoor.c **** #include "BLT/boot.h"                                /* bootloader generic header          */
  33:Core/Src/BLT/backdoor.c **** 
  34:Core/Src/BLT/backdoor.c **** /****************************************************************************************
  35:Core/Src/BLT/backdoor.c **** * Hook functions
  36:Core/Src/BLT/backdoor.c **** ****************************************************************************************/
  37:Core/Src/BLT/backdoor.c **** #if (BOOT_BACKDOOR_HOOKS_ENABLE > 0)
  38:Core/Src/BLT/backdoor.c **** extern void BackDoorInitHook(void);
  39:Core/Src/BLT/backdoor.c **** extern blt_bool BackDoorEntryHook(void);
  40:Core/Src/BLT/backdoor.c **** #endif
  41:Core/Src/BLT/backdoor.c **** 
  42:Core/Src/BLT/backdoor.c **** 
  43:Core/Src/BLT/backdoor.c **** /****************************************************************************************
  44:Core/Src/BLT/backdoor.c **** * Local data declarations
  45:Core/Src/BLT/backdoor.c **** ****************************************************************************************/
  46:Core/Src/BLT/backdoor.c **** #if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
  47:Core/Src/BLT/backdoor.c **** /** \brief To determine if the backdoor is open or closed. */
  48:Core/Src/BLT/backdoor.c **** static blt_bool backdoorOpen;
  49:Core/Src/BLT/backdoor.c **** /** \brief To determine how long the backdoor has been open in milliseconds. */
  50:Core/Src/BLT/backdoor.c **** static blt_int32u backdoorOpenTime;
  51:Core/Src/BLT/backdoor.c **** /** \brief In certain scenarios it is desired to be able to extend the default backdoor
  52:Core/Src/BLT/backdoor.c ****  *         entry time at runtime. This variable holds the extension time in milliseconds.
  53:Core/Src/BLT/backdoor.c ****  *         Note that this value must be initialized to zero here and not in function
  54:Core/Src/BLT/backdoor.c ****  *         BackDoorInit(), because BackDoorInit() is one of the last functions called
  55:Core/Src/BLT/backdoor.c ****  *         in BootInit(). This order should not be changed otherwise there is a chance
  56:Core/Src/BLT/backdoor.c ****  *         that the timed backdoor partially or completely times out during BootInit().
  57:Core/Src/BLT/backdoor.c ****  *         Initializing the variable here, allows function BackDoorSetExtension() to be
  58:Core/Src/BLT/backdoor.c ****  *         called before BackDoorInit() was called.
  59:Core/Src/BLT/backdoor.c ****  */
  60:Core/Src/BLT/backdoor.c **** static blt_int32u backdoorExtensionTime = 0;
  61:Core/Src/BLT/backdoor.c **** #endif
  62:Core/Src/BLT/backdoor.c **** 
  63:Core/Src/BLT/backdoor.c **** 
  64:Core/Src/BLT/backdoor.c **** /************************************************************************************//**
  65:Core/Src/BLT/backdoor.c **** ** \brief     Initializes the backdoor entry option.
  66:Core/Src/BLT/backdoor.c **** ** \return    none
  67:Core/Src/BLT/backdoor.c **** **
  68:Core/Src/BLT/backdoor.c **** ****************************************************************************************/
  69:Core/Src/BLT/backdoor.c **** void BackDoorInit(void)
  70:Core/Src/BLT/backdoor.c **** {
  71:Core/Src/BLT/backdoor.c **** #if (BOOT_BACKDOOR_HOOKS_ENABLE > 0)
  72:Core/Src/BLT/backdoor.c ****   /* initialize application's backdoor functionality */
  73:Core/Src/BLT/backdoor.c ****   BackDoorInitHook();
  74:Core/Src/BLT/backdoor.c **** 
  75:Core/Src/BLT/backdoor.c ****   /* attempt to start the user program when no backdoor entry is requested */
  76:Core/Src/BLT/backdoor.c ****   if (BackDoorEntryHook() == BLT_FALSE)
  77:Core/Src/BLT/backdoor.c ****   {
  78:Core/Src/BLT/backdoor.c ****     /* this function does not return if a valid user program is present */
  79:Core/Src/BLT/backdoor.c ****     CpuStartUserProgram();
  80:Core/Src/BLT/backdoor.c ****   }
  81:Core/Src/BLT/backdoor.c **** #if (BOOT_FILE_SYS_ENABLE > 0)
  82:Core/Src/BLT/backdoor.c ****   else
  83:Core/Src/BLT/backdoor.c ****   {
  84:Core/Src/BLT/backdoor.c ****     /* the backdoor is open so we should check if a update from locally  attached storage
  85:Core/Src/BLT/backdoor.c ****      * is requested and, if so, start it.
  86:Core/Src/BLT/backdoor.c ****      */
  87:Core/Src/BLT/backdoor.c ****     FileHandleFirmwareUpdateRequest();
ARM GAS  /tmp/ccGFhfHI.s 			page 3


  88:Core/Src/BLT/backdoor.c ****   }
  89:Core/Src/BLT/backdoor.c **** #endif
  90:Core/Src/BLT/backdoor.c **** #else
  91:Core/Src/BLT/backdoor.c ****   /* open the backdoor after a reset */
  92:Core/Src/BLT/backdoor.c ****   backdoorOpen = BLT_TRUE;
  93:Core/Src/BLT/backdoor.c ****   BackDoorRestartTimer();
  94:Core/Src/BLT/backdoor.c **** #endif
  95:Core/Src/BLT/backdoor.c ****   /* perform the first check that open/closes the backdoor */
  96:Core/Src/BLT/backdoor.c ****   BackDoorCheck();
  97:Core/Src/BLT/backdoor.c **** } /*** end of BackDoorInit ***/
  98:Core/Src/BLT/backdoor.c **** 
  99:Core/Src/BLT/backdoor.c **** 
 100:Core/Src/BLT/backdoor.c **** /************************************************************************************//**
 101:Core/Src/BLT/backdoor.c **** ** \brief     The default backdoor entry feature keeps the bootloader active for a
 102:Core/Src/BLT/backdoor.c **** **            predetermined time after reset, allowing the host application to
 103:Core/Src/BLT/backdoor.c **** **            establish a connection and start a programming sequence. This function
 104:Core/Src/BLT/backdoor.c **** **            controls the opening/closing of the backdoor.
 105:Core/Src/BLT/backdoor.c **** ** \return    none
 106:Core/Src/BLT/backdoor.c **** **
 107:Core/Src/BLT/backdoor.c **** ****************************************************************************************/
 108:Core/Src/BLT/backdoor.c **** void BackDoorCheck(void)
 109:Core/Src/BLT/backdoor.c **** {
  29              		.loc 1 109 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 110:Core/Src/BLT/backdoor.c **** #if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
 111:Core/Src/BLT/backdoor.c **** #if (BOOT_COM_ENABLE > 0)
 112:Core/Src/BLT/backdoor.c ****   /* check if a connection with the host was already established. in this case the
 113:Core/Src/BLT/backdoor.c ****    * backdoor stays open anyway, so no need to check if it needs to be closed.
 114:Core/Src/BLT/backdoor.c ****    */
 115:Core/Src/BLT/backdoor.c ****   if (ComIsConnected() == BLT_TRUE)
  37              		.loc 1 115 3 view .LVU1
  38              		.loc 1 115 7 is_stmt 0 view .LVU2
  39 0002 FFF7FEFF 		bl	ComIsConnected
  40              	.LVL0:
  41              		.loc 1 115 6 view .LVU3
  42 0006 0128     		cmp	r0, #1
  43 0008 03D0     		beq	.L1
 116:Core/Src/BLT/backdoor.c ****   {
 117:Core/Src/BLT/backdoor.c ****     return;
 118:Core/Src/BLT/backdoor.c ****   }
 119:Core/Src/BLT/backdoor.c **** #endif
 120:Core/Src/BLT/backdoor.c **** #if (BOOT_FILE_SYS_ENABLE > 0)
 121:Core/Src/BLT/backdoor.c ****   /* check if the file module is busy, indicating that a firmware update through the
 122:Core/Src/BLT/backdoor.c ****    * locally attached storage is in progress. in this case the backdoor stays open
 123:Core/Src/BLT/backdoor.c ****    * anyway, so no need to check if it needs to be closed.
 124:Core/Src/BLT/backdoor.c ****    */
 125:Core/Src/BLT/backdoor.c ****   if (FileIsIdle() == BLT_FALSE)
 126:Core/Src/BLT/backdoor.c ****   {
 127:Core/Src/BLT/backdoor.c ****     return;
 128:Core/Src/BLT/backdoor.c ****   }
 129:Core/Src/BLT/backdoor.c **** #endif
ARM GAS  /tmp/ccGFhfHI.s 			page 4


 130:Core/Src/BLT/backdoor.c **** 
 131:Core/Src/BLT/backdoor.c ****   /* when the backdoor is still open, check if it's time to close it */
 132:Core/Src/BLT/backdoor.c ****   if (backdoorOpen == BLT_TRUE)
  44              		.loc 1 132 3 is_stmt 1 view .LVU4
  45              		.loc 1 132 20 is_stmt 0 view .LVU5
  46 000a 0B4B     		ldr	r3, .L5
  47 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  48              		.loc 1 132 6 view .LVU6
  49 000e 012B     		cmp	r3, #1
  50 0010 00D0     		beq	.L4
  51              	.L1:
 133:Core/Src/BLT/backdoor.c ****   {
 134:Core/Src/BLT/backdoor.c ****     /* check if the backdoor entry time window elapsed */
 135:Core/Src/BLT/backdoor.c ****     if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 136:Core/Src/BLT/backdoor.c ****     {
 137:Core/Src/BLT/backdoor.c ****       /* close the backdoor */
 138:Core/Src/BLT/backdoor.c ****       backdoorOpen = BLT_FALSE;
 139:Core/Src/BLT/backdoor.c **** #if (BOOT_FILE_SYS_ENABLE > 0)
 140:Core/Src/BLT/backdoor.c ****       /* during the timed backdoor no remote update request was detected. now do one
 141:Core/Src/BLT/backdoor.c ****        * last check to see if a firmware update from locally attached storage is
 142:Core/Src/BLT/backdoor.c ****        * pending.
 143:Core/Src/BLT/backdoor.c ****        */
 144:Core/Src/BLT/backdoor.c ****       if (FileHandleFirmwareUpdateRequest() == BLT_FALSE)
 145:Core/Src/BLT/backdoor.c **** #endif
 146:Core/Src/BLT/backdoor.c ****       {
 147:Core/Src/BLT/backdoor.c ****         /* no firmware update requests detected, so attempt to start the user program.
 148:Core/Src/BLT/backdoor.c ****          * this function does not return if a valid user program is present.
 149:Core/Src/BLT/backdoor.c ****          */
 150:Core/Src/BLT/backdoor.c ****         CpuStartUserProgram();
 151:Core/Src/BLT/backdoor.c ****       }
 152:Core/Src/BLT/backdoor.c ****     }
 153:Core/Src/BLT/backdoor.c ****   }
 154:Core/Src/BLT/backdoor.c **** #endif
 155:Core/Src/BLT/backdoor.c **** } /*** end of BackDoorCheck ***/
  52              		.loc 1 155 1 view .LVU7
  53 0012 08BD     		pop	{r3, pc}
  54              	.L4:
 135:Core/Src/BLT/backdoor.c ****     {
  55              		.loc 1 135 5 is_stmt 1 view .LVU8
 135:Core/Src/BLT/backdoor.c ****     {
  56              		.loc 1 135 9 is_stmt 0 view .LVU9
  57 0014 FFF7FEFF 		bl	TimerGet
  58              	.LVL1:
 135:Core/Src/BLT/backdoor.c ****     {
  59              		.loc 1 135 79 view .LVU10
  60 0018 084B     		ldr	r3, .L5+4
  61 001a 1B68     		ldr	r3, [r3]
  62 001c 084A     		ldr	r2, .L5+8
  63 001e 1268     		ldr	r2, [r2]
  64 0020 1344     		add	r3, r3, r2
  65 0022 03F57A73 		add	r3, r3, #1000
 135:Core/Src/BLT/backdoor.c ****     {
  66              		.loc 1 135 8 view .LVU11
  67 0026 9842     		cmp	r0, r3
  68 0028 F3D3     		bcc	.L1
 138:Core/Src/BLT/backdoor.c **** #if (BOOT_FILE_SYS_ENABLE > 0)
  69              		.loc 1 138 7 is_stmt 1 view .LVU12
ARM GAS  /tmp/ccGFhfHI.s 			page 5


 138:Core/Src/BLT/backdoor.c **** #if (BOOT_FILE_SYS_ENABLE > 0)
  70              		.loc 1 138 20 is_stmt 0 view .LVU13
  71 002a 034B     		ldr	r3, .L5
  72 002c 0022     		movs	r2, #0
  73 002e 1A70     		strb	r2, [r3]
 150:Core/Src/BLT/backdoor.c ****       }
  74              		.loc 1 150 9 is_stmt 1 view .LVU14
  75 0030 FFF7FEFF 		bl	CpuStartUserProgram
  76              	.LVL2:
  77 0034 EDE7     		b	.L1
  78              	.L6:
  79 0036 00BF     		.align	2
  80              	.L5:
  81 0038 00000000 		.word	backdoorOpen
  82 003c 00000000 		.word	backdoorExtensionTime
  83 0040 00000000 		.word	backdoorOpenTime
  84              		.cfi_endproc
  85              	.LFE1:
  87              		.section	.text.BackDoorSetExtension,"ax",%progbits
  88              		.align	1
  89              		.global	BackDoorSetExtension
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  94              	BackDoorSetExtension:
  95              	.LVL3:
  96              	.LFB2:
 156:Core/Src/BLT/backdoor.c **** 
 157:Core/Src/BLT/backdoor.c **** 
 158:Core/Src/BLT/backdoor.c **** #if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
 159:Core/Src/BLT/backdoor.c **** /************************************************************************************//**
 160:Core/Src/BLT/backdoor.c **** ** \brief     Sets the amount of milliseconds that the default backdoor timeout time
 161:Core/Src/BLT/backdoor.c **** **            (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS) is extended.
 162:Core/Src/BLT/backdoor.c **** ** \param     extension_ms Extension time in milliseconds.
 163:Core/Src/BLT/backdoor.c **** ** \return    none
 164:Core/Src/BLT/backdoor.c **** **
 165:Core/Src/BLT/backdoor.c **** ****************************************************************************************/
 166:Core/Src/BLT/backdoor.c **** void BackDoorSetExtension(blt_int32u extension_ms)
 167:Core/Src/BLT/backdoor.c **** {
  97              		.loc 1 167 1 view -0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 168:Core/Src/BLT/backdoor.c ****   /* update the extension time */
 169:Core/Src/BLT/backdoor.c ****   backdoorExtensionTime = extension_ms;
 102              		.loc 1 169 3 view .LVU16
 103              		.loc 1 169 25 is_stmt 0 view .LVU17
 104 0000 014B     		ldr	r3, .L8
 105 0002 1860     		str	r0, [r3]
 170:Core/Src/BLT/backdoor.c **** } /*** end of BackDoorSetExtension ***/
 106              		.loc 1 170 1 view .LVU18
 107 0004 7047     		bx	lr
 108              	.L9:
 109 0006 00BF     		.align	2
 110              	.L8:
 111 0008 00000000 		.word	backdoorExtensionTime
ARM GAS  /tmp/ccGFhfHI.s 			page 6


 112              		.cfi_endproc
 113              	.LFE2:
 115              		.section	.text.BackDoorGetExtension,"ax",%progbits
 116              		.align	1
 117              		.global	BackDoorGetExtension
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 122              	BackDoorGetExtension:
 123              	.LFB3:
 171:Core/Src/BLT/backdoor.c **** 
 172:Core/Src/BLT/backdoor.c **** 
 173:Core/Src/BLT/backdoor.c **** /************************************************************************************//**
 174:Core/Src/BLT/backdoor.c **** ** \brief     Gets the amount of milliseconds that the default backdoor timeout time
 175:Core/Src/BLT/backdoor.c **** **            (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS) is extended.
 176:Core/Src/BLT/backdoor.c **** ** \return    Extension time in milliseconds.
 177:Core/Src/BLT/backdoor.c **** **
 178:Core/Src/BLT/backdoor.c **** ****************************************************************************************/
 179:Core/Src/BLT/backdoor.c **** blt_int32u BackDoorGetExtension(void)
 180:Core/Src/BLT/backdoor.c **** {
 124              		.loc 1 180 1 is_stmt 1 view -0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 181:Core/Src/BLT/backdoor.c ****   /* read out and reutrn the currently configured extension time */
 182:Core/Src/BLT/backdoor.c ****   return backdoorExtensionTime;
 129              		.loc 1 182 3 view .LVU20
 183:Core/Src/BLT/backdoor.c **** } /*** end of BackDoorGetExtension ***/
 130              		.loc 1 183 1 is_stmt 0 view .LVU21
 131 0000 014B     		ldr	r3, .L11
 132 0002 1868     		ldr	r0, [r3]
 133 0004 7047     		bx	lr
 134              	.L12:
 135 0006 00BF     		.align	2
 136              	.L11:
 137 0008 00000000 		.word	backdoorExtensionTime
 138              		.cfi_endproc
 139              	.LFE3:
 141              		.section	.text.BackDoorRestartTimer,"ax",%progbits
 142              		.align	1
 143              		.global	BackDoorRestartTimer
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 148              	BackDoorRestartTimer:
 149              	.LFB4:
 184:Core/Src/BLT/backdoor.c **** 
 185:Core/Src/BLT/backdoor.c **** 
 186:Core/Src/BLT/backdoor.c **** /************************************************************************************//**
 187:Core/Src/BLT/backdoor.c **** ** \brief     Restarts the timed backdoor timer. It uses the current system time as the
 188:Core/Src/BLT/backdoor.c **** **            start time. The backdoor stays open for BOOT_BACKDOOR_ENTRY_TIMEOUT_MS
 189:Core/Src/BLT/backdoor.c **** **            after this start time, possibly extended in case BackDoorSetExtension() was
 190:Core/Src/BLT/backdoor.c **** **            called.
 191:Core/Src/BLT/backdoor.c **** ** \return    none
 192:Core/Src/BLT/backdoor.c **** **
 193:Core/Src/BLT/backdoor.c **** ****************************************************************************************/
ARM GAS  /tmp/ccGFhfHI.s 			page 7


 194:Core/Src/BLT/backdoor.c **** void BackDoorRestartTimer(void)
 195:Core/Src/BLT/backdoor.c **** {
 150              		.loc 1 195 1 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154 0000 08B5     		push	{r3, lr}
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 3, -8
 157              		.cfi_offset 14, -4
 196:Core/Src/BLT/backdoor.c ****   /* only restart the time if the backdoor is actually still open */
 197:Core/Src/BLT/backdoor.c ****   if (backdoorOpen == BLT_TRUE)
 158              		.loc 1 197 3 view .LVU23
 159              		.loc 1 197 20 is_stmt 0 view .LVU24
 160 0002 054B     		ldr	r3, .L17
 161 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 162              		.loc 1 197 6 view .LVU25
 163 0006 012B     		cmp	r3, #1
 164 0008 00D0     		beq	.L16
 165              	.L13:
 198:Core/Src/BLT/backdoor.c ****   {
 199:Core/Src/BLT/backdoor.c ****     backdoorOpenTime = TimerGet();
 200:Core/Src/BLT/backdoor.c ****   }
 201:Core/Src/BLT/backdoor.c **** } /*** end of BackDoorRestartTimer ***/
 166              		.loc 1 201 1 view .LVU26
 167 000a 08BD     		pop	{r3, pc}
 168              	.L16:
 199:Core/Src/BLT/backdoor.c ****   }
 169              		.loc 1 199 5 is_stmt 1 view .LVU27
 199:Core/Src/BLT/backdoor.c ****   }
 170              		.loc 1 199 24 is_stmt 0 view .LVU28
 171 000c FFF7FEFF 		bl	TimerGet
 172              	.LVL4:
 199:Core/Src/BLT/backdoor.c ****   }
 173              		.loc 1 199 22 view .LVU29
 174 0010 024B     		ldr	r3, .L17+4
 175 0012 1860     		str	r0, [r3]
 176              		.loc 1 201 1 view .LVU30
 177 0014 F9E7     		b	.L13
 178              	.L18:
 179 0016 00BF     		.align	2
 180              	.L17:
 181 0018 00000000 		.word	backdoorOpen
 182 001c 00000000 		.word	backdoorOpenTime
 183              		.cfi_endproc
 184              	.LFE4:
 186              		.section	.text.BackDoorInit,"ax",%progbits
 187              		.align	1
 188              		.global	BackDoorInit
 189              		.syntax unified
 190              		.thumb
 191              		.thumb_func
 193              	BackDoorInit:
 194              	.LFB0:
  70:Core/Src/BLT/backdoor.c **** #if (BOOT_BACKDOOR_HOOKS_ENABLE > 0)
 195              		.loc 1 70 1 is_stmt 1 view -0
 196              		.cfi_startproc
ARM GAS  /tmp/ccGFhfHI.s 			page 8


 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199 0000 08B5     		push	{r3, lr}
 200              		.cfi_def_cfa_offset 8
 201              		.cfi_offset 3, -8
 202              		.cfi_offset 14, -4
  92:Core/Src/BLT/backdoor.c ****   BackDoorRestartTimer();
 203              		.loc 1 92 3 view .LVU32
  92:Core/Src/BLT/backdoor.c ****   BackDoorRestartTimer();
 204              		.loc 1 92 16 is_stmt 0 view .LVU33
 205 0002 044B     		ldr	r3, .L21
 206 0004 0122     		movs	r2, #1
 207 0006 1A70     		strb	r2, [r3]
  93:Core/Src/BLT/backdoor.c **** #endif
 208              		.loc 1 93 3 is_stmt 1 view .LVU34
 209 0008 FFF7FEFF 		bl	BackDoorRestartTimer
 210              	.LVL5:
  96:Core/Src/BLT/backdoor.c **** } /*** end of BackDoorInit ***/
 211              		.loc 1 96 3 view .LVU35
 212 000c FFF7FEFF 		bl	BackDoorCheck
 213              	.LVL6:
  97:Core/Src/BLT/backdoor.c **** 
 214              		.loc 1 97 1 is_stmt 0 view .LVU36
 215 0010 08BD     		pop	{r3, pc}
 216              	.L22:
 217 0012 00BF     		.align	2
 218              	.L21:
 219 0014 00000000 		.word	backdoorOpen
 220              		.cfi_endproc
 221              	.LFE0:
 223              		.section	.bss.backdoorExtensionTime,"aw",%nobits
 224              		.align	2
 227              	backdoorExtensionTime:
 228 0000 00000000 		.space	4
 229              		.section	.bss.backdoorOpenTime,"aw",%nobits
 230              		.align	2
 233              	backdoorOpenTime:
 234 0000 00000000 		.space	4
 235              		.section	.bss.backdoorOpen,"aw",%nobits
 238              	backdoorOpen:
 239 0000 00       		.space	1
 240              		.text
 241              	.Letext0:
 242              		.file 2 "Core/Inc/BLT/types.h"
 243              		.file 3 "Core/Inc/BLT/timer.h"
 244              		.file 4 "Core/Inc/BLT/com.h"
 245              		.file 5 "Core/Inc/BLT/cpu.h"
ARM GAS  /tmp/ccGFhfHI.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 backdoor.c
     /tmp/ccGFhfHI.s:21     .text.BackDoorCheck:0000000000000000 $t
     /tmp/ccGFhfHI.s:27     .text.BackDoorCheck:0000000000000000 BackDoorCheck
     /tmp/ccGFhfHI.s:81     .text.BackDoorCheck:0000000000000038 $d
     /tmp/ccGFhfHI.s:238    .bss.backdoorOpen:0000000000000000 backdoorOpen
     /tmp/ccGFhfHI.s:227    .bss.backdoorExtensionTime:0000000000000000 backdoorExtensionTime
     /tmp/ccGFhfHI.s:233    .bss.backdoorOpenTime:0000000000000000 backdoorOpenTime
     /tmp/ccGFhfHI.s:88     .text.BackDoorSetExtension:0000000000000000 $t
     /tmp/ccGFhfHI.s:94     .text.BackDoorSetExtension:0000000000000000 BackDoorSetExtension
     /tmp/ccGFhfHI.s:111    .text.BackDoorSetExtension:0000000000000008 $d
     /tmp/ccGFhfHI.s:116    .text.BackDoorGetExtension:0000000000000000 $t
     /tmp/ccGFhfHI.s:122    .text.BackDoorGetExtension:0000000000000000 BackDoorGetExtension
     /tmp/ccGFhfHI.s:137    .text.BackDoorGetExtension:0000000000000008 $d
     /tmp/ccGFhfHI.s:142    .text.BackDoorRestartTimer:0000000000000000 $t
     /tmp/ccGFhfHI.s:148    .text.BackDoorRestartTimer:0000000000000000 BackDoorRestartTimer
     /tmp/ccGFhfHI.s:181    .text.BackDoorRestartTimer:0000000000000018 $d
     /tmp/ccGFhfHI.s:187    .text.BackDoorInit:0000000000000000 $t
     /tmp/ccGFhfHI.s:193    .text.BackDoorInit:0000000000000000 BackDoorInit
     /tmp/ccGFhfHI.s:219    .text.BackDoorInit:0000000000000014 $d
     /tmp/ccGFhfHI.s:224    .bss.backdoorExtensionTime:0000000000000000 $d
     /tmp/ccGFhfHI.s:230    .bss.backdoorOpenTime:0000000000000000 $d
     /tmp/ccGFhfHI.s:239    .bss.backdoorOpen:0000000000000000 $d

UNDEFINED SYMBOLS
ComIsConnected
TimerGet
CpuStartUserProgram
